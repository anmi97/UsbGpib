
TestAndMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00003550  000035e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000498  00800146  00800146  0000362a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000365c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0f4  00000000  00000000  00003af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022d6  00000000  00000000  0000ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f75  00000000  00000000  00010ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c5c  00000000  00000000  00016e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029e6  00000000  00000000  00017a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a7d  00000000  00000000  0001a476  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e88  00000000  00000000  00022ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0b c1       	rjmp	.+534    	; 0x218 <__ctors_end>
       2:	00 00       	nop
       4:	25 c1       	rjmp	.+586    	; 0x250 <__bad_interrupt>
       6:	00 00       	nop
       8:	23 c1       	rjmp	.+582    	; 0x250 <__bad_interrupt>
       a:	00 00       	nop
       c:	21 c1       	rjmp	.+578    	; 0x250 <__bad_interrupt>
       e:	00 00       	nop
      10:	1f c1       	rjmp	.+574    	; 0x250 <__bad_interrupt>
      12:	00 00       	nop
      14:	1d c1       	rjmp	.+570    	; 0x250 <__bad_interrupt>
      16:	00 00       	nop
      18:	1b c1       	rjmp	.+566    	; 0x250 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	19 c1       	rjmp	.+562    	; 0x250 <__bad_interrupt>
      1e:	00 00       	nop
      20:	17 c1       	rjmp	.+558    	; 0x250 <__bad_interrupt>
      22:	00 00       	nop
      24:	15 c1       	rjmp	.+554    	; 0x250 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__vector_10>
      2c:	11 c1       	rjmp	.+546    	; 0x250 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0f c1       	rjmp	.+542    	; 0x250 <__bad_interrupt>
      32:	00 00       	nop
      34:	0d c1       	rjmp	.+538    	; 0x250 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c1       	rjmp	.+534    	; 0x250 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	09 c1       	rjmp	.+530    	; 0x250 <__bad_interrupt>
      3e:	00 00       	nop
      40:	07 c1       	rjmp	.+526    	; 0x250 <__bad_interrupt>
      42:	00 00       	nop
      44:	05 c1       	rjmp	.+522    	; 0x250 <__bad_interrupt>
      46:	00 00       	nop
      48:	03 c1       	rjmp	.+518    	; 0x250 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	01 c1       	rjmp	.+514    	; 0x250 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ff c0       	rjmp	.+510    	; 0x250 <__bad_interrupt>
      52:	00 00       	nop
      54:	fd c0       	rjmp	.+506    	; 0x250 <__bad_interrupt>
      56:	00 00       	nop
      58:	fb c0       	rjmp	.+502    	; 0x250 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_23>
      60:	f7 c0       	rjmp	.+494    	; 0x250 <__bad_interrupt>
      62:	00 00       	nop
      64:	f5 c0       	rjmp	.+490    	; 0x250 <__bad_interrupt>
      66:	00 00       	nop
      68:	f3 c0       	rjmp	.+486    	; 0x250 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f1 c0       	rjmp	.+482    	; 0x250 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ef c0       	rjmp	.+478    	; 0x250 <__bad_interrupt>
      72:	00 00       	nop
      74:	ed c0       	rjmp	.+474    	; 0x250 <__bad_interrupt>
      76:	00 00       	nop
      78:	eb c0       	rjmp	.+470    	; 0x250 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e9 c0       	rjmp	.+466    	; 0x250 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e7 c0       	rjmp	.+462    	; 0x250 <__bad_interrupt>
      82:	00 00       	nop
      84:	e5 c0       	rjmp	.+458    	; 0x250 <__bad_interrupt>
      86:	00 00       	nop
      88:	e3 c0       	rjmp	.+454    	; 0x250 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e1 c0       	rjmp	.+450    	; 0x250 <__bad_interrupt>
      8e:	00 00       	nop
      90:	df c0       	rjmp	.+446    	; 0x250 <__bad_interrupt>
      92:	00 00       	nop
      94:	dd c0       	rjmp	.+442    	; 0x250 <__bad_interrupt>
      96:	00 00       	nop
      98:	db c0       	rjmp	.+438    	; 0x250 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d9 c0       	rjmp	.+434    	; 0x250 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d7 c0       	rjmp	.+430    	; 0x250 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d5 c0       	rjmp	.+426    	; 0x250 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d3 c0       	rjmp	.+422    	; 0x250 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	10 03 47 00 70 00 69 00 62 00 55 00 73 00 62 00     ..G.p.i.b.U.s.b.
      bc:	00 00                                               ..

000000be <ManufacturerString>:
      be:	16 03 58 00 79 00 70 00 68 00 72 00 6f 00 4c 00     ..X.y.p.h.r.o.L.
      ce:	61 00 62 00 73 00 00 00                             a.b.s...

000000d6 <LanguageString>:
      d6:	04 03 09 04                                         ....

000000da <ConfigurationDescriptor>:
      da:	09 02 27 00 01 01 00 c0 32 09 04 00 00 03 fe 03     ..'.....2.......
      ea:	01 00 07 05 03 02 40 00 05 07 05 82 02 40 00 05     ......@......@..
      fa:	07 05 81 03 02 00 05                                .......

00000101 <DeviceDescriptor>:
     101:	12 01 10 01 00 00 00 08 eb 03 65 20 01 00 01 02     ..........e ....
     111:	03 01                                               ..

00000113 <cmd_list>:
     113:	0b 15 11 15 f7 14 fc 14 01 15 44 15 21 15 23 15     ..........D.!.#.
     123:	25 15 69 15 3c 15 1c 15 06 15 0c 15 27 15 2e 15     %.i.<.......'...
     133:	35 15 f6 14 42 15 12 15 17 15 5a 15                 5...B.....Z.

0000013f <cmd_parser>:
     13f:	06 61 0d 74 4a 76 79 30 82 72 99 73 a5 02 75 12     .a.tJvy0.r.s..u.
     14f:	64 44 01 74 15 01 6f 18 01 69 1b 01 64 1e 02 20     dD.t..o..i..d.. 
     15f:	23 bf 05 02 6f 28 73 30 02 ee 00 66 2d 01 e6 01     #...o(s0...f-...
     16f:	01 6c 33 01 6f 36 01 77 39 01 65 3c 02 f2 03 73     .l3.o6.w9.e<...s
     17f:	41 01 f4 04 01 64 47 01 f2 11 01 65 4d 01 72 50     A....dG....eM.rP
     18f:	01 6d 53 02 20 58 bf 09 04 63 61 6c 64 65 67 73     .mS. X...caldegs
     19f:	6d 01 f2 06 01 e6 07 01 6f 6a 01 e9 08 01 74 70     m.......oj....tp
     1af:	01 6f 73 01 72 76 01 e5 0a 01 65 7c 01 72 7f 01     .os.rv....e|.r..
     1bf:	bf 0b 02 30 87 31 8f 01 30 8a 02 b0 0c b1 0d 01     ...0.1..0.......
     1cf:	30 92 03 b0 0e b1 0f b2 10 01 65 9c 01 73 9f 01     0.........e..s..
     1df:	65 a2 01 f4 12 01 74 a8 01 72 ab 01 69 ae 01 6e     e.....t..r..i..n
     1ef:	b1 01 67 b4 02 20 b9 bf 15 02 73 be 6e ca 01 68     ..g.. ....s.n..h
     1ff:	c1 01 6f c4 01 72 c7 01 f4 13 01 6f cd 01 72 d0     ..o..r.....o..r.
     20f:	01 6d d3 01 61 d6 01 ec 14                          .m..a....

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	da e0       	ldi	r29, 0x0A	; 10
     220:	de bf       	out	0x3e, r29	; 62
     222:	cd bf       	out	0x3d, r28	; 61

00000224 <__do_copy_data>:
     224:	11 e0       	ldi	r17, 0x01	; 1
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	e0 e5       	ldi	r30, 0x50	; 80
     22c:	f5 e3       	ldi	r31, 0x35	; 53
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x10>
     230:	05 90       	lpm	r0, Z+
     232:	0d 92       	st	X+, r0
     234:	a6 34       	cpi	r26, 0x46	; 70
     236:	b1 07       	cpc	r27, r17
     238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0xc>

0000023a <__do_clear_bss>:
     23a:	25 e0       	ldi	r18, 0x05	; 5
     23c:	a6 e4       	ldi	r26, 0x46	; 70
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
     242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
     244:	ae 3d       	cpi	r26, 0xDE	; 222
     246:	b2 07       	cpc	r27, r18
     248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>
     24a:	d0 d7       	rcall	.+4000   	; 0x11ec <main>
     24c:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <_exit>

00000250 <__bad_interrupt>:
     250:	d7 ce       	rjmp	.-594    	; 0x0 <__vectors>

00000252 <TMC_SetInternalSerial>:
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
		addr = 1;
	gpib_addr = addr; /* set global GPIB address to found address*/
	
	return devicepresent;
}
     252:	2f e5       	ldi	r18, 0x5F	; 95
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4f b7       	in	r20, 0x3f	; 63
     258:	f8 94       	cli
     25a:	93 e0       	ldi	r25, 0x03	; 3
     25c:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <tmc_serial_string+0x1>
     260:	88 23       	and	r24, r24
     262:	09 f4       	brne	.+2      	; 0x266 <TMC_SetInternalSerial+0x14>
     264:	64 c0       	rjmp	.+200    	; 0x32e <TMC_SetInternalSerial+0xdc>
     266:	87 e4       	ldi	r24, 0x47	; 71
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <tmc_serial_string+0x3>
     26e:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <tmc_serial_string+0x2>
     272:	80 e5       	ldi	r24, 0x50	; 80
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <tmc_serial_string+0x5>
     27a:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <tmc_serial_string+0x4>
     27e:	89 e4       	ldi	r24, 0x49	; 73
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <tmc_serial_string+0x7>
     286:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <tmc_serial_string+0x6>
     28a:	82 e4       	ldi	r24, 0x42	; 66
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <tmc_serial_string+0x9>
     292:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <tmc_serial_string+0x8>
     296:	30 93 76 05 	sts	0x0576, r19	; 0x800576 <tmc_serial_string+0xb>
     29a:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <tmc_serial_string+0xa>
     29e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     2a2:	9d ec       	ldi	r25, 0xCD	; 205
     2a4:	89 9f       	mul	r24, r25
     2a6:	91 2d       	mov	r25, r1
     2a8:	11 24       	eor	r1, r1
     2aa:	96 95       	lsr	r25
     2ac:	96 95       	lsr	r25
     2ae:	96 95       	lsr	r25
     2b0:	69 2f       	mov	r22, r25
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	60 5d       	subi	r22, 0xD0	; 208
     2b6:	7f 4f       	sbci	r23, 0xFF	; 255
     2b8:	70 93 78 05 	sts	0x0578, r23	; 0x800578 <tmc_serial_string+0xd>
     2bc:	60 93 77 05 	sts	0x0577, r22	; 0x800577 <tmc_serial_string+0xc>
     2c0:	5a e0       	ldi	r21, 0x0A	; 10
     2c2:	95 9f       	mul	r25, r21
     2c4:	80 19       	sub	r24, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	c0 96       	adiw	r24, 0x30	; 48
     2cc:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <tmc_serial_string+0xf>
     2d0:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <tmc_serial_string+0xe>
     2d4:	30 93 7c 05 	sts	0x057C, r19	; 0x80057c <tmc_serial_string+0x11>
     2d8:	20 93 7b 05 	sts	0x057B, r18	; 0x80057b <tmc_serial_string+0x10>
     2dc:	28 e0       	ldi	r18, 0x08	; 8
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	9e e0       	ldi	r25, 0x0E	; 14
     2e2:	31 e2       	ldi	r19, 0x21	; 33
     2e4:	0b c0       	rjmp	.+22     	; 0x2fc <TMC_SetInternalSerial+0xaa>
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	f7 96       	adiw	r30, 0x37	; 55
     2ea:	aa 0f       	add	r26, r26
     2ec:	bb 1f       	adc	r27, r27
     2ee:	a3 59       	subi	r26, 0x93	; 147
     2f0:	ba 4f       	sbci	r27, 0xFA	; 250
     2f2:	ed 93       	st	X+, r30
     2f4:	fc 93       	st	X, r31
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	84 31       	cpi	r24, 0x14	; 20
     2fa:	99 f0       	breq	.+38     	; 0x322 <TMC_SetInternalSerial+0xd0>
     2fc:	a2 2f       	mov	r26, r18
     2fe:	a8 0f       	add	r26, r24
     300:	e9 2f       	mov	r30, r25
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     308:	e4 91       	lpm	r30, Z
     30a:	80 ff       	sbrs	r24, 0
     30c:	03 c0       	rjmp	.+6      	; 0x314 <TMC_SetInternalSerial+0xc2>
     30e:	e2 95       	swap	r30
     310:	ef 70       	andi	r30, 0x0F	; 15
     312:	9f 5f       	subi	r25, 0xFF	; 255
     314:	ef 70       	andi	r30, 0x0F	; 15
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	28 f7       	brcc	.-54     	; 0x2e6 <TMC_SetInternalSerial+0x94>
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	f0 96       	adiw	r30, 0x30	; 48
     320:	e4 cf       	rjmp	.-56     	; 0x2ea <TMC_SetInternalSerial+0x98>
     322:	2b 5e       	subi	r18, 0xEB	; 235
     324:	22 0f       	add	r18, r18
     326:	20 93 6b 05 	sts	0x056B, r18	; 0x80056b <tmc_serial_string>
     32a:	4f bf       	out	0x3f, r20	; 63
     32c:	08 95       	ret
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	d6 cf       	rjmp	.-84     	; 0x2de <TMC_SetInternalSerial+0x8c>

00000332 <is_timedout>:
     332:	85 e3       	ldi	r24, 0x35	; 53
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <is_timedout+0x2>
     338:	00 00       	nop
     33a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     33e:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     342:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     346:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	a1 05       	cpc	r26, r1
     34e:	b1 05       	cpc	r27, r1
     350:	69 f0       	breq	.+26     	; 0x36c <is_timedout+0x3a>
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	a1 09       	sbc	r26, r1
     356:	b1 09       	sbc	r27, r1
     358:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <timeout_val>
     35c:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <timeout_val+0x1>
     360:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <timeout_val+0x2>
     364:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <timeout_val+0x3>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	08 95       	ret
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	08 95       	ret

00000370 <tmc_gpib_write_timedout>:
     370:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <USB_USBTask>
     374:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <IsTMCBulkOUTReset>
     378:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
     37c:	89 2b       	or	r24, r25
     37e:	08 95       	ret

00000380 <tmc_gpib_read_timedout>:
     380:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <USB_USBTask>
     384:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <IsTMCBulkINReset>
     388:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <IsTMCBulkOUTReset>
     38c:	89 2b       	or	r24, r25
     38e:	08 95       	ret

00000390 <ReadTMCHeader.part.0>:
     390:	dc 01       	movw	r26, r24
     392:	fc 01       	movw	r30, r24
     394:	9c 01       	movw	r18, r24
     396:	24 5f       	subi	r18, 0xF4	; 244
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     39e:	91 93       	st	Z+, r25
     3a0:	e2 17       	cp	r30, r18
     3a2:	f3 07       	cpc	r31, r19
     3a4:	d1 f7       	brne	.-12     	; 0x39a <ReadTMCHeader.part.0+0xa>
     3a6:	11 96       	adiw	r26, 0x01	; 1
     3a8:	8c 91       	ld	r24, X
     3aa:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <CurrentTransferTag>
     3ae:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <IsTMCBulkOUTReset>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	89 27       	eor	r24, r25
     3b6:	08 95       	ret

000003b8 <Jump_To_Bootloader>:
     3b8:	0e 94 e7 17 	call	0x2fce	; 0x2fce <USB_Disable>
     3bc:	f8 94       	cli
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	87 ea       	ldi	r24, 0xA7	; 167
     3c2:	91 e6       	ldi	r25, 0x61	; 97
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <Jump_To_Bootloader+0xc>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <Jump_To_Bootloader+0x16>
     3ce:	00 00       	nop
     3d0:	9c e0       	ldi	r25, 0x0C	; 12
     3d2:	88 e1       	ldi	r24, 0x18	; 24
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	a8 95       	wdr
     3da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     3e4:	ef ef       	ldi	r30, 0xFF	; 255
     3e6:	f9 e6       	ldi	r31, 0x69	; 105
     3e8:	28 e1       	ldi	r18, 0x18	; 24
     3ea:	e1 50       	subi	r30, 0x01	; 1
     3ec:	f0 40       	sbci	r31, 0x00	; 0
     3ee:	20 40       	sbci	r18, 0x00	; 0
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <Jump_To_Bootloader+0x32>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <Jump_To_Bootloader+0x3c>
     3f4:	00 00       	nop
     3f6:	e0 e0       	ldi	r30, 0x00	; 0
     3f8:	f0 e7       	ldi	r31, 0x70	; 112
     3fa:	09 95       	icall
     3fc:	ff cf       	rjmp	.-2      	; 0x3fc <Jump_To_Bootloader+0x44>

000003fe <identifyGpibDevice>:

/* returns TRUE, if a string was received over GPIB */
bool identifyGpibDevice(void)
{
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	00 d0       	rcall	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;
     40e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <tmc_serial_string>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     412:	80 ea       	ldi	r24, 0xA0	; 160
     414:	96 e8       	ldi	r25, 0x86	; 134
     416:	a1 e0       	ldi	r26, 0x01	; 1
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <timeout_val>
     41e:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <timeout_val+0x1>
     422:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <timeout_val+0x2>
     426:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <timeout_val+0x3>
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;

	timeout_start(100000); /* 1s timeout*/
	gpib_make_listener(gpib_addr, is_timedout);
     42a:	69 e9       	ldi	r22, 0x99	; 153
     42c:	71 e0       	ldi	r23, 0x01	; 1
     42e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     432:	0e 94 0d 13 	call	0x261a	; 0x261a <gpib_make_listener>
	if (timeout_val != 0) gpib_writedat('*', false, is_timedout);
     436:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     43a:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     43e:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     442:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     446:	89 2b       	or	r24, r25
     448:	8a 2b       	or	r24, r26
     44a:	8b 2b       	or	r24, r27
     44c:	09 f0       	breq	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	04 c1       	rjmp	.+520    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
	if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
	if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
	if (timeout_val != 0) gpib_writedat('N', false, is_timedout);
	if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
	if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
	gpib_untalk_unlisten(is_timedout);
     450:	89 e9       	ldi	r24, 0x99	; 153
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
	
	if (timeout_val != 0) 
     458:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     45c:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     460:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     464:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     468:	89 2b       	or	r24, r25
     46a:	8a 2b       	or	r24, r26
     46c:	8b 2b       	or	r24, r27
     46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	d5 c0       	rjmp	.+426    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     472:	80 ea       	ldi	r24, 0xA0	; 160
     474:	96 e8       	ldi	r25, 0x86	; 134
     476:	a1 e0       	ldi	r26, 0x01	; 1
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <timeout_val>
     47e:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <timeout_val+0x1>
     482:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <timeout_val+0x2>
     486:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <timeout_val+0x3>
	gpib_untalk_unlisten(is_timedout);
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
     48a:	69 e9       	ldi	r22, 0x99	; 153
     48c:	71 e0       	ldi	r23, 0x01	; 1
     48e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     492:	0e 94 b9 12 	call	0x2572	; 0x2572 <gpib_make_talker>
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */
     496:	f1 2c       	mov	r15, r1
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
		len = 0;
     498:	10 e0       	ldi	r17, 0x00	; 0
		do
		{
			c = gpib_readdat(&eoi, &timedout, is_timedout);
     49a:	49 e9       	ldi	r20, 0x99	; 153
     49c:	51 e0       	ldi	r21, 0x01	; 1
     49e:	be 01       	movw	r22, r28
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	ce 01       	movw	r24, r28
     4a6:	02 96       	adiw	r24, 0x02	; 2
     4a8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <gpib_readdat>
			hascomma = hascomma || (c == ',');
     4ac:	f1 10       	cpse	r15, r1
     4ae:	d1 c0       	rjmp	.+418    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     4b0:	8c 32       	cpi	r24, 0x2C	; 44
     4b2:	b1 f0       	breq	.+44     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&') ) /* YEP, a comma and amphersand is allowed in USBTMC spec, but R&S SW does not like this... */
     4b4:	98 2f       	mov	r25, r24
     4b6:	9f 7e       	andi	r25, 0xEF	; 239
     4b8:	9a 32       	cpi	r25, 0x2A	; 42
     4ba:	a1 f0       	breq	.+40     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4bc:	9f 32       	cpi	r25, 0x2F	; 47
     4be:	91 f0       	breq	.+36     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4c0:	8c 35       	cpi	r24, 0x5C	; 92
     4c2:	81 f0       	breq	.+32     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4c4:	98 2f       	mov	r25, r24
     4c6:	9d 7f       	andi	r25, 0xFD	; 253
     4c8:	90 32       	cpi	r25, 0x20	; 32
     4ca:	61 f0       	breq	.+24     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4cc:	8c 32       	cpi	r24, 0x2C	; 44
     4ce:	51 f0       	breq	.+20     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4d0:	86 32       	cpi	r24, 0x26	; 38
     4d2:	41 f0       	breq	.+16     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
				c='_';
			if ( (c >=32) && (c <=126))
     4d4:	90 ee       	ldi	r25, 0xE0	; 224
     4d6:	98 0f       	add	r25, r24
     4d8:	9f 35       	cpi	r25, 0x5F	; 95
     4da:	78 f4       	brcc	.+30     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		gpib_make_talker(gpib_addr, is_timedout);
		len = 0;
		do
		{
			c = gpib_readdat(&eoi, &timedout, is_timedout);
			hascomma = hascomma || (c == ',');
     4e0:	ff 24       	eor	r15, r15
     4e2:	f3 94       	inc	r15
     4e4:	8f e5       	ldi	r24, 0x5F	; 95
     4e6:	90 e0       	ldi	r25, 0x00	; 0
			if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&') ) /* YEP, a comma and amphersand is allowed in USBTMC spec, but R&S SW does not like this... */
				c='_';
			if ( (c >=32) && (c <=126))
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     4e8:	e1 2f       	mov	r30, r17
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e3 59       	subi	r30, 0x93	; 147
     4f2:	fa 4f       	sbci	r31, 0xFA	; 250
     4f4:	91 83       	std	Z+1, r25	; 0x01
     4f6:	80 83       	st	Z, r24
     4f8:	1f 5f       	subi	r17, 0xFF	; 255
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
     4fa:	12 33       	cpi	r17, 0x32	; 50
     4fc:	08 f0       	brcs	.+2      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4fe:	3b c1       	rjmp	.+630    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	81 11       	cpse	r24, r1
     504:	03 c0       	rjmp	.+6      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	88 23       	and	r24, r24
     50a:	39 f2       	breq	.-114    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     50c:	e1 2f       	mov	r30, r17
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e5 59       	subi	r30, 0x95	; 149
     516:	fa 4f       	sbci	r31, 0xFA	; 250
     518:	80 81       	ld	r24, Z
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	8f 35       	cpi	r24, 0x5F	; 95
     51e:	91 05       	cpc	r25, r1
     520:	09 f0       	breq	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     522:	35 c1       	rjmp	.+618    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     524:	12 30       	cpi	r17, 0x02	; 2
     526:	28 f4       	brcc	.+10     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     528:	32 c1       	rjmp	.+612    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     52a:	10 2f       	mov	r17, r16
     52c:	01 30       	cpi	r16, 0x01	; 1
     52e:	09 f4       	brne	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     530:	f9 c0       	rjmp	.+498    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
			len--;
     532:	0f ef       	ldi	r16, 0xFF	; 255
     534:	01 0f       	add	r16, r17
			if ( (c >=32) && (c <=126))
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     536:	e0 2f       	mov	r30, r16
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	e5 59       	subi	r30, 0x95	; 149
     540:	fa 4f       	sbci	r31, 0xFA	; 250
     542:	80 81       	ld	r24, Z
     544:	91 81       	ldd	r25, Z+1	; 0x01
     546:	8f 35       	cpi	r24, 0x5F	; 95
     548:	91 05       	cpc	r25, r1
     54a:	79 f3       	breq	.-34     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			len--;
		tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     54c:	11 0f       	add	r17, r17
     54e:	10 93 6b 05 	sts	0x056B, r17	; 0x80056b <tmc_serial_string>
		
		gpib_untalk_unlisten(is_timedout);
     552:	89 e9       	ldi	r24, 0x99	; 153
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
     55a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     55e:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     562:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     566:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	a1 05       	cpc	r26, r1
     56e:	b1 05       	cpc	r27, r1
     570:	09 f0       	breq	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     572:	ec c0       	rjmp	.+472    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     574:	80 ea       	ldi	r24, 0xA0	; 160
     576:	96 e8       	ldi	r25, 0x86	; 134
     578:	a1 e0       	ldi	r26, 0x01	; 1
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <timeout_val>
     580:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <timeout_val+0x1>
     584:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <timeout_val+0x2>
     588:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <timeout_val+0x3>
		gpib_untalk_unlisten(is_timedout);
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
		{ /* so try out ID? query */
			timeout_start(100000); /* 1s timeout*/
			gpib_make_listener(gpib_addr, is_timedout);
     58c:	69 e9       	ldi	r22, 0x99	; 153
     58e:	71 e0       	ldi	r23, 0x01	; 1
     590:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     594:	0e 94 0d 13 	call	0x261a	; 0x261a <gpib_make_listener>
			if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     598:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     59c:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     5a0:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     5a4:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     5a8:	89 2b       	or	r24, r25
     5aa:	8a 2b       	or	r24, r26
     5ac:	8b 2b       	or	r24, r27
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5b0:	91 c1       	rjmp	.+802    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
			if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
			if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
			gpib_untalk_unlisten(is_timedout);
     5b2:	89 e9       	ldi	r24, 0x99	; 153
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
			if (timeout_val != 0) 
     5ba:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     5be:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     5c2:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     5c6:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	a1 05       	cpc	r26, r1
     5ce:	b1 05       	cpc	r27, r1
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5d2:	f7 c0       	rjmp	.+494    	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     5d4:	f1 10       	cpse	r15, r1
     5d6:	22 c0       	rjmp	.+68     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
			if ( (tmc_serial_string.UnicodeString[0] == 'H') &&
     5d8:	20 91 6d 05 	lds	r18, 0x056D	; 0x80056d <tmc_serial_string+0x2>
     5dc:	30 91 6e 05 	lds	r19, 0x056E	; 0x80056e <tmc_serial_string+0x3>
     5e0:	28 34       	cpi	r18, 0x48	; 72
     5e2:	31 05       	cpc	r19, r1
     5e4:	d9 f4       	brne	.+54     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     5e6:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <tmc_serial_string+0x4>
     5ea:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <tmc_serial_string+0x5>
     5ee:	20 35       	cpi	r18, 0x50	; 80
     5f0:	31 05       	cpc	r19, r1
     5f2:	a1 f4       	brne	.+40     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     5f4:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <tmc_serial_string+0x6>
     5f8:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <tmc_serial_string+0x7>
     5fc:	20 53       	subi	r18, 0x30	; 48
     5fe:	31 09       	sbc	r19, r1
     600:	ff 24       	eor	r15, r15
     602:	f3 94       	inc	r15
     604:	2a 30       	cpi	r18, 0x0A	; 10
     606:	31 05       	cpc	r19, r1
     608:	08 f0       	brcs	.+2      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     60a:	a4 c1       	rjmp	.+840    	; 0x954 <__LOCK_REGION_LENGTH__+0x554>
			{
				hascomma = true;
			}
		
		
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
     60c:	89 2b       	or	r24, r25
     60e:	8a 2b       	or	r24, r26
     610:	8b 2b       	or	r24, r27
     612:	21 f0       	breq	.+8      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     614:	00 23       	and	r16, r16
     616:	11 f0       	breq	.+4      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     618:	f1 10       	cpse	r15, r1
     61a:	ab c0       	rjmp	.+342    	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
		{
			TMC_SetInternalSerial(true);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	19 de       	rcall	.-974    	; 0x252 <TMC_SetInternalSerial>
			gotStringViaGPIB = false;
     620:	10 e0       	ldi	r17, 0x00	; 0
		gotStringViaGPIB = false;
	}
	
	//TMC_SetInternalSerial(false);
	
	gpib_ren(false);
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 bd 11 	call	0x237a	; 0x237a <gpib_ren>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     628:	2f ef       	ldi	r18, 0xFF	; 255
     62a:	81 ee       	ldi	r24, 0xE1	; 225
     62c:	94 e0       	ldi	r25, 0x04	; 4
     62e:	21 50       	subi	r18, 0x01	; 1
     630:	80 40       	sbci	r24, 0x00	; 0
     632:	90 40       	sbci	r25, 0x00	; 0
     634:	e1 f7       	brne	.-8      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     636:	00 c0       	rjmp	.+0      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     638:	00 00       	nop
	_delay_ms(100);
	gpib_ren(true);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 bd 11 	call	0x237a	; 0x237a <gpib_ren>
	return gotStringViaGPIB;
}
     640:	81 2f       	mov	r24, r17
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	08 95       	ret
     652:	ff 24       	eor	r15, r15
     654:	f3 94       	inc	r15
     656:	2e cf       	rjmp	.-420    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>

	tmc_serial_string.Header.Size = 0;

	timeout_start(100000); /* 1s timeout*/
	gpib_make_listener(gpib_addr, is_timedout);
	if (timeout_val != 0) gpib_writedat('*', false, is_timedout);
     658:	49 e9       	ldi	r20, 0x99	; 153
     65a:	51 e0       	ldi	r21, 0x01	; 1
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	8a e2       	ldi	r24, 0x2A	; 42
     660:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     664:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     668:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     66c:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     670:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     674:	00 97       	sbiw	r24, 0x00	; 0
     676:	a1 05       	cpc	r26, r1
     678:	b1 05       	cpc	r27, r1
     67a:	09 f4       	brne	.+2      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     67c:	47 c0       	rjmp	.+142    	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     67e:	49 e9       	ldi	r20, 0x99	; 153
     680:	51 e0       	ldi	r21, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	89 e4       	ldi	r24, 0x49	; 73
     686:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     68a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     68e:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     692:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     696:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     69a:	89 2b       	or	r24, r25
     69c:	8a 2b       	or	r24, r26
     69e:	8b 2b       	or	r24, r27
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
     6a2:	d6 ce       	rjmp	.-596    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     6a4:	49 e9       	ldi	r20, 0x99	; 153
     6a6:	51 e0       	ldi	r21, 0x01	; 1
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	84 e4       	ldi	r24, 0x44	; 68
     6ac:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('N', false, is_timedout);
     6b0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     6b4:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     6b8:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     6bc:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     6c0:	89 2b       	or	r24, r25
     6c2:	8a 2b       	or	r24, r26
     6c4:	8b 2b       	or	r24, r27
     6c6:	09 f4       	brne	.+2      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     6c8:	c3 ce       	rjmp	.-634    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     6ca:	49 e9       	ldi	r20, 0x99	; 153
     6cc:	51 e0       	ldi	r21, 0x01	; 1
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	8e e4       	ldi	r24, 0x4E	; 78
     6d2:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     6d6:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     6da:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     6de:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     6e2:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     6e6:	89 2b       	or	r24, r25
     6e8:	8a 2b       	or	r24, r26
     6ea:	8b 2b       	or	r24, r27
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6ee:	b0 ce       	rjmp	.-672    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     6f0:	49 e9       	ldi	r20, 0x99	; 153
     6f2:	51 e0       	ldi	r21, 0x01	; 1
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	8f e3       	ldi	r24, 0x3F	; 63
     6f8:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
     6fc:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     700:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     704:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     708:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
	if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     70c:	89 2b       	or	r24, r25
     70e:	8a 2b       	or	r24, r26
     710:	8b 2b       	or	r24, r27
     712:	09 f4       	brne	.+2      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     714:	9d ce       	rjmp	.-710    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     716:	49 e9       	ldi	r20, 0x99	; 153
     718:	51 e0       	ldi	r21, 0x01	; 1
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	8a e0       	ldi	r24, 0x0A	; 10
     71e:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
     722:	96 ce       	rjmp	.-724    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
			len--;
		tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <tmc_serial_string>
		
		gpib_untalk_unlisten(is_timedout);
     72a:	89 e9       	ldi	r24, 0x99	; 153
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
     732:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     736:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     73a:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     73e:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	a1 05       	cpc	r26, r1
     746:	b1 05       	cpc	r27, r1
     748:	09 f4       	brne	.+2      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     74a:	14 cf       	rjmp	.-472    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     74c:	f1 10       	cpse	r15, r1
     74e:	11 c0       	rjmp	.+34     	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
			if ( (tmc_serial_string.UnicodeString[0] == 'H') &&
     750:	20 91 6d 05 	lds	r18, 0x056D	; 0x80056d <tmc_serial_string+0x2>
     754:	30 91 6e 05 	lds	r19, 0x056E	; 0x80056e <tmc_serial_string+0x3>
     758:	28 34       	cpi	r18, 0x48	; 72
     75a:	31 05       	cpc	r19, r1
     75c:	09 f0       	breq	.+2      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     75e:	5e cf       	rjmp	.-324    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     760:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <tmc_serial_string+0x4>
     764:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <tmc_serial_string+0x5>
     768:	20 35       	cpi	r18, 0x50	; 80
     76a:	31 05       	cpc	r19, r1
     76c:	09 f0       	breq	.+2      	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
     76e:	56 cf       	rjmp	.-340    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     770:	41 cf       	rjmp	.-382    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
{
	uint8_t c, len, hascomma;
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
     772:	11 e0       	ldi	r17, 0x01	; 1
     774:	56 cf       	rjmp	.-340    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
			if ( (c >=32) && (c <=126))
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     776:	e1 2f       	mov	r30, r17
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	e5 59       	subi	r30, 0x95	; 149
     780:	fa 4f       	sbci	r31, 0xFA	; 250
     782:	80 81       	ld	r24, Z
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	8f 35       	cpi	r24, 0x5F	; 95
     788:	91 05       	cpc	r25, r1
     78a:	09 f4       	brne	.+2      	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     78c:	d2 ce       	rjmp	.-604    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			len--;
		tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	81 0f       	add	r24, r17
     792:	88 0f       	add	r24, r24
     794:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <tmc_serial_string>
		
		gpib_untalk_unlisten(is_timedout);
     798:	89 e9       	ldi	r24, 0x99	; 153
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
     7a0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     7a4:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     7a8:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     7ac:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     7b0:	00 97       	sbiw	r24, 0x00	; 0
     7b2:	a1 05       	cpc	r26, r1
     7b4:	b1 05       	cpc	r27, r1
     7b6:	09 f4       	brne	.+2      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7b8:	ef c0       	rjmp	.+478    	; 0x998 <__LOCK_REGION_LENGTH__+0x598>
     7ba:	11 11       	cpse	r17, r1
     7bc:	eb c0       	rjmp	.+470    	; 0x994 <__LOCK_REGION_LENGTH__+0x594>
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	d9 ce       	rjmp	.-590    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     7c2:	80 ea       	ldi	r24, 0xA0	; 160
     7c4:	96 e8       	ldi	r25, 0x86	; 134
     7c6:	a1 e0       	ldi	r26, 0x01	; 1
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <timeout_val>
     7ce:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <timeout_val+0x1>
     7d2:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <timeout_val+0x2>
     7d6:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <timeout_val+0x3>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
			gpib_untalk_unlisten(is_timedout);
			if (timeout_val != 0) 
			{
				timeout_start(100000); /* 1s timeout*/
				gpib_make_talker(gpib_addr, is_timedout);
     7da:	69 e9       	ldi	r22, 0x99	; 153
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     7e2:	0e 94 b9 12 	call	0x2572	; 0x2572 <gpib_make_talker>
				len = 0;
     7e6:	00 e0       	ldi	r16, 0x00	; 0
				do
				{
					c = gpib_readdat(&eoi, &timedout, is_timedout);
     7e8:	49 e9       	ldi	r20, 0x99	; 153
     7ea:	51 e0       	ldi	r21, 0x01	; 1
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	ce 01       	movw	r24, r28
     7f4:	02 96       	adiw	r24, 0x02	; 2
     7f6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <gpib_readdat>
					hascomma = hascomma || (c == ',');
     7fa:	f1 10       	cpse	r15, r1
     7fc:	68 c0       	rjmp	.+208    	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
     7fe:	8c 32       	cpi	r24, 0x2C	; 44
     800:	b9 f0       	breq	.+46     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
					if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&'))
     802:	98 2f       	mov	r25, r24
     804:	9f 7e       	andi	r25, 0xEF	; 239
     806:	9a 32       	cpi	r25, 0x2A	; 42
     808:	a9 f0       	breq	.+42     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     80a:	9f 32       	cpi	r25, 0x2F	; 47
     80c:	99 f0       	breq	.+38     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     80e:	8c 35       	cpi	r24, 0x5C	; 92
     810:	89 f0       	breq	.+34     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     812:	98 2f       	mov	r25, r24
     814:	9d 7f       	andi	r25, 0xFD	; 253
     816:	90 32       	cpi	r25, 0x20	; 32
     818:	69 f0       	breq	.+26     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     81a:	8c 32       	cpi	r24, 0x2C	; 44
     81c:	59 f0       	breq	.+22     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     81e:	86 32       	cpi	r24, 0x26	; 38
     820:	49 f0       	breq	.+18     	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
						c='_';
					if ( (c >=32) && (c <=126) )
     822:	90 ee       	ldi	r25, 0xE0	; 224
     824:	98 0f       	add	r25, r24
     826:	9f 35       	cpi	r25, 0x5F	; 95
     828:	88 f4       	brcc	.+34     	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
     82a:	28 2f       	mov	r18, r24
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	05 c0       	rjmp	.+10     	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
				gpib_make_talker(gpib_addr, is_timedout);
				len = 0;
				do
				{
					c = gpib_readdat(&eoi, &timedout, is_timedout);
					hascomma = hascomma || (c == ',');
     830:	ff 24       	eor	r15, r15
     832:	f3 94       	inc	r15
     834:	2f e5       	ldi	r18, 0x5F	; 95
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	8f e5       	ldi	r24, 0x5F	; 95
					if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&'))
						c='_';
					if ( (c >=32) && (c <=126) )
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     83a:	e0 2f       	mov	r30, r16
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	e3 59       	subi	r30, 0x93	; 147
     844:	fa 4f       	sbci	r31, 0xFA	; 250
     846:	31 83       	std	Z+1, r19	; 0x01
     848:	20 83       	st	Z, r18
     84a:	0f 5f       	subi	r16, 0xFF	; 255
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
     84c:	02 33       	cpi	r16, 0x32	; 50
     84e:	08 f0       	brcs	.+2      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     850:	94 c0       	rjmp	.+296    	; 0x97a <__LOCK_REGION_LENGTH__+0x57a>
     852:	99 81       	ldd	r25, Y+1	; 0x01
     854:	91 11       	cpse	r25, r1
     856:	08 c0       	rjmp	.+16     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	91 11       	cpse	r25, r1
     85c:	05 c0       	rjmp	.+10     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     85e:	8d 30       	cpi	r24, 0x0D	; 13
     860:	19 f0       	breq	.+6      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     862:	8a 30       	cpi	r24, 0x0A	; 10
     864:	09 f0       	breq	.+2      	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     866:	c0 cf       	rjmp	.-128    	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     868:	e0 2f       	mov	r30, r16
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	e5 59       	subi	r30, 0x95	; 149
     872:	fa 4f       	sbci	r31, 0xFA	; 250
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	8f 35       	cpi	r24, 0x5F	; 95
     87a:	91 05       	cpc	r25, r1
     87c:	89 f4       	brne	.+34     	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
     87e:	02 30       	cpi	r16, 0x02	; 2
     880:	18 f4       	brcc	.+6      	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
     882:	0e c0       	rjmp	.+28     	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
     884:	01 30       	cpi	r16, 0x01	; 1
     886:	61 f0       	breq	.+24     	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
					len--;
     888:	01 50       	subi	r16, 0x01	; 1
					if ( (c >=32) && (c <=126) )
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     88a:	e0 2f       	mov	r30, r16
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	e5 59       	subi	r30, 0x95	; 149
     894:	fa 4f       	sbci	r31, 0xFA	; 250
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	8f 35       	cpi	r24, 0x5F	; 95
     89c:	91 05       	cpc	r25, r1
     89e:	91 f3       	breq	.-28     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
					len--;
				tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 0f       	add	r24, r16
     8a4:	88 0f       	add	r24, r24
     8a6:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <tmc_serial_string>
				gpib_untalk_unlisten(is_timedout);
     8aa:	89 e9       	ldi	r24, 0x99	; 153
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
     8b2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     8b6:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     8ba:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     8be:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
			}				
		}
		
		
		if (!hascomma)
     8c2:	ff 20       	and	r15, r15
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
     8c6:	48 c0       	rjmp	.+144    	; 0x958 <__LOCK_REGION_LENGTH__+0x558>
     8c8:	ff 24       	eor	r15, r15
     8ca:	f3 94       	inc	r15
     8cc:	9f ce       	rjmp	.-706    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     8ce:	ff 24       	eor	r15, r15
     8d0:	f3 94       	inc	r15
     8d2:	97 cf       	rjmp	.-210    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
		{ /* so try out ID? query */
			timeout_start(100000); /* 1s timeout*/
			gpib_make_listener(gpib_addr, is_timedout);
			if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     8d4:	49 e9       	ldi	r20, 0x99	; 153
     8d6:	51 e0       	ldi	r21, 0x01	; 1
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	89 e4       	ldi	r24, 0x49	; 73
     8dc:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     8e0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     8e4:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     8e8:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     8ec:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     8f0:	89 2b       	or	r24, r25
     8f2:	8a 2b       	or	r24, r26
     8f4:	8b 2b       	or	r24, r27
     8f6:	09 f4       	brne	.+2      	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
     8f8:	5c ce       	rjmp	.-840    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     8fa:	49 e9       	ldi	r20, 0x99	; 153
     8fc:	51 e0       	ldi	r21, 0x01	; 1
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	84 e4       	ldi	r24, 0x44	; 68
     902:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     906:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     90a:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     90e:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     912:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     916:	89 2b       	or	r24, r25
     918:	8a 2b       	or	r24, r26
     91a:	8b 2b       	or	r24, r27
     91c:	09 f4       	brne	.+2      	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
     91e:	49 ce       	rjmp	.-878    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     920:	49 e9       	ldi	r20, 0x99	; 153
     922:	51 e0       	ldi	r21, 0x01	; 1
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	8f e3       	ldi	r24, 0x3F	; 63
     928:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     92c:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <timeout_val>
     930:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <timeout_val+0x1>
     934:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <timeout_val+0x2>
     938:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <timeout_val+0x3>
     93c:	89 2b       	or	r24, r25
     93e:	8a 2b       	or	r24, r26
     940:	8b 2b       	or	r24, r27
     942:	09 f4       	brne	.+2      	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
     944:	36 ce       	rjmp	.-916    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     946:	49 e9       	ldi	r20, 0x99	; 153
     948:	51 e0       	ldi	r21, 0x01	; 1
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	8a e0       	ldi	r24, 0x0A	; 10
     94e:	0e 94 92 13 	call	0x2724	; 0x2724 <gpib_writedat>
     952:	2f ce       	rjmp	.-930    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     954:	f1 2c       	mov	r15, r1
     956:	5a ce       	rjmp	.-844    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
			}				
		}
		
		
		if (!hascomma)
			if ( (tmc_serial_string.UnicodeString[0] == 'H') &&
     958:	20 91 6d 05 	lds	r18, 0x056D	; 0x80056d <tmc_serial_string+0x2>
     95c:	30 91 6e 05 	lds	r19, 0x056E	; 0x80056e <tmc_serial_string+0x3>
     960:	28 34       	cpi	r18, 0x48	; 72
     962:	31 05       	cpc	r19, r1
     964:	09 f0       	breq	.+2      	; 0x968 <__LOCK_REGION_LENGTH__+0x568>
     966:	52 ce       	rjmp	.-860    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     968:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <tmc_serial_string+0x4>
     96c:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <tmc_serial_string+0x5>
     970:	20 35       	cpi	r18, 0x50	; 80
     972:	31 05       	cpc	r19, r1
     974:	09 f0       	breq	.+2      	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
     976:	4a ce       	rjmp	.-876    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     978:	3d ce       	rjmp	.-902    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
					if ( (c >=32) && (c <=126) )
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     97a:	e0 2f       	mov	r30, r16
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	e5 59       	subi	r30, 0x95	; 149
     984:	fa 4f       	sbci	r31, 0xFA	; 250
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	8f 35       	cpi	r24, 0x5F	; 95
     98c:	91 05       	cpc	r25, r1
     98e:	09 f4       	brne	.+2      	; 0x992 <__LOCK_REGION_LENGTH__+0x592>
     990:	7b cf       	rjmp	.-266    	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
     992:	86 cf       	rjmp	.-244    	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
     994:	01 2f       	mov	r16, r17
     996:	da ce       	rjmp	.-588    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     998:	01 2f       	mov	r16, r17
     99a:	ec cd       	rjmp	.-1064   	; 0x574 <__LOCK_REGION_LENGTH__+0x174>

0000099c <eeprom_update_if_changed>:
		Jump_To_Bootloader();
	}
}

void eeprom_update_if_changed(uint16_t addr, uint8_t value)
{
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	16 2f       	mov	r17, r22
	uint8_t oldval;
	eeprom_busy_wait();
     9a6:	f9 99       	sbic	0x1f, 1	; 31
     9a8:	fe cf       	rjmp	.-4      	; 0x9a6 <eeprom_update_if_changed+0xa>
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
     9aa:	ce 01       	movw	r24, r28
     9ac:	0e 94 90 1a 	call	0x3520	; 0x3520 <eeprom_read_byte>
	if (oldval != value)
     9b0:	81 17       	cp	r24, r17
     9b2:	49 f0       	breq	.+18     	; 0x9c6 <eeprom_update_if_changed+0x2a>
	{
		eeprom_busy_wait();
     9b4:	f9 99       	sbic	0x1f, 1	; 31
     9b6:	fe cf       	rjmp	.-4      	; 0x9b4 <eeprom_update_if_changed+0x18>
		eeprom_write_byte((uint8_t*)addr, value);		
     9b8:	61 2f       	mov	r22, r17
     9ba:	ce 01       	movw	r24, r28
	}
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
	eeprom_busy_wait();
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
	if (oldval != value)
	{
		eeprom_busy_wait();
		eeprom_write_byte((uint8_t*)addr, value);		
     9c2:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <eeprom_write_byte>
	}
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	08 95       	ret

000009ce <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     9ce:	84 b7       	in	r24, 0x34	; 52
     9d0:	87 7f       	andi	r24, 0xF7	; 247
     9d2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	a8 95       	wdr
     9da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9de:	88 61       	ori	r24, 0x18	; 24
     9e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9e8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     9f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     9fa:	0f be       	out	0x3f, r0	; 63
	/* Disable clock division */
	clock_prescale_set(clock_div_1);
	

	/* Hardware Initialization */
	USB_Init();
     9fc:	0e 94 3f 18 	call	0x307e	; 0x307e <USB_Init>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a00:	e0 ee       	ldi	r30, 0xE0	; 224
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 83       	st	Z, r24
	USB_Detach();

	
	/* update the TMC default serial number*/
	TMC_SetInternalSerial(false);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	22 dc       	rcall	.-1980   	; 0x252 <TMC_SetInternalSerial>
	
	/* LED to output and turn on */
	DDRF |= (1<<5);
     a0e:	85 9a       	sbi	0x10, 5	; 16
	LED(1);
     a10:	8d 9a       	sbi	0x11, 5	; 17
     a12:	08 95       	ret

00000a14 <EVENT_USB_Device_Connect>:
     a14:	08 95       	ret

00000a16 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
     a16:	08 95       	ret

00000a18 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a18:	42 e0       	ldi	r20, 0x02	; 2
     a1a:	61 ec       	ldi	r22, 0xC1	; 193
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <Endpoint_ConfigureEndpoint_Prv>
     a22:	46 e3       	ldi	r20, 0x36	; 54
     a24:	61 e8       	ldi	r22, 0x81	; 129
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <Endpoint_ConfigureEndpoint_Prv>
     a2c:	46 e3       	ldi	r20, 0x36	; 54
     a2e:	60 e8       	ldi	r22, 0x80	; 128
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <Endpoint_ConfigureEndpoint_Prv>

00000a36 <handle_control_Req_ReadStatusByte>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */

void handle_control_Req_ReadStatusByte(void)
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a3a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a3e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a40:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a44:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	uint8_t btag, statusReg;
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	btag = handleReadStatusByte_btagvalue;
     a48:	d0 91 4e 05 	lds	r29, 0x054E	; 0x80054e <handleReadStatusByte_btagvalue>

	gpib_ren(1); /* ensure that remote control is enabled */
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	0e 94 bd 11 	call	0x237a	; 0x237a <gpib_ren>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     a52:	80 ef       	ldi	r24, 0xF0	; 240
     a54:	99 e4       	ldi	r25, 0x49	; 73
     a56:	a2 e0       	ldi	r26, 0x02	; 2
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <timeout_val>
     a5e:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <timeout_val+0x1>
     a62:	a0 93 68 05 	sts	0x0568, r26	; 0x800568 <timeout_val+0x2>
     a66:	b0 93 69 05 	sts	0x0569, r27	; 0x800569 <timeout_val+0x3>
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	btag = handleReadStatusByte_btagvalue;

	gpib_ren(1); /* ensure that remote control is enabled */
	timeout_start(150000); /* 1.5s timeout*/
	statusReg =  gpib_readStatusByte(gpib_addr, is_timedout);
     a6a:	69 e9       	ldi	r22, 0x99	; 153
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     a72:	0e 94 b3 10 	call	0x2166	; 0x2166 <gpib_readStatusByte>
	statusReg |= srq_statusbyte; // or previously read autoread status byte (Visa will issue a read status byte after receiving a SRQ interrupt transfer)
     a76:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <srq_statusbyte>
     a7a:	89 2b       	or	r24, r25
	srq_statusbyte = 0x00; // clear previously read autoread status byte
     a7c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <srq_statusbyte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a86:	d0 93 f1 00 	sts	0x00F1, r29	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a8a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	Endpoint_Write_8(TMC_STATUS_SUCCESS);
	Endpoint_Write_8(btag);
	Endpoint_Write_8(statusReg);
	
	/* prepare interrupt response */
	RSTB_btag = btag;
     a8e:	d0 93 4c 05 	sts	0x054C, r29	; 0x80054c <RSTB_btag>
	RSTB_status = statusReg;
     a92:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <RSTB_status>
	handleRSTB = true;
     a96:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <handleRSTB>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a9e:	8e 77       	andi	r24, 0x7E	; 126
     aa0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_ClearIN();
	Endpoint_ClearStatusStage();
     aa4:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <Endpoint_ClearStatusStage>
	
	handleReadStatusByte = false; /* no matter what - we can cancel the pending transfer handling */
     aa8:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <handleReadStatusByte>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aac:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	Endpoint_SelectEndpoint(PrevEndpoint);
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <EVENT_USB_Device_ControlRequest>:

void EVENT_USB_Device_ControlRequest(void)
{
     ab6:	cf 93       	push	r28
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;	
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
     ab8:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <USB_ControlRequest+0x4>
     abc:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <USB_ControlRequest+0x5>
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	b9 f5       	brne	.+110    	; 0xb32 <__stack+0x33>
     ac4:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <USB_ControlRequest>
     ac8:	90 ff       	sbrs	r25, 0
     aca:	31 c0       	rjmp	.+98     	; 0xb2e <__stack+0x2f>
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     acc:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <USB_ControlRequest+0x1>
     ad0:	86 30       	cpi	r24, 0x06	; 6
     ad2:	09 f4       	brne	.+2      	; 0xad6 <EVENT_USB_Device_ControlRequest+0x20>
     ad4:	bb c0       	rjmp	.+374    	; 0xc4c <__stack+0x14d>
     ad6:	87 30       	cpi	r24, 0x07	; 7
     ad8:	d0 f1       	brcs	.+116    	; 0xb4e <__stack+0x4f>
     ada:	80 38       	cpi	r24, 0x80	; 128
     adc:	b9 f0       	breq	.+46     	; 0xb0c <__stack+0xd>
     ade:	08 f4       	brcc	.+2      	; 0xae2 <EVENT_USB_Device_ControlRequest+0x2c>
     ae0:	66 c0       	rjmp	.+204    	; 0xbae <__stack+0xaf>
     ae2:	81 3a       	cpi	r24, 0xA1	; 161
     ae4:	09 f4       	brne	.+2      	; 0xae8 <EVENT_USB_Device_ControlRequest+0x32>
     ae6:	27 c1       	rjmp	.+590    	; 0xd36 <__stack+0x237>
     ae8:	82 3a       	cpi	r24, 0xA2	; 162
     aea:	09 f4       	brne	.+2      	; 0xaee <EVENT_USB_Device_ControlRequest+0x38>
     aec:	a4 c0       	rjmp	.+328    	; 0xc36 <__stack+0x137>
     aee:	80 3a       	cpi	r24, 0xA0	; 160
     af0:	f1 f4       	brne	.+60     	; 0xb2e <__stack+0x2f>
				
				s_nextwrite_mightbeparameterset = true;
				break;

			case Req_RenControl:
				if ((USB_ControlRequest.wValue & 0xff) == 1)
     af2:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
     af6:	81 30       	cpi	r24, 0x01	; 1
     af8:	09 f0       	breq	.+2      	; 0xafc <EVENT_USB_Device_ControlRequest+0x46>
				{
					gpib_ren(1);
				}
				else
				{
					gpib_ren(0);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 bd 11 	call	0x237a	; 0x237a <gpib_ren>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b04:	87 7f       	andi	r24, 0xF7	; 247
     b06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b0a:	8a c0       	rjmp	.+276    	; 0xc20 <__stack+0x121>
     b0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b10:	87 7f       	andi	r24, 0xF7	; 247
     b12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
		{
			case Req_ReadStatusByte:
				Endpoint_ClearSETUP();
				handleReadStatusByte_btagvalue = USB_ControlRequest.wValue;
     b16:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
     b1a:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <handleReadStatusByte_btagvalue>
				if ( !gpib_write_is_busy )
     b1e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <gpib_write_is_busy>
     b22:	88 23       	and	r24, r24
     b24:	09 f4       	brne	.+2      	; 0xb28 <__stack+0x29>
     b26:	0b c1       	rjmp	.+534    	; 0xd3e <__stack+0x23f>
				{ /* no write transfer active, thus handle the request immediately */
					handle_control_Req_ReadStatusByte();
				}
				else
				{ /* a USB triggered GPIB write transfer is active. Mark the handling of this request for later */
					handleReadStatusByte = true;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <handleReadStatusByte>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
		}
	}
}
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;	
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
     b32:	82 38       	cpi	r24, 0x82	; 130
     b34:	91 05       	cpc	r25, r1
     b36:	11 f0       	breq	.+4      	; 0xb3c <__stack+0x3d>
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
     b38:	03 97       	sbiw	r24, 0x03	; 3
     b3a:	c9 f7       	brne	.-14     	; 0xb2e <__stack+0x2f>
     b3c:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <USB_ControlRequest>
     b40:	91 ff       	sbrs	r25, 1
     b42:	f5 cf       	rjmp	.-22     	; 0xb2e <__stack+0x2f>
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     b44:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <USB_ControlRequest+0x1>
     b48:	86 30       	cpi	r24, 0x06	; 6
     b4a:	29 f6       	brne	.-118    	; 0xad6 <EVENT_USB_Device_ControlRequest+0x20>
     b4c:	7f c0       	rjmp	.+254    	; 0xc4c <__stack+0x14d>
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	09 f4       	brne	.+2      	; 0xb54 <__stack+0x55>
     b52:	8f c0       	rjmp	.+286    	; 0xc72 <__stack+0x173>
     b54:	08 f0       	brcs	.+2      	; 0xb58 <__stack+0x59>
     b56:	4e c0       	rjmp	.+156    	; 0xbf4 <__stack+0xf5>
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	09 f4       	brne	.+2      	; 0xb5e <__stack+0x5f>
     b5c:	ce c0       	rjmp	.+412    	; 0xcfa <__stack+0x1fb>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	31 f7       	brne	.-52     	; 0xb2e <__stack+0x2f>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckAbortBulkOutStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     b62:	92 3a       	cpi	r25, 0xA2	; 162
     b64:	21 f7       	brne	.-56     	; 0xb2e <__stack+0x2f>
				{
					/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkOut)
     b66:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <RequestInProgress>
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__stack+0x71>
     b6e:	db c0       	rjmp	.+438    	; 0xd26 <__stack+0x227>
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     b70:	92 e8       	ldi	r25, 0x82	; 130
     b72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b76:	87 7f       	andi	r24, 0xF7	; 247
     b78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b7c:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b80:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     b84:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_16_LE(0);
					Endpoint_Write_32_LE(LastTransferLength);
     b88:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <LastTransferLength>
     b8c:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <LastTransferLength+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     b90:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	89 2f       	mov	r24, r25
     b9a:	9a 2f       	mov	r25, r26
     b9c:	ab 2f       	mov	r26, r27
     b9e:	bb 27       	eor	r27, r27
     ba0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     ba4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     ba8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     bac:	3c c0       	rjmp	.+120    	; 0xc26 <__stack+0x127>
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     bae:	87 30       	cpi	r24, 0x07	; 7
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <__stack+0xb5>
     bb2:	8f c0       	rjmp	.+286    	; 0xcd2 <__stack+0x1d3>
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	09 f0       	breq	.+2      	; 0xbba <__stack+0xbb>
     bb8:	ba cf       	rjmp	.-140    	; 0xb2e <__stack+0x2f>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bbe:	87 7f       	andi	r24, 0xF7	; 247
     bc0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bc4:	c1 e0       	ldi	r28, 0x01	; 1
     bc6:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bce:	8e 77       	andi	r24, 0x7E	; 126
     bd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearSETUP();

				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     bd4:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <Endpoint_ClearStatusStage>
				
				LED(0);
     bd8:	8d 98       	cbi	0x11, 5	; 17
     bda:	2f ef       	ldi	r18, 0xFF	; 255
     bdc:	84 e3       	ldi	r24, 0x34	; 52
     bde:	9c e0       	ldi	r25, 0x0C	; 12
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	80 40       	sbci	r24, 0x00	; 0
     be4:	90 40       	sbci	r25, 0x00	; 0
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <__stack+0xe1>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <__stack+0xeb>
     bea:	00 00       	nop
				_delay_ms(250);
				LED(1);
     bec:	8d 9a       	sbi	0x11, 5	; 17
				
				s_nextwrite_mightbeparameterset = true;
     bee:	c0 93 47 05 	sts	0x0547, r28	; 0x800547 <s_nextwrite_mightbeparameterset>
				break;
     bf2:	9d cf       	rjmp	.-198    	; 0xb2e <__stack+0x2f>
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	09 f4       	brne	.+2      	; 0xbfa <__stack+0xfb>
     bf8:	5e c0       	rjmp	.+188    	; 0xcb6 <__stack+0x1b7>
     bfa:	85 30       	cpi	r24, 0x05	; 5
     bfc:	09 f0       	breq	.+2      	; 0xc00 <__stack+0x101>
     bfe:	97 cf       	rjmp	.-210    	; 0xb2e <__stack+0x2f>
				}

				break;
			case Req_InitiateClear:
			
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     c00:	91 3a       	cpi	r25, 0xA1	; 161
     c02:	09 f0       	breq	.+2      	; 0xc06 <__stack+0x107>
     c04:	94 cf       	rjmp	.-216    	; 0xb2e <__stack+0x2f>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c06:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c0a:	97 7f       	andi	r25, 0xF7	; 247
     c0c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					Endpoint_ClearSETUP();
					/* Check that no split transaction is already in progress */
					if (RequestInProgress != 0)
     c10:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <RequestInProgress>
     c14:	99 23       	and	r25, r25
     c16:	09 f4       	brne	.+2      	; 0xc1a <__stack+0x11b>
     c18:	94 c0       	rjmp	.+296    	; 0xd42 <__stack+0x243>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c1a:	83 e8       	ldi	r24, 0x83	; 131
     c1c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c2a:	8e 77       	andi	r24, 0x7E	; 126
     c2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
		}
	}
}
     c30:	cf 91       	pop	r28

				Endpoint_ClearSETUP();
				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     c32:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <Endpoint_ClearStatusStage>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
				
			case Req_LocalLockout:
				handleLocalLockout = true; // trigger handling of local lockout within TMC_TASK
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <handleLocalLockout>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c40:	87 7f       	andi	r24, 0xF7	; 247
     c42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c46:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c4a:	ed cf       	rjmp	.-38     	; 0xc26 <__stack+0x127>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     c4c:	91 3a       	cpi	r25, 0xA1	; 161
     c4e:	09 f0       	breq	.+2      	; 0xc52 <__stack+0x153>
     c50:	6e cf       	rjmp	.-292    	; 0xb2e <__stack+0x2f>
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
     c52:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <RequestInProgress>
     c56:	85 30       	cpi	r24, 0x05	; 5
     c58:	09 f4       	brne	.+2      	; 0xc5c <__stack+0x15d>
     c5a:	81 c0       	rjmp	.+258    	; 0xd5e <__stack+0x25f>
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     c5c:	92 e8       	ldi	r25, 0x82	; 130
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c68:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c6c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c70:	da cf       	rjmp	.-76     	; 0xc26 <__stack+0x127>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateAbortBulkIn:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     c72:	92 3a       	cpi	r25, 0xA2	; 162
     c74:	09 f0       	breq	.+2      	; 0xc78 <__stack+0x179>
     c76:	5b cf       	rjmp	.-330    	; 0xb2e <__stack+0x2f>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     c78:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <RequestInProgress>
     c7c:	91 11       	cpse	r25, r1
     c7e:	6b c0       	rjmp	.+214    	; 0xd56 <__stack+0x257>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     c80:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <CurrentTransferTag>
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 91 d8 05 	lds	r20, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
     c8a:	50 91 d9 05 	lds	r21, 0x05D9	; 0x8005d9 <USB_ControlRequest+0x3>
     c8e:	42 17       	cp	r20, r18
     c90:	53 07       	cpc	r21, r19
     c92:	09 f4       	brne	.+2      	; 0xc96 <__stack+0x197>
     c94:	7a c0       	rjmp	.+244    	; 0xd8a <__stack+0x28b>
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     c96:	91 e8       	ldi	r25, 0x81	; 129
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
					}
					IsTMCBulkINReset = true;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <IsTMCBulkINReset>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ca2:	87 7f       	andi	r24, 0xF7	; 247
     ca4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ca8:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_8(CurrentTransferTag);
     cac:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <CurrentTransferTag>
     cb0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     cb4:	b8 cf       	rjmp	.-144    	; 0xc26 <__stack+0x127>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     cb6:	92 3a       	cpi	r25, 0xA2	; 162
     cb8:	09 f0       	breq	.+2      	; 0xcbc <__stack+0x1bd>
     cba:	39 cf       	rjmp	.-398    	; 0xb2e <__stack+0x2f>
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
     cbc:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <RequestInProgress>
     cc0:	83 30       	cpi	r24, 0x03	; 3
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <__stack+0x1c7>
     cc4:	55 cf       	rjmp	.-342    	; 0xb70 <__stack+0x71>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset)
     cc6:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
     cca:	88 23       	and	r24, r24
     ccc:	81 f1       	breq	.+96     	; 0xd2e <__stack+0x22f>
					  TMCRequestStatus = TMC_STATUS_PENDING;
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	50 cf       	rjmp	.-352    	; 0xb72 <__stack+0x73>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_GetCapabilities:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     cd2:	91 3a       	cpi	r25, 0xA1	; 161
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <__stack+0x1d9>
     cd6:	2b cf       	rjmp	.-426    	; 0xb2e <__stack+0x2f>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					Endpoint_ClearSETUP();

					/* Write the device capabilities to the control endpoint */
					Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
     ce2:	68 e1       	ldi	r22, 0x18	; 24
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cf2:	8b 77       	andi	r24, 0x7B	; 123
     cf4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cf8:	1a cf       	rjmp	.-460    	; 0xb2e <__stack+0x2f>
					handleReadStatusByte = true;
				}
			
				break;
			case Req_InitiateAbortBulkOut:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     cfa:	92 3a       	cpi	r25, 0xA2	; 162
     cfc:	09 f0       	breq	.+2      	; 0xd00 <__stack+0x201>
     cfe:	17 cf       	rjmp	.-466    	; 0xb2e <__stack+0x2f>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     d00:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <RequestInProgress>
     d04:	91 11       	cpse	r25, r1
     d06:	29 c0       	rjmp	.+82     	; 0xd5a <__stack+0x25b>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     d08:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <CurrentTransferTag>
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 91 d8 05 	lds	r20, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
     d12:	50 91 d9 05 	lds	r21, 0x05D9	; 0x8005d9 <USB_ControlRequest+0x3>
     d16:	42 17       	cp	r20, r18
     d18:	53 07       	cpc	r21, r19
     d1a:	99 f1       	breq	.+102    	; 0xd82 <__stack+0x283>
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     d1c:	91 e8       	ldi	r25, 0x81	; 129
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
					}
					IsTMCBulkOUTReset = true;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <IsTMCBulkOUTReset>
     d24:	8b cf       	rjmp	.-234    	; 0xc3c <__stack+0x13d>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkOut)
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkOUTReset)
     d26:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <IsTMCBulkOUTReset>
     d2a:	81 11       	cpse	r24, r1
     d2c:	d0 cf       	rjmp	.-96     	; 0xcce <__stack+0x1cf>
					if (RequestInProgress != Req_InitiateAbortBulkIn)
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset)
					  TMCRequestStatus = TMC_STATUS_PENDING;
					else
					  RequestInProgress = 0;
     d2e:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <RequestInProgress>
	Endpoint_SelectEndpoint(PrevEndpoint);
}

void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;	
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	1e cf       	rjmp	.-452    	; 0xb72 <__stack+0x73>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
				
			case Req_GoToLocal:
				handleGoToLocal = true; // trigger handling of local lockout within TMC_TASK
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <handleGoToLocal>
     d3c:	7f cf       	rjmp	.-258    	; 0xc3c <__stack+0x13d>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
		}
	}
}
     d3e:	cf 91       	pop	r28
			case Req_ReadStatusByte:
				Endpoint_ClearSETUP();
				handleReadStatusByte_btagvalue = USB_ControlRequest.wValue;
				if ( !gpib_write_is_busy )
				{ /* no write transfer active, thus handle the request immediately */
					handle_control_Req_ReadStatusByte();
     d40:	7a ce       	rjmp	.-780    	; 0xa36 <handle_control_Req_ReadStatusByte>
						Endpoint_Write_8(TMC_STATUS_SPLIT_IN_PROGRESS);
					}
					else
					{
						/* Indicate that all in-progress/pending data IN and OUT requests should be aborted */
						IsTMCBulkINReset  = true;
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <IsTMCBulkINReset>
						IsTMCBulkOUTReset = true;
     d48:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <IsTMCBulkOUTReset>
						handleSDC = true; // trigger handling of SDC command to device
     d4c:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <handleSDC>
						
						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateClear;
     d50:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <RequestInProgress>
     d54:	65 cf       	rjmp	.-310    	; 0xc20 <__stack+0x121>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     d56:	93 e8       	ldi	r25, 0x83	; 131
     d58:	9f cf       	rjmp	.-194    	; 0xc98 <__stack+0x199>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     d5a:	93 e8       	ldi	r25, 0x83	; 131
     d5c:	e0 cf       	rjmp	.-64     	; 0xd1e <__stack+0x21f>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset || handleSDC)
     d5e:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
     d62:	81 11       	cpse	r24, r1
     d64:	0c c0       	rjmp	.+24     	; 0xd7e <__stack+0x27f>
     d66:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <IsTMCBulkOUTReset>
     d6a:	81 11       	cpse	r24, r1
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <__stack+0x27f>
     d6e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <handleSDC>
     d72:	81 11       	cpse	r24, r1
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <__stack+0x27f>
						TMCRequestStatus = TMC_STATUS_PENDING;
					else 
					{
						TMCRequestStatus = TMC_STATUS_SUCCESS;
						RequestInProgress = 0;
     d76:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <RequestInProgress>
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset || handleSDC)
						TMCRequestStatus = TMC_STATUS_PENDING;
					else 
					{
						TMCRequestStatus = TMC_STATUS_SUCCESS;
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	70 cf       	rjmp	.-288    	; 0xc5e <__stack+0x15f>
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset || handleSDC)
						TMCRequestStatus = TMC_STATUS_PENDING;
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	6e cf       	rjmp	.-292    	; 0xc5e <__stack+0x15f>
					{
						/* Indicate that all in-progress/pending data OUT requests should be aborted */
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
     d82:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <RequestInProgress>
	Endpoint_SelectEndpoint(PrevEndpoint);
}

void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;	
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	ca cf       	rjmp	.-108    	; 0xd1e <__stack+0x21f>
					{
						/* Indicate that all in-progress/pending data IN requests should be aborted */
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
     d8a:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <RequestInProgress>
	Endpoint_SelectEndpoint(PrevEndpoint);
}

void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;	
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	83 cf       	rjmp	.-250    	; 0xc98 <__stack+0x199>

00000d92 <set_internal_response>:
		val = c-'A'+10;
	return val;
}

void set_internal_response(uint8_t *pdat, uint8_t len)
{
     d92:	cf 93       	push	r28
	if (len < sizeof(internal_response_buffer))
     d94:	68 30       	cpi	r22, 0x08	; 8
     d96:	60 f4       	brcc	.+24     	; 0xdb0 <set_internal_response+0x1e>
     d98:	c6 2f       	mov	r28, r22
     d9a:	bc 01       	movw	r22, r24
	{
		memcpy(internal_response_buffer, pdat, len);
     d9c:	4c 2f       	mov	r20, r28
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	8e e5       	ldi	r24, 0x5E	; 94
     da2:	95 e0       	ldi	r25, 0x05	; 5
     da4:	0e 94 87 1a 	call	0x350e	; 0x350e <memcpy>
		internal_response_buffer_len = len;
     da8:	c0 93 4a 01 	sts	0x014A, r28	; 0x80014a <internal_response_buffer_len>
		internal_response_buffer_rpos = 0;
     dac:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <internal_response_buffer_rpos>
	}
}
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <ProcessInternalCommand>:
					0x00 or 0xff => EOI termination
					0x01         => EOI or '\n' (LF = linefeed)
					0x02         => EOI or '\r' (CR = carriage return)
*/
void ProcessInternalCommand(uint8_t Length)
{
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	d8 2f       	mov	r29, r24
	bool cmd_executed;

	// clear any old response
	internal_response_buffer_len = 0;
     dba:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <internal_response_buffer_len>
	internal_response_buffer_rpos = 0; 
     dbe:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <internal_response_buffer_rpos>
	
	parser_reset();
     dc2:	0e 94 7d 15 	call	0x2afa	; 0x2afa <parser_reset>
	cmd_executed = false;
	while ( (Length--) && (!cmd_executed) )
     dc6:	cf ef       	ldi	r28, 0xFF	; 255
     dc8:	cd 0f       	add	r28, r29
     dca:	d1 11       	cpse	r29, r1
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <ProcessInternalCommand+0x22>
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <ProcessInternalCommand+0x32>
     dd0:	81 11       	cpse	r24, r1
     dd2:	11 c0       	rjmp	.+34     	; 0xdf6 <ProcessInternalCommand+0x42>
     dd4:	c9 2f       	mov	r28, r25
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     dd6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	{
		uint8_t dat = Endpoint_Read_8();
		cmd_executed = parser_add( dat );
     dda:	0e 94 84 15 	call	0x2b08	; 0x2b08 <parser_add>
	internal_response_buffer_len = 0;
	internal_response_buffer_rpos = 0; 
	
	parser_reset();
	cmd_executed = false;
	while ( (Length--) && (!cmd_executed) )
     dde:	9f ef       	ldi	r25, 0xFF	; 255
     de0:	9c 0f       	add	r25, r28
     de2:	c1 11       	cpse	r28, r1
     de4:	f5 cf       	rjmp	.-22     	; 0xdd0 <ProcessInternalCommand+0x1c>
		uint8_t dat = Endpoint_Read_8();
		cmd_executed = parser_add( dat );
	}
	
	// remove residual characters from the endpoint buffer
	while ( (Length--) )
     de6:	ce ef       	ldi	r28, 0xFE	; 254
     de8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     dec:	c1 50       	subi	r28, 0x01	; 1
     dee:	e0 f7       	brcc	.-8      	; 0xde8 <ProcessInternalCommand+0x34>
	{
		uint8_t dat = Endpoint_Read_8();
	}
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret
		uint8_t dat = Endpoint_Read_8();
		cmd_executed = parser_add( dat );
	}
	
	// remove residual characters from the endpoint buffer
	while ( (Length--) )
     df6:	c2 50       	subi	r28, 0x02	; 2
     df8:	91 11       	cpse	r25, r1
     dfa:	f6 cf       	rjmp	.-20     	; 0xde8 <ProcessInternalCommand+0x34>
     dfc:	f9 cf       	rjmp	.-14     	; 0xdf0 <ProcessInternalCommand+0x3c>

00000dfe <ProcessSentMessage>:
		uint8_t dat = Endpoint_Read_8();
	}
}

void ProcessSentMessage(uint8_t* const Data, uint8_t Length, bool isFirstTransfer, bool isLastTransfer, bool sendEom, gpibtimeout_t ptimeoutfunc)
{
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	c6 2f       	mov	r28, r22
     e0e:	d2 2e       	mov	r13, r18
	uint8_t dat;
	bool timedout, isinternalcommand;
	
	gpib_write_is_busy = true; /* required to handle read status byte synchronization issue */
     e10:	11 e0       	ldi	r17, 0x01	; 1
     e12:	10 93 4c 01 	sts	0x014C, r17	; 0x80014c <gpib_write_is_busy>
     e16:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	timedout = false;
	
	dat = Endpoint_Read_8();
	/* check, if this is an internal command (=sidechannel for configuration settings )*/ 
	isinternalcommand = isFirstTransfer && s_nextwrite_mightbeparameterset && (dat == '!');
     e1a:	44 23       	and	r20, r20
     e1c:	71 f1       	breq	.+92     	; 0xe7a <ProcessSentMessage+0x7c>
     e1e:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <s_nextwrite_mightbeparameterset>
     e22:	81 11       	cpse	r24, r1
     e24:	69 c0       	rjmp	.+210    	; 0xef8 <ProcessSentMessage+0xfa>
		ProcessInternalCommand(Length);
	}
	else
	{
		
		gpib_ren(1); /* ensure that remote control is enabled */
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0e 94 bd 11 	call	0x237a	; 0x237a <gpib_ren>
		
		LED(0);
     e2c:	8d 98       	cbi	0x11, 5	; 17
		if (isFirstTransfer)
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     e2e:	b7 01       	movw	r22, r14
     e30:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     e34:	0e 94 0d 13 	call	0x261a	; 0x261a <gpib_make_listener>
			
		if (handleReadStatusByte && !timedout)
     e38:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <handleReadStatusByte>
     e3c:	99 23       	and	r25, r25
     e3e:	09 f4       	brne	.+2      	; 0xe42 <ProcessSentMessage+0x44>
     e40:	eb c0       	rjmp	.+470    	; 0x1018 <ProcessSentMessage+0x21a>
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <ProcessSentMessage+0x4a>
     e46:	df c0       	rjmp	.+446    	; 0x1006 <ProcessSentMessage+0x208>
			gpib_untalk_unlisten(ptimeoutfunc);
			handle_control_Req_ReadStatusByte();
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
		}

		while ( (Length > 0) && !timedout)
     e48:	c1 11       	cpse	r28, r1
     e4a:	ce c0       	rjmp	.+412    	; 0xfe8 <ProcessSentMessage+0x1ea>
				dat = Endpoint_Read_8();
			}
			
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     e4c:	d1 10       	cpse	r13, r1
     e4e:	cc c0       	rjmp	.+408    	; 0xfe8 <ProcessSentMessage+0x1ea>
			gpib_untalk_unlisten(ptimeoutfunc);
		LED(1);
     e50:	8d 9a       	sbi	0x11, 5	; 17
	}
	s_nextwrite_mightbeparameterset = false;
     e52:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <s_nextwrite_mightbeparameterset>
	gpib_write_is_busy = !isLastTransfer; /* required to handle read status byte synchronization issue */
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <gpib_write_is_busy>
	
	if (handleReadStatusByte && !timedout)
     e5c:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <handleReadStatusByte>
     e60:	99 23       	and	r25, r25
     e62:	19 f0       	breq	.+6      	; 0xe6a <ProcessSentMessage+0x6c>
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <ProcessSentMessage+0x6c>
     e68:	ad c0       	rjmp	.+346    	; 0xfc4 <ProcessSentMessage+0x1c6>
			gpib_untalk_unlisten(ptimeoutfunc);
		handle_control_Req_ReadStatusByte();
		if (!(isLastTransfer && !timedout))
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
	}	
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	08 95       	ret
		ProcessInternalCommand(Length);
	}
	else
	{
		
		gpib_ren(1); /* ensure that remote control is enabled */
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 bd 11 	call	0x237a	; 0x237a <gpib_ren>
		
		LED(0);
     e80:	8d 98       	cbi	0x11, 5	; 17
		if (isFirstTransfer)
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			
		if (handleReadStatusByte && !timedout)
     e82:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <handleReadStatusByte>
     e86:	81 11       	cpse	r24, r1
     e88:	be c0       	rjmp	.+380    	; 0x1006 <ProcessSentMessage+0x208>
			gpib_untalk_unlisten(ptimeoutfunc);
			handle_control_Req_ReadStatusByte();
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
		}

		while ( (Length > 0) && !timedout)
     e8a:	cc 23       	and	r28, r28
     e8c:	09 f4       	brne	.+2      	; 0xe90 <ProcessSentMessage+0x92>
     e8e:	8e c0       	rjmp	.+284    	; 0xfac <ProcessSentMessage+0x1ae>
		{
			if (handleReadStatusByte)
     e90:	81 11       	cpse	r24, r1
     e92:	28 c0       	rjmp	.+80     	; 0xee4 <ProcessSentMessage+0xe6>
			{
				gpib_untalk_unlisten(ptimeoutfunc);
				handle_control_Req_ReadStatusByte();
				timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			}
			Length--;
     e94:	c1 50       	subi	r28, 0x01	; 1
			timedout = gpib_writedat_quick(dat, (Length == 0)  && sendEom, ptimeoutfunc, false);
     e96:	11 f4       	brne	.+4      	; 0xe9c <ProcessSentMessage+0x9e>
     e98:	01 11       	cpse	r16, r1
static inline bool gpib_writedat_quick(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc, bool quickTimeoutPoll)
{
	bool timedout;
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
     e9a:	24 9a       	sbi	0x04, 4	; 4
			_delay_us(70);
	}
	else
	{
		bool atn_was_low = !ATN_OUT_STATE;
		if (atn_was_low)
     e9c:	86 99       	sbic	0x10, 6	; 16
     e9e:	6e c0       	rjmp	.+220    	; 0xf7c <ProcessSentMessage+0x17e>
			_delay_us(220);
		ATN_HIGH;
     ea0:	86 98       	cbi	0x10, 6	; 16
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
     ea2:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
     ea4:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
     ea6:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
     ea8:	da b9       	out	0x0a, r29	; 10
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
     eaa:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
     eae:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	//_delay_us(10);
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
     eb2:	81 11       	cpse	r24, r1
     eb4:	3b c0       	rjmp	.+118    	; 0xf2c <ProcessSentMessage+0x12e>
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
     eb6:	36 9b       	sbis	0x06, 6	; 6
     eb8:	f8 cf       	rjmp	.-16     	; 0xeaa <ProcessSentMessage+0xac>

	if (!timedout)
	{
		DAV_LOW;
     eba:	26 9a       	sbi	0x04, 6	; 4
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
     ebc:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
     ec0:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	if (!timedout)
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
     ec4:	81 11       	cpse	r24, r1
     ec6:	51 c0       	rjmp	.+162    	; 0xf6a <ProcessSentMessage+0x16c>
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
     ec8:	37 9b       	sbis	0x06, 7	; 6
     eca:	f8 cf       	rjmp	.-16     	; 0xebc <ProcessSentMessage+0xbe>
		DAV_HIGH;
     ecc:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
     ece:	1a b8       	out	0x0a, r1	; 10
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_tx_quick(dat, false, ptimeoutfunc, quickTimeoutPoll);
	EOI_HIGH;    /* make EOI H */
     ed0:	24 98       	cbi	0x04, 4	; 4
			if (Length > 0)
     ed2:	cc 23       	and	r28, r28
     ed4:	09 f4       	brne	.+2      	; 0xed8 <ProcessSentMessage+0xda>
     ed6:	a8 c0       	rjmp	.+336    	; 0x1028 <ProcessSentMessage+0x22a>
     ed8:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     edc:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <handleReadStatusByte>
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
		}

		while ( (Length > 0) && !timedout)
		{
			if (handleReadStatusByte)
     ee0:	88 23       	and	r24, r24
     ee2:	c1 f2       	breq	.-80     	; 0xe94 <ProcessSentMessage+0x96>
			{
				gpib_untalk_unlisten(ptimeoutfunc);
     ee4:	c7 01       	movw	r24, r14
     ee6:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
				handle_control_Req_ReadStatusByte();
     eea:	a5 dd       	rcall	.-1206   	; 0xa36 <handle_control_Req_ReadStatusByte>
				timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     eec:	b7 01       	movw	r22, r14
     eee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     ef2:	0e 94 0d 13 	call	0x261a	; 0x261a <gpib_make_listener>
     ef6:	ce cf       	rjmp	.-100    	; 0xe94 <ProcessSentMessage+0x96>
	gpib_write_is_busy = true; /* required to handle read status byte synchronization issue */
	timedout = false;
	
	dat = Endpoint_Read_8();
	/* check, if this is an internal command (=sidechannel for configuration settings )*/ 
	isinternalcommand = isFirstTransfer && s_nextwrite_mightbeparameterset && (dat == '!');
     ef8:	d1 32       	cpi	r29, 0x21	; 33
     efa:	09 f0       	breq	.+2      	; 0xefe <ProcessSentMessage+0x100>
     efc:	94 cf       	rjmp	.-216    	; 0xe26 <ProcessSentMessage+0x28>
	if (isinternalcommand)
	{
		ProcessInternalCommand(Length);
     efe:	86 2f       	mov	r24, r22
     f00:	59 df       	rcall	.-334    	; 0xdb4 <ProcessInternalCommand>
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
			gpib_untalk_unlisten(ptimeoutfunc);
		LED(1);
	}
	s_nextwrite_mightbeparameterset = false;
     f02:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <s_nextwrite_mightbeparameterset>
	gpib_write_is_busy = !isLastTransfer; /* required to handle read status byte synchronization issue */
     f06:	1d 25       	eor	r17, r13
     f08:	10 93 4c 01 	sts	0x014C, r17	; 0x80014c <gpib_write_is_busy>
	
	if (handleReadStatusByte && !timedout)
     f0c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <handleReadStatusByte>
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <ProcessSentMessage+0x118>
     f14:	aa cf       	rjmp	.-172    	; 0xe6a <ProcessSentMessage+0x6c>
	{
		if (!(isLastTransfer && !timedout))
     f16:	dd 20       	and	r13, r13
     f18:	09 f4       	brne	.+2      	; 0xf1c <ProcessSentMessage+0x11e>
     f1a:	54 c0       	rjmp	.+168    	; 0xfc4 <ProcessSentMessage+0x1c6>
			gpib_untalk_unlisten(ptimeoutfunc);
		handle_control_Req_ReadStatusByte();
		if (!(isLastTransfer && !timedout))
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
	}	
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
	
	if (handleReadStatusByte && !timedout)
	{
		if (!(isLastTransfer && !timedout))
			gpib_untalk_unlisten(ptimeoutfunc);
		handle_control_Req_ReadStatusByte();
     f28:	df 90       	pop	r13
     f2a:	85 cd       	rjmp	.-1270   	; 0xa36 <handle_control_Req_ReadStatusByte>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
     f2c:	f7 01       	movw	r30, r14
     f2e:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
     f30:	36 99       	sbic	0x06, 6	; 6
     f32:	32 c0       	rjmp	.+100    	; 0xf98 <ProcessSentMessage+0x19a>
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <ProcessSentMessage+0x13c>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
	}
	
	DDRD = 0x00; /* release data bus */
     f38:	b8 cf       	rjmp	.-144    	; 0xeaa <ProcessSentMessage+0xac>
	
	if (timedout)
	{
		gpib_recover();
     f3a:	1a b8       	out	0x0a, r1	; 10
     f3c:	47 d6       	rcall	.+3214   	; 0x1bcc <gpib_recover>
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_tx_quick(dat, false, ptimeoutfunc, quickTimeoutPoll);
	EOI_HIGH;    /* make EOI H */
     f3e:	24 98       	cbi	0x04, 4	; 4
				handle_control_Req_ReadStatusByte();
				timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			}
			Length--;
			timedout = gpib_writedat_quick(dat, (Length == 0)  && sendEom, ptimeoutfunc, false);
			if (Length > 0)
     f40:	c1 11       	cpse	r28, r1
     f42:	50 c0       	rjmp	.+160    	; 0xfe4 <ProcessSentMessage+0x1e6>
     f44:	81 e0       	ldi	r24, 0x01	; 1
				dat = Endpoint_Read_8();
			}
			
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     f46:	dd 20       	and	r13, r13
     f48:	09 f4       	brne	.+2      	; 0xf4c <ProcessSentMessage+0x14e>
     f4a:	82 cf       	rjmp	.-252    	; 0xe50 <ProcessSentMessage+0x52>
     f4c:	81 11       	cpse	r24, r1
     f4e:	4c c0       	rjmp	.+152    	; 0xfe8 <ProcessSentMessage+0x1ea>
			gpib_untalk_unlisten(ptimeoutfunc);
     f50:	c7 01       	movw	r24, r14
     f52:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
		LED(1);
     f56:	8d 9a       	sbi	0x11, 5	; 17
	}
	s_nextwrite_mightbeparameterset = false;
     f58:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <s_nextwrite_mightbeparameterset>
	gpib_write_is_busy = !isLastTransfer; /* required to handle read status byte synchronization issue */
     f5c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <gpib_write_is_busy>
	
	if (handleReadStatusByte && !timedout)
     f60:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <handleReadStatusByte>
     f64:	81 11       	cpse	r24, r1
     f66:	da cf       	rjmp	.-76     	; 0xf1c <ProcessSentMessage+0x11e>
     f68:	80 cf       	rjmp	.-256    	; 0xe6a <ProcessSentMessage+0x6c>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
     f6a:	f7 01       	movw	r30, r14
     f6c:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
     f6e:	37 99       	sbic	0x06, 7	; 6
     f70:	17 c0       	rjmp	.+46     	; 0xfa0 <ProcessSentMessage+0x1a2>
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <ProcessSentMessage+0x17a>
     f76:	a2 cf       	rjmp	.-188    	; 0xebc <ProcessSentMessage+0xbe>
		DAV_HIGH;
     f78:	26 98       	cbi	0x04, 6	; 4
     f7a:	df cf       	rjmp	.-66     	; 0xf3a <ProcessSentMessage+0x13c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f7c:	8f e6       	ldi	r24, 0x6F	; 111
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <ProcessSentMessage+0x182>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <ProcessSentMessage+0x188>
     f86:	00 00       	nop
	else
	{
		bool atn_was_low = !ATN_OUT_STATE;
		if (atn_was_low)
			_delay_us(220);
		ATN_HIGH;
     f88:	86 98       	cbi	0x10, 6	; 16
     f8a:	e7 e1       	ldi	r30, 0x17	; 23
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	31 97       	sbiw	r30, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <ProcessSentMessage+0x190>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <ProcessSentMessage+0x196>
     f94:	00 00       	nop
     f96:	85 cf       	rjmp	.-246    	; 0xea2 <ProcessSentMessage+0xa4>
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */

	if (!timedout)
     f98:	88 23       	and	r24, r24
     f9a:	09 f4       	brne	.+2      	; 0xf9e <ProcessSentMessage+0x1a0>
     f9c:	8e cf       	rjmp	.-228    	; 0xeba <ProcessSentMessage+0xbc>
     f9e:	cd cf       	rjmp	.-102    	; 0xf3a <ProcessSentMessage+0x13c>
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
     fa0:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
     fa2:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <ProcessSentMessage+0x1ac>
     fa8:	93 cf       	rjmp	.-218    	; 0xed0 <ProcessSentMessage+0xd2>
     faa:	c8 cf       	rjmp	.-112    	; 0xf3c <ProcessSentMessage+0x13e>
				dat = Endpoint_Read_8();
			}
			
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     fac:	d1 10       	cpse	r13, r1
     fae:	d0 cf       	rjmp	.-96     	; 0xf50 <ProcessSentMessage+0x152>
			gpib_untalk_unlisten(ptimeoutfunc);
		LED(1);
     fb0:	8d 9a       	sbi	0x11, 5	; 17
	}
	s_nextwrite_mightbeparameterset = false;
     fb2:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <s_nextwrite_mightbeparameterset>
	gpib_write_is_busy = !isLastTransfer; /* required to handle read status byte synchronization issue */
     fb6:	10 93 4c 01 	sts	0x014C, r17	; 0x80014c <gpib_write_is_busy>
	
	if (handleReadStatusByte && !timedout)
     fba:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <handleReadStatusByte>
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <ProcessSentMessage+0x1c6>
	{
		if (!(isLastTransfer && !timedout))
			gpib_untalk_unlisten(ptimeoutfunc);
     fc2:	53 cf       	rjmp	.-346    	; 0xe6a <ProcessSentMessage+0x6c>
     fc4:	c7 01       	movw	r24, r14
     fc6:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
		handle_control_Req_ReadStatusByte();
     fca:	35 dd       	rcall	.-1430   	; 0xa36 <handle_control_Req_ReadStatusByte>
		if (!(isLastTransfer && !timedout))
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     fcc:	b7 01       	movw	r22, r14
     fce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
	}	
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
	{
		if (!(isLastTransfer && !timedout))
			gpib_untalk_unlisten(ptimeoutfunc);
		handle_control_Req_ReadStatusByte();
		if (!(isLastTransfer && !timedout))
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     fe0:	0c 94 0d 13 	jmp	0x261a	; 0x261a <gpib_make_listener>
     fe4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
			gpib_untalk_unlisten(ptimeoutfunc);
		LED(1);
     fe8:	8d 9a       	sbi	0x11, 5	; 17
	}
	s_nextwrite_mightbeparameterset = false;
     fea:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <s_nextwrite_mightbeparameterset>
	gpib_write_is_busy = !isLastTransfer; /* required to handle read status byte synchronization issue */
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	d8 26       	eor	r13, r24
     ff2:	d0 92 4c 01 	sts	0x014C, r13	; 0x80014c <gpib_write_is_busy>
			gpib_untalk_unlisten(ptimeoutfunc);
		handle_control_Req_ReadStatusByte();
		if (!(isLastTransfer && !timedout))
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
	}	
}
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
		if (isFirstTransfer)
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			
		if (handleReadStatusByte && !timedout)
		{
			gpib_untalk_unlisten(ptimeoutfunc);
    1004:	08 95       	ret
    1006:	c7 01       	movw	r24, r14
    1008:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
			handle_control_Req_ReadStatusByte();
    100c:	14 dd       	rcall	.-1496   	; 0xa36 <handle_control_Req_ReadStatusByte>
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
    100e:	b7 01       	movw	r22, r14
    1010:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    1014:	0e 94 0d 13 	call	0x261a	; 0x261a <gpib_make_listener>
		}

		while ( (Length > 0) && !timedout)
    1018:	cc 23       	and	r28, r28
    101a:	09 f4       	brne	.+2      	; 0x101e <ProcessSentMessage+0x220>
    101c:	94 cf       	rjmp	.-216    	; 0xf46 <ProcessSentMessage+0x148>
    101e:	81 11       	cpse	r24, r1
    1020:	e3 cf       	rjmp	.-58     	; 0xfe8 <ProcessSentMessage+0x1ea>
    1022:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <handleReadStatusByte>
    1026:	34 cf       	rjmp	.-408    	; 0xe90 <ProcessSentMessage+0x92>
				handle_control_Req_ReadStatusByte();
				timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			}
			Length--;
			timedout = gpib_writedat_quick(dat, (Length == 0)  && sendEom, ptimeoutfunc, false);
			if (Length > 0)
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	8d cf       	rjmp	.-230    	; 0xf46 <ProcessSentMessage+0x148>

0000102c <GetNextMessage>:
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
	}	
}

uint16_t GetNextMessage(uint8_t* const Data, uint16_t maxlen, bool isFirstMessage, bool *pisLastMessage, gpibtimeout_t ptimeoutfunc)
{
    102c:	7f 92       	push	r7
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	d8 2f       	mov	r29, r24
    1048:	99 2e       	mov	r9, r25
    104a:	6b 01       	movw	r12, r22
    104c:	c4 2f       	mov	r28, r20
    104e:	59 01       	movw	r10, r18
	uint8_t c;
	uint16_t i;
	bool    Eoi, timedout;
	
	gpib_ren(1); /* ensure that remote control is enabled */
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	0e 94 bd 11 	call	0x237a	; 0x237a <gpib_ren>
	
	LED(0);	
    1056:	8d 98       	cbi	0x11, 5	; 17
	
	timedout = false;
#ifndef SPEEDTEST_DUMMY_DEVICE
	if (isFirstMessage)
    1058:	c1 11       	cpse	r28, r1
    105a:	9d c0       	rjmp	.+314    	; 0x1196 <GetNextMessage+0x16a>
#endif

	i = 0;
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
    105c:	c1 14       	cp	r12, r1
    105e:	d1 04       	cpc	r13, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <GetNextMessage+0x38>
    1062:	a7 c0       	rjmp	.+334    	; 0x11b2 <GetNextMessage+0x186>
    1064:	ed 2e       	mov	r14, r29
    1066:	f9 2c       	mov	r15, r9
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
	}	
}

uint16_t GetNextMessage(uint8_t* const Data, uint16_t maxlen, bool isFirstMessage, bool *pisLastMessage, gpibtimeout_t ptimeoutfunc)
{
    1068:	c0 e0       	ldi	r28, 0x00	; 0
    106a:	d0 e0       	ldi	r29, 0x00	; 0

	timedout = false;
	
	// ensure that ATN is high
	bool atn_was_low = !ATN_OUT_STATE;
	if (atn_was_low)
    106c:	86 99       	sbic	0x10, 6	; 16
    106e:	76 c0       	rjmp	.+236    	; 0x115c <GetNextMessage+0x130>
		_delay_us(220);
	ATN_HIGH;
    1070:	86 98       	cbi	0x10, 6	; 16
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    1072:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    1074:	3e 98       	cbi	0x07, 6	; 7
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1076:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    107a:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		_delay_us(70);
	
	
	do
	{
		if (timer_ticked() || quickTimeoutPoll)
    107e:	81 11       	cpse	r24, r1
    1080:	40 c0       	rjmp	.+128    	; 0x1102 <GetNextMessage+0xd6>
			timedout = ptimeoutfunc();
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    1082:	1e 99       	sbic	0x03, 6	; 3
    1084:	f8 cf       	rjmp	.-16     	; 0x1076 <GetNextMessage+0x4a>
	
	if (!timedout)
	{
		NRFD_LOW;
    1086:	3e 9a       	sbi	0x07, 6	; 7
		c = ~PIND;
    1088:	89 b0       	in	r8, 0x09	; 9
    108a:	80 94       	com	r8
		eoi = (EOI_STATE == 0) ;
    108c:	83 b1       	in	r24, 0x03	; 3
    108e:	99 24       	eor	r9, r9
    1090:	93 94       	inc	r9
    1092:	f8 2f       	mov	r31, r24
    1094:	f0 71       	andi	r31, 0x10	; 16
    1096:	7f 2e       	mov	r7, r31
    1098:	84 fd       	sbrc	r24, 4
    109a:	91 2c       	mov	r9, r1
		NDAC_HIGH;
    109c:	3f 98       	cbi	0x07, 7	; 7
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    109e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    10a2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		eoi = (EOI_STATE == 0) ;
		NDAC_HIGH;
		
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
    10a6:	81 11       	cpse	r24, r1
    10a8:	3e c0       	rjmp	.+124    	; 0x1126 <GetNextMessage+0xfa>
				timedout = ptimeoutfunc();
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    10aa:	1e 9b       	sbis	0x03, 6	; 3
    10ac:	f8 cf       	rjmp	.-16     	; 0x109e <GetNextMessage+0x72>
	}

	
	if (s_terminator == '\0')
    10ae:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <s_terminator>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	22 23       	and	r18, r18
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <GetNextMessage+0x98>
		*pEoi = eoi;
	else
		*pEoi = eoi || (c == s_terminator);
    10b8:	71 10       	cpse	r7, r1
    10ba:	30 c0       	rjmp	.+96     	; 0x111c <GetNextMessage+0xf0>
    10bc:	99 24       	eor	r9, r9
    10be:	93 94       	inc	r9

	if (timedout)
    10c0:	81 11       	cpse	r24, r1
    10c2:	3c c0       	rjmp	.+120    	; 0x113c <GetNextMessage+0x110>
	{
		gpib_recover();
	}
	*ptimedout = timedout;
	
	NRFD_LOW;
    10c4:	3e 9a       	sbi	0x07, 6	; 7

	while (!Eoi && (i < maxlen) && !timedout)
	{
	
		c = gpib_readdat_quick(&Eoi, &timedout, ptimeoutfunc, false); 
		Data[i++] = c;
    10c6:	21 96       	adiw	r28, 0x01	; 1
    10c8:	f7 01       	movw	r30, r14
    10ca:	81 92       	st	Z+, r8
    10cc:	7f 01       	movw	r14, r30
#endif

	i = 0;
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
    10ce:	91 10       	cpse	r9, r1
    10d0:	3f c0       	rjmp	.+126    	; 0x1150 <GetNextMessage+0x124>
    10d2:	cc 15       	cp	r28, r12
    10d4:	dd 05       	cpc	r29, r13
    10d6:	10 f4       	brcc	.+4      	; 0x10dc <GetNextMessage+0xb0>
    10d8:	88 23       	and	r24, r24
    10da:	41 f2       	breq	.-112    	; 0x106c <GetNextMessage+0x40>
    10dc:	98 2e       	mov	r9, r24
		gpib_untalk_unlisten(ptimeoutfunc);
#endif

	if (timedout) /* in case of timedout, simulate an end of message */
		Eoi = true;
	*pisLastMessage = Eoi;
    10de:	f5 01       	movw	r30, r10
    10e0:	90 82       	st	Z, r9
	
	LED(1);
    10e2:	8d 9a       	sbi	0x11, 5	; 17

	return i;
}
    10e4:	ce 01       	movw	r24, r28
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	af 90       	pop	r10
    10fa:	9f 90       	pop	r9
    10fc:	8f 90       	pop	r8
    10fe:	7f 90       	pop	r7
    1100:	08 95       	ret
	
	
	do
	{
		if (timer_ticked() || quickTimeoutPoll)
			timedout = ptimeoutfunc();
    1102:	f8 01       	movw	r30, r16
    1104:	09 95       	icall
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    1106:	1e 9b       	sbis	0x03, 6	; 3
    1108:	3c c0       	rjmp	.+120    	; 0x1182 <GetNextMessage+0x156>
    110a:	88 23       	and	r24, r24
    110c:	09 f4       	brne	.+2      	; 0x1110 <GetNextMessage+0xe4>
    110e:	b3 cf       	rjmp	.-154    	; 0x1076 <GetNextMessage+0x4a>
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    1110:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <s_terminator>
    1114:	22 23       	and	r18, r18
    1116:	91 f1       	breq	.+100    	; 0x117c <GetNextMessage+0x150>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	81 2c       	mov	r8, r1
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	82 12       	cpse	r8, r18
    1120:	90 e0       	ldi	r25, 0x00	; 0
		*pEoi = eoi;
	else
		*pEoi = eoi || (c == s_terminator);
    1122:	99 2e       	mov	r9, r25
    1124:	cd cf       	rjmp	.-102    	; 0x10c0 <GetNextMessage+0x94>
		NDAC_HIGH;
		
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1126:	f8 01       	movw	r30, r16
    1128:	09 95       	icall
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    112a:	1e 99       	sbic	0x03, 6	; 3
    112c:	2e c0       	rjmp	.+92     	; 0x118a <GetNextMessage+0x15e>
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <GetNextMessage+0x108>
    1132:	b5 cf       	rjmp	.-150    	; 0x109e <GetNextMessage+0x72>
	}

	
	if (s_terminator == '\0')
    1134:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <s_terminator>
    1138:	21 11       	cpse	r18, r1
    113a:	be cf       	rjmp	.-132    	; 0x10b8 <GetNextMessage+0x8c>
	else
		*pEoi = eoi || (c == s_terminator);

	if (timedout)
	{
		gpib_recover();
    113c:	47 d5       	rcall	.+2702   	; 0x1bcc <gpib_recover>
    113e:	81 e0       	ldi	r24, 0x01	; 1
	}
	*ptimedout = timedout;
	
	NRFD_LOW;
    1140:	3e 9a       	sbi	0x07, 6	; 7

	while (!Eoi && (i < maxlen) && !timedout)
	{
	
		c = gpib_readdat_quick(&Eoi, &timedout, ptimeoutfunc, false); 
		Data[i++] = c;
    1142:	21 96       	adiw	r28, 0x01	; 1
    1144:	f7 01       	movw	r30, r14
    1146:	81 92       	st	Z+, r8
    1148:	7f 01       	movw	r14, r30
#endif

	i = 0;
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
    114a:	99 20       	and	r9, r9
    114c:	09 f4       	brne	.+2      	; 0x1150 <GetNextMessage+0x124>
    114e:	c1 cf       	rjmp	.-126    	; 0x10d2 <GetNextMessage+0xa6>
		c = gpib_readdat_quick(&Eoi, &timedout, ptimeoutfunc, false); 
		Data[i++] = c;
	}
		
#ifndef SPEEDTEST_DUMMY_DEVICE
	if (Eoi && !timedout) /* in case of timeout, no need to unlisten => interface clear done in readdat function! */
    1150:	81 11       	cpse	r24, r1
    1152:	c5 cf       	rjmp	.-118    	; 0x10de <GetNextMessage+0xb2>
		gpib_untalk_unlisten(ptimeoutfunc);
    1154:	c8 01       	movw	r24, r16
    1156:	0e 94 45 12 	call	0x248a	; 0x248a <gpib_untalk_unlisten>
    115a:	c1 cf       	rjmp	.-126    	; 0x10de <GetNextMessage+0xb2>
    115c:	8f e6       	ldi	r24, 0x6F	; 111
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <GetNextMessage+0x134>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <GetNextMessage+0x13a>
    1166:	00 00       	nop
	
	// ensure that ATN is high
	bool atn_was_low = !ATN_OUT_STATE;
	if (atn_was_low)
		_delay_us(220);
	ATN_HIGH;
    1168:	86 98       	cbi	0x10, 6	; 16
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    116a:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    116c:	3e 98       	cbi	0x07, 6	; 7
    116e:	e7 e1       	ldi	r30, 0x17	; 23
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <GetNextMessage+0x146>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <GetNextMessage+0x14c>
    1178:	00 00       	nop
    117a:	7d cf       	rjmp	.-262    	; 0x1076 <GetNextMessage+0x4a>
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    117c:	81 2c       	mov	r8, r1
    117e:	91 2c       	mov	r9, r1
    1180:	dd cf       	rjmp	.-70     	; 0x113c <GetNextMessage+0x110>
		if (timer_ticked() || quickTimeoutPoll)
			timedout = ptimeoutfunc();
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
	
	if (!timedout)
    1182:	88 23       	and	r24, r24
    1184:	09 f4       	brne	.+2      	; 0x1188 <GetNextMessage+0x15c>
    1186:	7f cf       	rjmp	.-258    	; 0x1086 <GetNextMessage+0x5a>
    1188:	c3 cf       	rjmp	.-122    	; 0x1110 <GetNextMessage+0xe4>
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    118a:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <s_terminator>
    118e:	22 23       	and	r18, r18
    1190:	09 f4       	brne	.+2      	; 0x1194 <GetNextMessage+0x168>
    1192:	96 cf       	rjmp	.-212    	; 0x10c0 <GetNextMessage+0x94>
    1194:	91 cf       	rjmp	.-222    	; 0x10b8 <GetNextMessage+0x8c>
	LED(0);	
	
	timedout = false;
#ifndef SPEEDTEST_DUMMY_DEVICE
	if (isFirstMessage)
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);
    1196:	b8 01       	movw	r22, r16
    1198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    119c:	0e 94 b9 12 	call	0x2572	; 0x2572 <gpib_make_talker>
#endif

	i = 0;
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
    11a0:	c1 14       	cp	r12, r1
    11a2:	d1 04       	cpc	r13, r1
    11a4:	19 f0       	breq	.+6      	; 0x11ac <GetNextMessage+0x180>
    11a6:	88 23       	and	r24, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <GetNextMessage+0x180>
    11aa:	5c cf       	rjmp	.-328    	; 0x1064 <GetNextMessage+0x38>
    11ac:	c0 e0       	ldi	r28, 0x00	; 0
    11ae:	d0 e0       	ldi	r29, 0x00	; 0
    11b0:	95 cf       	rjmp	.-214    	; 0x10dc <GetNextMessage+0xb0>
    11b2:	c0 e0       	ldi	r28, 0x00	; 0
    11b4:	d0 e0       	ldi	r29, 0x00	; 0
	
	gpib_ren(1); /* ensure that remote control is enabled */
	
	LED(0);	
	
	timedout = false;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	91 cf       	rjmp	.-222    	; 0x10dc <GetNextMessage+0xb0>

000011ba <TMC_resetstates>:
bool TMC_eom;
bool TMC_InLastMessageComplete = true;

void TMC_resetstates(void)
{
	internal_response_buffer_len = 0;
    11ba:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <internal_response_buffer_len>
	handleGoToLocal = false;
    11be:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <handleGoToLocal>
	handleSDC = false;
    11c2:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <handleSDC>
	handleLocalLockout = false;
    11c6:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <handleLocalLockout>
	handleReadStatusByte = false;
    11ca:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <handleReadStatusByte>
	TMC_LastMessageComplete = true;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
	TMC_InLastMessageComplete = true;
    11d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>
	s_remaining_bytes_receive = 0;
    11d8:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <s_remaining_bytes_receive>
    11dc:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <s_remaining_bytes_receive+0x1>
    11e0:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <s_remaining_bytes_receive+0x2>
    11e4:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <s_remaining_bytes_receive+0x3>
	gpib_interface_clear(); 
    11e8:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <gpib_interface_clear>

000011ec <main>:
		eeprom_write_byte((uint8_t*)addr, value);		
	}
}

int main(void)
{
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	cf 58       	subi	r28, 0x8F	; 143
    11f6:	d1 09       	sbc	r29, r1
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
	uint8_t prevaddr;

	//mcusr_mirror = MCUSR; 
	MCUSR = 0; 
    1202:	14 be       	out	0x34, r1	; 52
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	a8 95       	wdr
    120a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    120e:	88 61       	ori	r24, 0x18	; 24
    1210:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1214:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1218:	0f be       	out	0x3f, r0	; 63
	wdt_disable(); 
	
	PORTB |=  (1<<2); /* PB2 = PULLUP */
    121a:	2a 9a       	sbi	0x05, 2	; 5
	DDRB  &= ~(1<<2); /* PB2 = input*/
    121c:	22 98       	cbi	0x04, 2	; 4
	
	SetupHardware();
    121e:	d7 db       	rcall	.-2130   	; 0x9ce <SetupHardware>
	
	gpib_init();
    1220:	9d d4       	rcall	.+2362   	; 0x1b5c <gpib_init>
    1222:	f9 99       	sbic	0x1f, 1	; 31
	
	/* apply settings from eeprom */
	eeprom_busy_wait();	
    1224:	fe cf       	rjmp	.-4      	; 0x1222 <main+0x36>
    1226:	89 e6       	ldi	r24, 0x69	; 105
	gpib_set_readtermination(eeprom_read_byte((const uint8_t *)105));
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 90 1a 	call	0x3520	; 0x3520 <eeprom_read_byte>
    122e:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <gpib_set_readtermination>
    1232:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <main+0x76>
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
    1236:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1238:	34 e3       	ldi	r19, 0x34	; 52
    123a:	4c e0       	ldi	r20, 0x0C	; 12
    123c:	21 50       	subi	r18, 0x01	; 1
    123e:	30 40       	sbci	r19, 0x00	; 0
    1240:	40 40       	sbci	r20, 0x00	; 0
    1242:	e1 f7       	brne	.-8      	; 0x123c <main+0x50>
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <main+0x5a>
    1246:	00 00       	nop
    1248:	8d 9a       	sbi	0x11, 5	; 17
	GlobalInterruptEnable();
	
	while (!gpib_is_connected())
	{
		_delay_ms(250);
		LED(1);
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	94 e3       	ldi	r25, 0x34	; 52
    124e:	ec e0       	ldi	r30, 0x0C	; 12
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	90 40       	sbci	r25, 0x00	; 0
    1254:	e0 40       	sbci	r30, 0x00	; 0
    1256:	e1 f7       	brne	.-8      	; 0x1250 <main+0x64>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <main+0x6e>
    125a:	00 00       	nop
    125c:	8d 98       	cbi	0x11, 5	; 17
		_delay_ms(250);
		LED(0);
    125e:	1a 9b       	sbis	0x03, 2	; 3
	SetGlobalInterruptMask(CurrentGlobalInt);
}

static inline void check_bootloaderEntry(void)
{
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
    1260:	39 c1       	rjmp	.+626    	; 0x14d4 <main+0x2e8>
    1262:	0e 94 a9 11 	call	0x2352	; 0x2352 <gpib_is_connected>
	eeprom_busy_wait();	
	gpib_set_readtermination(eeprom_read_byte((const uint8_t *)105));
	
	GlobalInterruptEnable();
	
	while (!gpib_is_connected())
    1266:	88 23       	and	r24, r24
    1268:	31 f3       	breq	.-52     	; 0x1236 <main+0x4a>
    126a:	88 e6       	ldi	r24, 0x68	; 104
		_delay_ms(250);
		LED(0);
		check_bootloaderEntry();
	}
	
	uint8_t autoid = eeprom_read_byte((const uint8_t *)104);
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 90 1a 	call	0x3520	; 0x3520 <eeprom_read_byte>
    1272:	18 2f       	mov	r17, r24
    1274:	8e ef       	ldi	r24, 0xFE	; 254
	if ( (autoid >= 0x02) && (autoid <= 0x04) ) // check if SLOW AUTOID mode is activated
    1276:	81 0f       	add	r24, r17
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	08 f4       	brcc	.+2      	; 0x127e <main+0x92>
    127c:	4a c1       	rjmp	.+660    	; 0x1512 <main+0x326>
    127e:	01 e0       	ldi	r16, 0x01	; 1
	devicepresent = false;
	addr = gpib_search();
	devicepresent = (addr < 255);
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
		addr = 1;
	gpib_addr = addr; /* set global GPIB address to found address*/
    1280:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <gpib_search>
	bool devicepresent;
	
	//gpib_interface_clear();
	
	devicepresent = false;
	addr = gpib_search();
    1284:	8f 3f       	cpi	r24, 0xFF	; 255
	devicepresent = (addr < 255);
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
    1286:	09 f4       	brne	.+2      	; 0x128a <main+0x9e>
    1288:	27 c1       	rjmp	.+590    	; 0x14d8 <main+0x2ec>
    128a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gpib_addr>
		addr = 1;
	gpib_addr = addr; /* set global GPIB address to found address*/
    128e:	f9 99       	sbic	0x1f, 1	; 31
			while (1);
		}
		check_bootloaderEntry();
	}; /* Identify the GPIB Address of the connected GPIB device */
#endif
	eeprom_busy_wait();
    1290:	fe cf       	rjmp	.-4      	; 0x128e <main+0xa2>
    1292:	11 30       	cpi	r17, 0x01	; 1
#ifdef SPEEDTEST_DUMMY_DEVICE	
	if ( false )
#else
	if (autoid != 0x01) // check if AUTOID feature is enabled
    1294:	09 f4       	brne	.+2      	; 0x1298 <main+0xac>
    1296:	d7 c1       	rjmp	.+942    	; 0x1646 <main+0x45a>
    1298:	f9 99       	sbic	0x1f, 1	; 31
#endif
	{
		/* found a responsive GPIB address, now setup USB descriptor with *IDN? or ID? command response */
		eeprom_busy_wait();
    129a:	fe cf       	rjmp	.-4      	; 0x1298 <main+0xac>
    129c:	80 e0       	ldi	r24, 0x00	; 0
		prevaddr = eeprom_read_byte((uint8_t*)0); /* read previous gpib address */
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 90 1a 	call	0x3520	; 0x3520 <eeprom_read_byte>
    12a4:	18 2f       	mov	r17, r24
		if (identifyGpibDevice())
    12a6:	ab d8       	rcall	.-3754   	; 0x3fe <identifyGpibDevice>
    12a8:	81 11       	cpse	r24, r1
    12aa:	ae c3       	rjmp	.+1884   	; 0x1a08 <main+0x81c>
    12ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
				eeprom_update_if_changed(1+i, *pdat++);
			}
		}
		else
		{ /* received NO string over GPIB => Check, if the GPIB addr matches the one in eeprom, then report EEProm string! */
			if (prevaddr == gpib_addr)
    12b0:	18 17       	cp	r17, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <main+0xca>
    12b4:	94 c3       	rjmp	.+1832   	; 0x19de <main+0x7f2>
    12b6:	8a e6       	ldi	r24, 0x6A	; 106
		_delay_ms(100);
		gpib_ren(true);
	}
	
	/* if activated: shorten the USB serial number string. This is just for Matlab which does not allow ressource strings to be longer than */
	if (eeprom_read_byte((const uint8_t *)106) == 0x01) // check if serial string shortening is on
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 90 1a 	call	0x3520	; 0x3520 <eeprom_read_byte>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <main+0xd8>
    12c2:	82 c3       	rjmp	.+1796   	; 0x19c8 <main+0x7dc>
    12c4:	8d 9a       	sbi	0x11, 5	; 17
			tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
		}
	}

	/* all fine, now kickoff connect to USB to be able to communicate! */
	LED(1);
    12c6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    12ca:	8e 7f       	andi	r24, 0xFE	; 254
    12cc:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    12d0:	63 e0       	ldi	r22, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12d2:	76 2e       	mov	r7, r22
    12d4:	72 e0       	ldi	r23, 0x02	; 2
    12d6:	67 2e       	mov	r6, r23
    12d8:	e0 e5       	ldi	r30, 0x50	; 80

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    12da:	8e 2e       	mov	r8, r30
    12dc:	e3 ec       	ldi	r30, 0xC3	; 195
    12de:	9e 2e       	mov	r9, r30
    12e0:	a1 2c       	mov	r10, r1
    12e2:	b1 2c       	mov	r11, r1
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <main+0x10c>
    12e6:	1a 9b       	sbis	0x03, 2	; 3
	SetGlobalInterruptMask(CurrentGlobalInt);
}

static inline void check_bootloaderEntry(void)
{
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
    12e8:	f5 c0       	rjmp	.+490    	; 0x14d4 <main+0x2e8>
    12ea:	0e 94 a9 11 	call	0x2352	; 0x2352 <gpib_is_connected>
	for (;;)
	{
		TMC_Task(); // this task is 9.42us active when nothing is triggered, the rest takes 3.3us
		check_bootloaderEntry();
		
		if (!gpib_is_connected()) /* check, if gpib is disconnected */
    12ee:	88 23       	and	r24, r24
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <main+0x108>
    12f2:	8d c1       	rjmp	.+794    	; 0x160e <main+0x422>
    12f4:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <USB_USBTask>
			_delay_ms(500);
			wdt_enable(WDTO_250MS);	
			while (1);
		}
		
		USB_USBTask();
    12f8:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
/** Function to manage TMC data transmission and reception to and from the host. */
static inline void TMC_Task(void)
{
	bool lastmessage;
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	99 f7       	brne	.-26     	; 0x12e6 <main+0xfa>
    1300:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <s_remaining_bytes_receive>
	TMC_MessageHeader_t MessageHeader;
	uint8_t             MessagePayload[128], curlen;
	uint16_t            curlen16;
	
	
	if (s_remaining_bytes_receive == 0)
    1304:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <s_remaining_bytes_receive+0x1>
    1308:	a0 91 45 05 	lds	r26, 0x0545	; 0x800545 <s_remaining_bytes_receive+0x2>
    130c:	b0 91 46 05 	lds	r27, 0x0546	; 0x800546 <s_remaining_bytes_receive+0x3>
    1310:	89 2b       	or	r24, r25
    1312:	8a 2b       	or	r24, r26
    1314:	8b 2b       	or	r24, r27
    1316:	09 f0       	breq	.+2      	; 0x131a <main+0x12e>
    1318:	11 c1       	rjmp	.+546    	; 0x153c <main+0x350>
    131a:	7f 99       	sbic	0x0f, 7	; 15
	{
		/* handle service request (SRQ line goes down) */
		if (gpib_is_srq_active())
    131c:	2f c0       	rjmp	.+94     	; 0x137c <main+0x190>
    131e:	80 92 66 05 	sts	0x0566, r8	; 0x800566 <timeout_val>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    1322:	90 92 67 05 	sts	0x0567, r9	; 0x800567 <timeout_val+0x1>
    1326:	a0 92 68 05 	sts	0x0568, r10	; 0x800568 <timeout_val+0x2>
    132a:	b0 92 69 05 	sts	0x0569, r11	; 0x800569 <timeout_val+0x3>
    132e:	69 e9       	ldi	r22, 0x99	; 153
		if (gpib_is_srq_active())
		{ /* SRQ is now and we are outside of a GPIB transfer here. So: Handle it by reading status byte and push it over the interrupt channel! */
			uint8_t statusReg;
			uint8_t notdata[2];
			timeout_start(50000); /* 0.5s timeout*/
			statusReg =  gpib_readStatusByte(gpib_addr, is_timedout) | 0x40;
    1330:	71 e0       	ldi	r23, 0x01	; 1
    1332:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    1336:	17 d7       	rcall	.+3630   	; 0x2166 <gpib_readStatusByte>
    1338:	80 64       	ori	r24, 0x40	; 64
    133a:	98 2f       	mov	r25, r24
			srq_statusbyte |= (statusReg & ~0x40);
    133c:	9f 7b       	andi	r25, 0xBF	; 191
    133e:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <srq_statusbyte>
    1342:	92 2b       	or	r25, r18
    1344:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <srq_statusbyte>
    1348:	91 e8       	ldi	r25, 0x81	; 129
			notdata[0] = 0x80 | 0x01;
    134a:	99 83       	std	Y+1, r25	; 0x01
    134c:	8a 83       	std	Y+2, r24	; 0x02
			notdata[1] = statusReg;
    134e:	e1 e0       	ldi	r30, 0x01	; 1
    1350:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1354:	04 c0       	rjmp	.+8      	; 0x135e <main+0x172>
    1356:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
			Endpoint_SelectEndpoint(TMC_NOTIFICATION_EPADDR);
			while ( Endpoint_Write_Stream_LE(notdata, sizeof(notdata), NULL) ==
					ENDPOINT_RWSTREAM_IncompleteTransfer)
			{
				if (IsTMCBulkINReset)
    135a:	81 11       	cpse	r24, r1
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <main+0x186>
    135e:	40 e0       	ldi	r20, 0x00	; 0
			statusReg =  gpib_readStatusByte(gpib_addr, is_timedout) | 0x40;
			srq_statusbyte |= (statusReg & ~0x40);
			notdata[0] = 0x80 | 0x01;
			notdata[1] = statusReg;
			Endpoint_SelectEndpoint(TMC_NOTIFICATION_EPADDR);
			while ( Endpoint_Write_Stream_LE(notdata, sizeof(notdata), NULL) ==
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <Endpoint_Write_Stream_LE>
    136e:	85 30       	cpi	r24, 0x05	; 5
    1370:	91 f3       	breq	.-28     	; 0x1356 <main+0x16a>
    1372:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1376:	8e 77       	andi	r24, 0x7E	; 126
    1378:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    137c:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <handleSDC>
			}
			Endpoint_ClearIN();		
		}

		/* handle actions triggered by control transfer in a synchronous manner here */
		if (handleSDC)
    1380:	81 11       	cpse	r24, r1
    1382:	72 c1       	rjmp	.+740    	; 0x1668 <main+0x47c>
    1384:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <handleLocalLockout>
			timeout_start(50000); /* 0.5s timeout*/
			gpib_sdc(gpib_addr, is_timedout);
			handleSDC = false;
		}
		
		if (handleLocalLockout)
    1388:	81 11       	cpse	r24, r1
    138a:	80 c1       	rjmp	.+768    	; 0x168c <main+0x4a0>
    138c:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <handleGoToLocal>
			timeout_start(50000); /* 0.5s timeout*/
			gpib_localLockout(is_timedout);
			handleLocalLockout = false;
		}
		
		if (handleGoToLocal)
    1390:	81 11       	cpse	r24, r1
    1392:	8a c1       	rjmp	.+788    	; 0x16a8 <main+0x4bc>
    1394:	70 92 e9 00 	sts	0x00E9, r7	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1398:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    139c:	82 ff       	sbrs	r24, 2

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    139e:	1a c0       	rjmp	.+52     	; 0x13d4 <main+0x1e8>
    13a0:	ce 01       	movw	r24, r28
    13a2:	8f 57       	subi	r24, 0x7F	; 127
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	0e 94 c8 01 	call	0x390	; 0x390 <ReadTMCHeader.part.0>
    13aa:	88 23       	and	r24, r24
			handleGoToLocal = false;
		}
		

		/* Try to read in a TMC message from the interface, process if one is available */
		if (ReadTMCHeader(&MessageHeader))
    13ac:	99 f0       	breq	.+38     	; 0x13d4 <main+0x1e8>
    13ae:	cf 57       	subi	r28, 0x7F	; 127
		{
			/* Indicate busy */
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			switch (MessageHeader.MessageID)
    13b0:	df 4f       	sbci	r29, 0xFF	; 255
    13b2:	88 81       	ld	r24, Y
    13b4:	c1 58       	subi	r28, 0x81	; 129
    13b6:	d0 40       	sbci	r29, 0x00	; 0
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	09 f4       	brne	.+2      	; 0x13be <main+0x1d2>
    13bc:	f4 c1       	rjmp	.+1000   	; 0x17a6 <main+0x5ba>
    13be:	80 38       	cpi	r24, 0x80	; 128
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <main+0x1d8>
    13c2:	dc c1       	rjmp	.+952    	; 0x177c <main+0x590>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <main+0x1de>
    13c8:	7f c1       	rjmp	.+766    	; 0x16c8 <main+0x4dc>
    13ca:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13d4:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <handleRSTB>
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, TMC_eom && lastmessage, tmc_gpib_write_timedout);
			Endpoint_ClearOUT();
		}
	}
	
	if (handleRSTB)
    13d8:	88 23       	and	r24, r24
    13da:	49 f1       	breq	.+82     	; 0x142e <main+0x242>
    13dc:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <handleRSTB>
	{
		uint8_t  notdata[2];
		
		handleRSTB = false;
    13e0:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <RSTB_btag>
		
		notdata[0] = RSTB_btag | 0x80;
    13e4:	80 68       	ori	r24, 0x80	; 128
    13e6:	c3 57       	subi	r28, 0x73	; 115
    13e8:	df 4f       	sbci	r29, 0xFF	; 255
    13ea:	88 83       	st	Y, r24
    13ec:	cd 58       	subi	r28, 0x8D	; 141
    13ee:	d0 40       	sbci	r29, 0x00	; 0
    13f0:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <RSTB_status>
		notdata[1] = RSTB_status;
    13f4:	c2 57       	subi	r28, 0x72	; 114
    13f6:	df 4f       	sbci	r29, 0xFF	; 255
    13f8:	88 83       	st	Y, r24
    13fa:	ce 58       	subi	r28, 0x8E	; 142
    13fc:	d0 40       	sbci	r29, 0x00	; 0
    13fe:	21 e0       	ldi	r18, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1400:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1404:	04 c0       	rjmp	.+8      	; 0x140e <main+0x222>
    1406:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
		Endpoint_SelectEndpoint(TMC_NOTIFICATION_EPADDR);
		while ( Endpoint_Write_Stream_LE(notdata, sizeof(notdata), NULL) ==
				ENDPOINT_RWSTREAM_IncompleteTransfer)
		{
			if (IsTMCBulkINReset)
    140a:	81 11       	cpse	r24, r1
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <main+0x238>
    140e:	40 e0       	ldi	r20, 0x00	; 0
		handleRSTB = false;
		
		notdata[0] = RSTB_btag | 0x80;
		notdata[1] = RSTB_status;
		Endpoint_SelectEndpoint(TMC_NOTIFICATION_EPADDR);
		while ( Endpoint_Write_Stream_LE(notdata, sizeof(notdata), NULL) ==
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	ce 01       	movw	r24, r28
    1418:	83 57       	subi	r24, 0x73	; 115
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <Endpoint_Write_Stream_LE>
    1420:	85 30       	cpi	r24, 0x05	; 5
    1422:	89 f3       	breq	.-30     	; 0x1406 <main+0x21a>
    1424:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1428:	8e 77       	andi	r24, 0x7E	; 126
    142a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    142e:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <IsTMCBulkOUTReset>
		}
		Endpoint_ClearIN();		
	}
	
	
	if (IsTMCBulkOUTReset || IsTMCBulkINReset)
    1432:	81 11       	cpse	r24, r1
    1434:	04 c0       	rjmp	.+8      	; 0x143e <main+0x252>
    1436:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
    143a:	88 23       	and	r24, r24
    143c:	a9 f1       	breq	.+106    	; 0x14a8 <main+0x2bc>
    143e:	70 92 e9 00 	sts	0x00E9, r7	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1446:	8b 77       	andi	r24, 0x7B	; 123
    1448:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    144c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1450:	8b 77       	andi	r24, 0x7B	; 123
    1452:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1456:	60 92 e9 00 	sts	0x00E9, r6	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    145a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			 *  \return Total number of busy banks in the selected endpoint.
			 */
			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Endpoint_GetBusyBanks(void)
			{
				return (UESTA0X & (0x03 << NBUSYBK0));
    145e:	83 70       	andi	r24, 0x03	; 3
			 *
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_AbortPendingIN(void)
			{
				while (Endpoint_GetBusyBanks() != 0)
    1460:	69 f0       	breq	.+26     	; 0x147c <main+0x290>
    1462:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					UEINTX |= (1 << RXOUTI);
    1466:	84 60       	ori	r24, 0x04	; 4
    1468:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    146c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & (1 << RXOUTI));
    1470:	82 fd       	sbrc	r24, 2
    1472:	fc cf       	rjmp	.-8      	; 0x146c <main+0x280>
    1474:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			 *  \return Total number of busy banks in the selected endpoint.
			 */
			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Endpoint_GetBusyBanks(void)
			{
				return (UESTA0X & (0x03 << NBUSYBK0));
    1478:	83 70       	andi	r24, 0x03	; 3
			 *
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_AbortPendingIN(void)
			{
				while (Endpoint_GetBusyBanks() != 0)
    147a:	99 f7       	brne	.-26     	; 0x1462 <main+0x276>
    147c:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <handleSDC>

		Endpoint_SelectEndpoint(TMC_IN_EPADDR);
		Endpoint_AbortPendingIN();

		/* SDC has to be sent before clearing state, because SDC request is stopped in reset states */
		if (handleSDC)
    1480:	88 23       	and	r24, r24
    1482:	89 f0       	breq	.+34     	; 0x14a6 <main+0x2ba>
		{
			gpib_ren(1); /* ensure that remote control is enabled */
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	79 d7       	rcall	.+3826   	; 0x237a <gpib_ren>
    1488:	80 92 66 05 	sts	0x0566, r8	; 0x800566 <timeout_val>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    148c:	90 92 67 05 	sts	0x0567, r9	; 0x800567 <timeout_val+0x1>
    1490:	a0 92 68 05 	sts	0x0568, r10	; 0x800568 <timeout_val+0x2>
    1494:	b0 92 69 05 	sts	0x0569, r11	; 0x800569 <timeout_val+0x3>
		/* SDC has to be sent before clearing state, because SDC request is stopped in reset states */
		if (handleSDC)
		{
			gpib_ren(1); /* ensure that remote control is enabled */
			timeout_start(50000); /* 0.5s timeout*/
			gpib_sdc(gpib_addr, is_timedout);
    1498:	69 e9       	ldi	r22, 0x99	; 153
    149a:	71 e0       	ldi	r23, 0x01	; 1
    149c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    14a0:	dd d5       	rcall	.+3002   	; 0x205c <gpib_sdc>
			handleSDC = false;
    14a2:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <handleSDC>
		}

		TMC_resetstates();
    14a6:	89 de       	rcall	.-750    	; 0x11ba <TMC_resetstates>
    14a8:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <IsTMCBulkINReset>
			
	}
	
	/* All pending data has been processed - reset the data abort flags */
	IsTMCBulkINReset  = false;
    14ac:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <IsTMCBulkOUTReset>
	IsTMCBulkOUTReset = false;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
	
	transfer_busy = (s_remaining_bytes_receive != 0);
    14b2:	40 91 43 05 	lds	r20, 0x0543	; 0x800543 <s_remaining_bytes_receive>
    14b6:	50 91 44 05 	lds	r21, 0x0544	; 0x800544 <s_remaining_bytes_receive+0x1>
    14ba:	60 91 45 05 	lds	r22, 0x0545	; 0x800545 <s_remaining_bytes_receive+0x2>
    14be:	70 91 46 05 	lds	r23, 0x0546	; 0x800546 <s_remaining_bytes_receive+0x3>
    14c2:	45 2b       	or	r20, r21
    14c4:	46 2b       	or	r20, r22
    14c6:	47 2b       	or	r20, r23
    14c8:	09 f4       	brne	.+2      	; 0x14cc <main+0x2e0>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <transfer_busy>
    14d0:	1a 99       	sbic	0x03, 2	; 3
	SetGlobalInterruptMask(CurrentGlobalInt);
}

static inline void check_bootloaderEntry(void)
{
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
    14d2:	0b cf       	rjmp	.-490    	; 0x12ea <main+0xfe>
    14d4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Jump_To_Bootloader>
	{
		Jump_To_Bootloader();
    14d8:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <gpib_addr>
	devicepresent = false;
	addr = gpib_search();
	devicepresent = (addr < 255);
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
		addr = 1;
	gpib_addr = addr; /* set global GPIB address to found address*/
    14dc:	9f ef       	ldi	r25, 0xFF	; 255
    14de:	e1 ee       	ldi	r30, 0xE1	; 225
    14e0:	f4 e0       	ldi	r31, 0x04	; 4
    14e2:	91 50       	subi	r25, 0x01	; 1
    14e4:	e0 40       	sbci	r30, 0x00	; 0
    14e6:	f0 40       	sbci	r31, 0x00	; 0
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <main+0x2f6>
    14ea:	00 c0       	rjmp	.+0      	; 0x14ec <main+0x300>
    14ec:	00 00       	nop
    14ee:	8d 9a       	sbi	0x11, 5	; 17
#ifndef SPEEDTEST_DUMMY_DEVICE
//asdf
	while (!findGpibdevice())
	{
		_delay_ms(100);
		LED(1);
    14f0:	2f ef       	ldi	r18, 0xFF	; 255
    14f2:	33 ed       	ldi	r19, 0xD3	; 211
    14f4:	40 e3       	ldi	r20, 0x30	; 48
    14f6:	21 50       	subi	r18, 0x01	; 1
    14f8:	30 40       	sbci	r19, 0x00	; 0
    14fa:	40 40       	sbci	r20, 0x00	; 0
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <main+0x30a>
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <main+0x314>
    1500:	00 00       	nop
		_delay_ms(1000);
		LED(0);
    1502:	8d 98       	cbi	0x11, 5	; 17
		if (!gpib_is_connected()) /* we want to reset here if the device is unplugged */
    1504:	26 d7       	rcall	.+3660   	; 0x2352 <gpib_is_connected>
    1506:	88 23       	and	r24, r24
    1508:	09 f4       	brne	.+2      	; 0x150c <main+0x320>
    150a:	6c c0       	rjmp	.+216    	; 0x15e4 <main+0x3f8>
    150c:	1a 99       	sbic	0x03, 2	; 3
	SetGlobalInterruptMask(CurrentGlobalInt);
}

static inline void check_bootloaderEntry(void)
{
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
    150e:	b8 ce       	rjmp	.-656    	; 0x1280 <main+0x94>
    1510:	e1 cf       	rjmp	.-62     	; 0x14d4 <main+0x2e8>
    1512:	13 30       	cpi	r17, 0x03	; 3
	uint8_t autoid = eeprom_read_byte((const uint8_t *)104);
	if ( (autoid >= 0x02) && (autoid <= 0x04) ) // check if SLOW AUTOID mode is activated
	{ // yes, it is active, so wait 10 seconds
		uint8_t seconds;
		seconds = 5;
		if (autoid == 0x03)
    1514:	09 f4       	brne	.+2      	; 0x1518 <main+0x32c>
    1516:	64 c0       	rjmp	.+200    	; 0x15e0 <main+0x3f4>
    1518:	14 30       	cpi	r17, 0x04	; 4
			seconds = 15;
		if (autoid == 0x04)
    151a:	09 f4       	brne	.+2      	; 0x151e <main+0x332>
    151c:	5f c0       	rjmp	.+190    	; 0x15dc <main+0x3f0>
    151e:	95 e0       	ldi	r25, 0x05	; 5
	
	uint8_t autoid = eeprom_read_byte((const uint8_t *)104);
	if ( (autoid >= 0x02) && (autoid <= 0x04) ) // check if SLOW AUTOID mode is activated
	{ // yes, it is active, so wait 10 seconds
		uint8_t seconds;
		seconds = 5;
    1520:	80 e0       	ldi	r24, 0x00	; 0
		if (autoid == 0x03)
			seconds = 15;
		if (autoid == 0x04)
			seconds = 30;
		for (uint8_t i=0; i<seconds; i++)
    1522:	ff ef       	ldi	r31, 0xFF	; 255
    1524:	23 ed       	ldi	r18, 0xD3	; 211
    1526:	30 e3       	ldi	r19, 0x30	; 48
    1528:	f1 50       	subi	r31, 0x01	; 1
    152a:	20 40       	sbci	r18, 0x00	; 0
    152c:	30 40       	sbci	r19, 0x00	; 0
    152e:	e1 f7       	brne	.-8      	; 0x1528 <main+0x33c>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <main+0x346>
    1532:	00 00       	nop
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	98 13       	cpse	r25, r24
    1538:	f4 cf       	rjmp	.-24     	; 0x1522 <main+0x336>
    153a:	a1 ce       	rjmp	.-702    	; 0x127e <main+0x92>
    153c:	70 92 e9 00 	sts	0x00E9, r7	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1540:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1544:	82 ff       	sbrs	r24, 2
	{ /* receiving further bytes to be sent over GPIB */
			/* Select the Data Out endpoint */
		Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
    1546:	46 cf       	rjmp	.-372    	; 0x13d4 <main+0x1e8>
    1548:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <LastTransferLength+0x1>
		{
			LastTransferLength = 0;
    154c:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <LastTransferLength>
    1550:	40 91 43 05 	lds	r20, 0x0543	; 0x800543 <s_remaining_bytes_receive>
			
			curlen = TMC_IO_EPSIZE;
			if (s_remaining_bytes_receive < TMC_IO_EPSIZE)
    1554:	50 91 44 05 	lds	r21, 0x0544	; 0x800544 <s_remaining_bytes_receive+0x1>
    1558:	60 91 45 05 	lds	r22, 0x0545	; 0x800545 <s_remaining_bytes_receive+0x2>
    155c:	70 91 46 05 	lds	r23, 0x0546	; 0x800546 <s_remaining_bytes_receive+0x3>
    1560:	40 34       	cpi	r20, 0x40	; 64
    1562:	51 05       	cpc	r21, r1
    1564:	61 05       	cpc	r22, r1
    1566:	71 05       	cpc	r23, r1
    1568:	b8 f5       	brcc	.+110    	; 0x15d8 <main+0x3ec>
    156a:	94 2f       	mov	r25, r20
			{
				curlen = s_remaining_bytes_receive;
    156c:	49 1b       	sub	r20, r25
			}
			
			s_remaining_bytes_receive -= curlen;
    156e:	51 09       	sbc	r21, r1
    1570:	61 09       	sbc	r22, r1
    1572:	71 09       	sbc	r23, r1
    1574:	40 93 43 05 	sts	0x0543, r20	; 0x800543 <s_remaining_bytes_receive>
    1578:	50 93 44 05 	sts	0x0544, r21	; 0x800544 <s_remaining_bytes_receive+0x1>
    157c:	60 93 45 05 	sts	0x0545, r22	; 0x800545 <s_remaining_bytes_receive+0x2>
    1580:	70 93 46 05 	sts	0x0546, r23	; 0x800546 <s_remaining_bytes_receive+0x3>
    1584:	21 e0       	ldi	r18, 0x01	; 1

			
			lastmessage = (s_remaining_bytes_receive==0);
    1586:	41 15       	cp	r20, r1
    1588:	51 05       	cpc	r21, r1
    158a:	61 05       	cpc	r22, r1
    158c:	71 05       	cpc	r23, r1
    158e:	09 f0       	breq	.+2      	; 0x1592 <main+0x3a6>
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	c1 57       	subi	r28, 0x71	; 113
    1594:	df 4f       	sbci	r29, 0xFF	; 255
    1596:	28 83       	st	Y, r18
    1598:	cf 58       	subi	r28, 0x8F	; 143
    159a:	d0 40       	sbci	r29, 0x00	; 0
    159c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <TMC_LastMessageComplete>
			TMC_LastMessageComplete = lastmessage;
    15a0:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <TMC_eom>
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, TMC_eom && lastmessage, tmc_gpib_write_timedout);
    15a4:	88 23       	and	r24, r24
    15a6:	09 f4       	brne	.+2      	; 0x15aa <main+0x3be>
    15a8:	4c c0       	rjmp	.+152    	; 0x1642 <main+0x456>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	45 2b       	or	r20, r21
    15ae:	46 2b       	or	r20, r22
    15b0:	47 2b       	or	r20, r23
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <main+0x3ca>
    15b4:	46 c0       	rjmp	.+140    	; 0x1642 <main+0x456>
    15b6:	08 2f       	mov	r16, r24
    15b8:	01 70       	andi	r16, 0x01	; 1
    15ba:	88 eb       	ldi	r24, 0xB8	; 184
    15bc:	e8 2e       	mov	r14, r24
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	f8 2e       	mov	r15, r24
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	69 2f       	mov	r22, r25
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	19 dc       	rcall	.-1998   	; 0xdfe <ProcessSentMessage>
    15cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15d0:	8b 77       	andi	r24, 0x7B	; 123
    15d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15d6:	fe ce       	rjmp	.-516    	; 0x13d4 <main+0x1e8>
    15d8:	90 e4       	ldi	r25, 0x40	; 64
		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
		{
			LastTransferLength = 0;
			
			curlen = TMC_IO_EPSIZE;
    15da:	c8 cf       	rjmp	.-112    	; 0x156c <main+0x380>
    15dc:	9e e1       	ldi	r25, 0x1E	; 30
		uint8_t seconds;
		seconds = 5;
		if (autoid == 0x03)
			seconds = 15;
		if (autoid == 0x04)
			seconds = 30;
    15de:	a0 cf       	rjmp	.-192    	; 0x1520 <main+0x334>
    15e0:	9f e0       	ldi	r25, 0x0F	; 15
	if ( (autoid >= 0x02) && (autoid <= 0x04) ) // check if SLOW AUTOID mode is activated
	{ // yes, it is active, so wait 10 seconds
		uint8_t seconds;
		seconds = 5;
		if (autoid == 0x03)
			seconds = 15;
    15e2:	9e cf       	rjmp	.-196    	; 0x1520 <main+0x334>
    15e4:	8d 98       	cbi	0x11, 5	; 17
		LED(1);
		_delay_ms(1000);
		LED(0);
		if (!gpib_is_connected()) /* we want to reset here if the device is unplugged */
		{
			LED(0);	
    15e6:	4f ef       	ldi	r20, 0xFF	; 255
    15e8:	89 e6       	ldi	r24, 0x69	; 105
    15ea:	98 e1       	ldi	r25, 0x18	; 24
    15ec:	41 50       	subi	r20, 0x01	; 1
    15ee:	80 40       	sbci	r24, 0x00	; 0
    15f0:	90 40       	sbci	r25, 0x00	; 0
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <main+0x400>
    15f4:	00 c0       	rjmp	.+0      	; 0x15f6 <main+0x40a>
    15f6:	00 00       	nop
    15f8:	9c e0       	ldi	r25, 0x0C	; 12
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    15fa:	88 e1       	ldi	r24, 0x18	; 24
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	a8 95       	wdr
    1602:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    160c:	ff cf       	rjmp	.-2      	; 0x160c <main+0x420>
    160e:	8d 98       	cbi	0x11, 5	; 17
		TMC_Task(); // this task is 9.42us active when nothing is triggered, the rest takes 3.3us
		check_bootloaderEntry();
		
		if (!gpib_is_connected()) /* check, if gpib is disconnected */
		{ /* when we get here, reset the MCU and disconnect from USB ! It will reconnect once plugged in to GPIB again */
			LED(0);
    1610:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1614:	81 60       	ori	r24, 0x01	; 1
    1616:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	49 e6       	ldi	r20, 0x69	; 105
    161e:	88 e1       	ldi	r24, 0x18	; 24
    1620:	31 50       	subi	r19, 0x01	; 1
    1622:	40 40       	sbci	r20, 0x00	; 0
    1624:	80 40       	sbci	r24, 0x00	; 0
    1626:	e1 f7       	brne	.-8      	; 0x1620 <main+0x434>
    1628:	00 c0       	rjmp	.+0      	; 0x162a <main+0x43e>
    162a:	00 00       	nop
    162c:	9c e0       	ldi	r25, 0x0C	; 12
    162e:	88 e1       	ldi	r24, 0x18	; 24
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	a8 95       	wdr
    1636:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1640:	ff cf       	rjmp	.-2      	; 0x1640 <main+0x454>
			s_remaining_bytes_receive -= curlen;

			
			lastmessage = (s_remaining_bytes_receive==0);
			TMC_LastMessageComplete = lastmessage;
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, TMC_eom && lastmessage, tmc_gpib_write_timedout);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	b8 cf       	rjmp	.-144    	; 0x15b6 <main+0x3ca>
			}
		}
	}
	else /* user disabled fully automated detection mode */
	{
		TMC_SetInternalSerial(true);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	0e 94 29 01 	call	0x252	; 0x252 <TMC_SetInternalSerial>
		gpib_ren(false);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	95 d6       	rcall	.+3370   	; 0x237a <gpib_ren>
    1650:	2f ef       	ldi	r18, 0xFF	; 255
    1652:	31 ee       	ldi	r19, 0xE1	; 225
    1654:	44 e0       	ldi	r20, 0x04	; 4
    1656:	21 50       	subi	r18, 0x01	; 1
    1658:	30 40       	sbci	r19, 0x00	; 0
    165a:	40 40       	sbci	r20, 0x00	; 0
    165c:	e1 f7       	brne	.-8      	; 0x1656 <main+0x46a>
    165e:	00 c0       	rjmp	.+0      	; 0x1660 <main+0x474>
		_delay_ms(100);
		gpib_ren(true);
    1660:	00 00       	nop
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8a d6       	rcall	.+3348   	; 0x237a <gpib_ren>
    1666:	27 ce       	rjmp	.-946    	; 0x12b6 <main+0xca>
		}

		/* handle actions triggered by control transfer in a synchronous manner here */
		if (handleSDC)
		{
			gpib_ren(1); /* ensure that remote control is enabled */
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	87 d6       	rcall	.+3342   	; 0x237a <gpib_ren>
    166c:	80 92 66 05 	sts	0x0566, r8	; 0x800566 <timeout_val>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    1670:	90 92 67 05 	sts	0x0567, r9	; 0x800567 <timeout_val+0x1>
    1674:	a0 92 68 05 	sts	0x0568, r10	; 0x800568 <timeout_val+0x2>
    1678:	b0 92 69 05 	sts	0x0569, r11	; 0x800569 <timeout_val+0x3>
		/* handle actions triggered by control transfer in a synchronous manner here */
		if (handleSDC)
		{
			gpib_ren(1); /* ensure that remote control is enabled */
			timeout_start(50000); /* 0.5s timeout*/
			gpib_sdc(gpib_addr, is_timedout);
    167c:	69 e9       	ldi	r22, 0x99	; 153
    167e:	71 e0       	ldi	r23, 0x01	; 1
    1680:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    1684:	eb d4       	rcall	.+2518   	; 0x205c <gpib_sdc>
    1686:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <handleSDC>
			handleSDC = false;
    168a:	7c ce       	rjmp	.-776    	; 0x1384 <main+0x198>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    168c:	80 92 66 05 	sts	0x0566, r8	; 0x800566 <timeout_val>
    1690:	90 92 67 05 	sts	0x0567, r9	; 0x800567 <timeout_val+0x1>
    1694:	a0 92 68 05 	sts	0x0568, r10	; 0x800568 <timeout_val+0x2>
    1698:	b0 92 69 05 	sts	0x0569, r11	; 0x800569 <timeout_val+0x3>
		}
		
		if (handleLocalLockout)
		{
			timeout_start(50000); /* 0.5s timeout*/
			gpib_localLockout(is_timedout);
    169c:	89 e9       	ldi	r24, 0x99	; 153
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	96 d2       	rcall	.+1324   	; 0x1bce <gpib_localLockout>
    16a2:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <handleLocalLockout>
			handleLocalLockout = false;
    16a6:	72 ce       	rjmp	.-796    	; 0x138c <main+0x1a0>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    16a8:	80 92 66 05 	sts	0x0566, r8	; 0x800566 <timeout_val>
    16ac:	90 92 67 05 	sts	0x0567, r9	; 0x800567 <timeout_val+0x1>
    16b0:	a0 92 68 05 	sts	0x0568, r10	; 0x800568 <timeout_val+0x2>
    16b4:	b0 92 69 05 	sts	0x0569, r11	; 0x800569 <timeout_val+0x3>
		}
		
		if (handleGoToLocal)
		{
			timeout_start(50000); /* 0.5s timeout*/
			gpib_gotoLocal(gpib_addr, is_timedout);
    16b8:	69 e9       	ldi	r22, 0x99	; 153
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    16c0:	40 d4       	rcall	.+2176   	; 0x1f42 <gpib_gotoLocal>
    16c2:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <handleGoToLocal>
			handleGoToLocal = false;
    16c6:	66 ce       	rjmp	.-820    	; 0x1394 <main+0x1a8>
    16c8:	cb 57       	subi	r28, 0x7B	; 123
					timeout_start(50000); /* 0.5s timeout*/
					gpib_trigger(gpib_addr, is_timedout);
					Endpoint_ClearOUT();					
					break;
				case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
					s_remaining_bytes_receive = MessageHeader.TransferSize;
    16ca:	df 4f       	sbci	r29, 0xFF	; 255
    16cc:	48 81       	ld	r20, Y
    16ce:	59 81       	ldd	r21, Y+1	; 0x01
    16d0:	6a 81       	ldd	r22, Y+2	; 0x02
    16d2:	7b 81       	ldd	r23, Y+3	; 0x03
    16d4:	c5 58       	subi	r28, 0x85	; 133
    16d6:	d0 40       	sbci	r29, 0x00	; 0
    16d8:	8a 01       	movw	r16, r20
					
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t), MessageHeader.TransferSize);
    16da:	9b 01       	movw	r18, r22
    16dc:	45 33       	cpi	r20, 0x35	; 53
    16de:	51 05       	cpc	r21, r1
    16e0:	61 05       	cpc	r22, r1
    16e2:	71 05       	cpc	r23, r1
    16e4:	20 f0       	brcs	.+8      	; 0x16ee <main+0x502>
    16e6:	04 e3       	ldi	r16, 0x34	; 52
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	90 2f       	mov	r25, r16
    16f0:	40 1b       	sub	r20, r16

					s_remaining_bytes_receive -= curlen;
    16f2:	51 0b       	sbc	r21, r17
    16f4:	62 0b       	sbc	r22, r18
    16f6:	73 0b       	sbc	r23, r19
    16f8:	40 93 43 05 	sts	0x0543, r20	; 0x800543 <s_remaining_bytes_receive>
    16fc:	50 93 44 05 	sts	0x0544, r21	; 0x800544 <s_remaining_bytes_receive+0x1>
    1700:	60 93 45 05 	sts	0x0545, r22	; 0x800545 <s_remaining_bytes_receive+0x2>
    1704:	70 93 46 05 	sts	0x0546, r23	; 0x800546 <s_remaining_bytes_receive+0x3>
    1708:	c7 57       	subi	r28, 0x77	; 119
					
					TMC_eom = (MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction != 0);
    170a:	df 4f       	sbci	r29, 0xFF	; 255
    170c:	88 81       	ld	r24, Y
    170e:	c9 58       	subi	r28, 0x89	; 137
    1710:	d0 40       	sbci	r29, 0x00	; 0
    1712:	21 e0       	ldi	r18, 0x01	; 1
    1714:	81 11       	cpse	r24, r1
    1716:	01 c0       	rjmp	.+2      	; 0x171a <main+0x52e>
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	20 93 6a 05 	sts	0x056A, r18	; 0x80056a <TMC_eom>
    171e:	21 e0       	ldi	r18, 0x01	; 1
					lastmessage =  (s_remaining_bytes_receive==0);
    1720:	41 15       	cp	r20, r1
    1722:	51 05       	cpc	r21, r1
    1724:	61 05       	cpc	r22, r1
    1726:	71 05       	cpc	r23, r1
    1728:	09 f0       	breq	.+2      	; 0x172c <main+0x540>
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	c1 57       	subi	r28, 0x71	; 113
    172e:	df 4f       	sbci	r29, 0xFF	; 255
    1730:	28 83       	st	Y, r18
    1732:	cf 58       	subi	r28, 0x8F	; 143
    1734:	d0 40       	sbci	r29, 0x00	; 0
    1736:	88 23       	and	r24, r24
					ProcessSentMessage(MessagePayload, curlen, TMC_LastMessageComplete, lastmessage, TMC_eom && lastmessage, tmc_gpib_write_timedout);
    1738:	29 f0       	breq	.+10     	; 0x1744 <main+0x558>
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	45 2b       	or	r20, r21
    173e:	46 2b       	or	r20, r22
    1740:	47 2b       	or	r20, r23
    1742:	09 f0       	breq	.+2      	; 0x1746 <main+0x55a>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	08 2f       	mov	r16, r24
    1748:	01 70       	andi	r16, 0x01	; 1
    174a:	58 eb       	ldi	r21, 0xB8	; 184
    174c:	e5 2e       	mov	r14, r21
    174e:	51 e0       	ldi	r21, 0x01	; 1
    1750:	f5 2e       	mov	r15, r21
    1752:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <TMC_LastMessageComplete>
    1756:	69 2f       	mov	r22, r25
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	50 db       	rcall	.-2400   	; 0xdfe <ProcessSentMessage>
    175e:	70 92 e9 00 	sts	0x00E9, r7	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1766:	8b 77       	andi	r24, 0x7B	; 123
    1768:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					
					/* Select the Data Out endpoint, this has to be done because the timeout function cal select the control endpoint */
					Endpoint_SelectEndpoint(TMC_OUT_EPADDR);
					Endpoint_ClearOUT();
					
					TMC_LastMessageComplete = lastmessage;
    176c:	c1 57       	subi	r28, 0x71	; 113
    176e:	df 4f       	sbci	r29, 0xFF	; 255
    1770:	88 81       	ld	r24, Y
    1772:	cf 58       	subi	r28, 0x8F	; 143
    1774:	d0 40       	sbci	r29, 0x00	; 0
    1776:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			switch (MessageHeader.MessageID)
			{
				case TMC_MESSAGEID_TRIGGER:
					gpib_ren(1); /* ensure that remote control is enabled */
    177a:	2c ce       	rjmp	.-936    	; 0x13d4 <main+0x1e8>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	fd d5       	rcall	.+3066   	; 0x237a <gpib_ren>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    1780:	80 92 66 05 	sts	0x0566, r8	; 0x800566 <timeout_val>
    1784:	90 92 67 05 	sts	0x0567, r9	; 0x800567 <timeout_val+0x1>
    1788:	a0 92 68 05 	sts	0x0568, r10	; 0x800568 <timeout_val+0x2>
    178c:	b0 92 69 05 	sts	0x0569, r11	; 0x800569 <timeout_val+0x3>
			switch (MessageHeader.MessageID)
			{
				case TMC_MESSAGEID_TRIGGER:
					gpib_ren(1); /* ensure that remote control is enabled */
					timeout_start(50000); /* 0.5s timeout*/
					gpib_trigger(gpib_addr, is_timedout);
    1790:	69 e9       	ldi	r22, 0x99	; 153
    1792:	71 e0       	ldi	r23, 0x01	; 1
    1794:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    1798:	5d d3       	rcall	.+1722   	; 0x1e54 <gpib_trigger>
    179a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    179e:	8b 77       	andi	r24, 0x7B	; 123
    17a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17a4:	17 ce       	rjmp	.-978    	; 0x13d4 <main+0x1e8>
    17a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17aa:	8b 77       	andi	r24, 0x7B	; 123
    17ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17b0:	cb 57       	subi	r28, 0x7B	; 123
					break;
				case TMC_MESSAGEID_DEV_DEP_MSG_IN:
					Endpoint_ClearOUT();
					
					curlen16 = sizeof(readbuffer);// -1;
					if (curlen16 > MessageHeader.TransferSize)
    17b2:	df 4f       	sbci	r29, 0xFF	; 255
    17b4:	48 81       	ld	r20, Y
    17b6:	59 81       	ldd	r21, Y+1	; 0x01
    17b8:	6a 81       	ldd	r22, Y+2	; 0x02
    17ba:	7b 81       	ldd	r23, Y+3	; 0x03
    17bc:	c5 58       	subi	r28, 0x85	; 133
    17be:	d0 40       	sbci	r29, 0x00	; 0
    17c0:	44 3f       	cpi	r20, 0xF4	; 244
    17c2:	f3 e0       	ldi	r31, 0x03	; 3
    17c4:	5f 07       	cpc	r21, r31
    17c6:	61 05       	cpc	r22, r1
    17c8:	71 05       	cpc	r23, r1
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <main+0x5e2>
    17cc:	fa c0       	rjmp	.+500    	; 0x19c2 <main+0x7d6>
    17ce:	ca 01       	movw	r24, r20
						curlen16 = MessageHeader.TransferSize;
    17d0:	f0 90 4a 01 	lds	r15, 0x014A	; 0x80014a <internal_response_buffer_len>
					
					/* Check if a response from an internal query is in the buffer */
					if (internal_response_buffer_len) 
    17d4:	ff 20       	and	r15, r15
    17d6:	09 f4       	brne	.+2      	; 0x17da <main+0x5ee>
    17d8:	de c0       	rjmp	.+444    	; 0x1996 <main+0x7aa>
    17da:	e0 90 4b 01 	lds	r14, 0x014B	; 0x80014b <internal_response_buffer_rpos>
					{ // internal response present
						// Add response to buffers... This might look too complicated, but handles also partial reads properly (e.g. responses could be read byte by byte)
						curlen16 = internal_response_buffer_len-internal_response_buffer_rpos; // count of unsent bytes from internal response buffer
    17de:	8e 2d       	mov	r24, r14
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0f 2d       	mov	r16, r15
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	08 1b       	sub	r16, r24
    17e8:	19 0b       	sbc	r17, r25
    17ea:	18 01       	movw	r2, r16
						if (curlen16 > MessageHeader.TransferSize)
    17ec:	41 2c       	mov	r4, r1
    17ee:	51 2c       	mov	r5, r1
    17f0:	42 15       	cp	r20, r2
    17f2:	53 05       	cpc	r21, r3
    17f4:	64 05       	cpc	r22, r4
    17f6:	75 05       	cpc	r23, r5
    17f8:	20 f4       	brcc	.+8      	; 0x1802 <main+0x616>
    17fa:	8a 01       	movw	r16, r20
							curlen16 = MessageHeader.TransferSize;
    17fc:	1a 01       	movw	r2, r20
    17fe:	41 2c       	mov	r4, r1
    1800:	51 2c       	mov	r5, r1
    1802:	cb 57       	subi	r28, 0x7B	; 123
						
						MessageHeader.TransferSize = curlen16;
    1804:	df 4f       	sbci	r29, 0xFF	; 255
    1806:	28 82       	st	Y, r2
    1808:	39 82       	std	Y+1, r3	; 0x01
    180a:	4a 82       	std	Y+2, r4	; 0x02
    180c:	5b 82       	std	Y+3, r5	; 0x03
    180e:	c5 58       	subi	r28, 0x85	; 133
    1810:	d0 40       	sbci	r29, 0x00	; 0
    1812:	bc 01       	movw	r22, r24
						memcpy(readbuffer, &(internal_response_buffer[internal_response_buffer_rpos]), curlen16);
    1814:	62 5a       	subi	r22, 0xA2	; 162
    1816:	7a 4f       	sbci	r23, 0xFA	; 250
    1818:	a8 01       	movw	r20, r16
    181a:	8f e4       	ldi	r24, 0x4F	; 79
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 87 1a 	call	0x350e	; 0x350e <memcpy>
    1822:	0e 0d       	add	r16, r14
						
						internal_response_buffer_rpos += curlen16;
    1824:	00 93 4b 01 	sts	0x014B, r16	; 0x80014b <internal_response_buffer_rpos>
    1828:	81 e0       	ldi	r24, 0x01	; 1
						lastmessage = (internal_response_buffer_rpos >= internal_response_buffer_len);
    182a:	0f 15       	cp	r16, r15
    182c:	08 f4       	brcc	.+2      	; 0x1830 <main+0x644>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	c1 57       	subi	r28, 0x71	; 113
    1832:	df 4f       	sbci	r29, 0xFF	; 255
    1834:	88 83       	st	Y, r24
    1836:	cf 58       	subi	r28, 0x8F	; 143
    1838:	d0 40       	sbci	r29, 0x00	; 0
    183a:	0f 15       	cp	r16, r15
						if (lastmessage)
    183c:	20 f0       	brcs	.+8      	; 0x1846 <main+0x65a>
    183e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <internal_response_buffer_len>
						{
							internal_response_buffer_len = 0; // Mark internal response as "sent"
    1842:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <internal_response_buffer_rpos>
							internal_response_buffer_rpos = 0;
    1846:	c1 57       	subi	r28, 0x71	; 113
					}
					else
					{ // no internal response present, read from device!
						MessageHeader.TransferSize = GetNextMessage(readbuffer, curlen16, TMC_InLastMessageComplete, &lastmessage, tmc_gpib_read_timedout);
					}
					TMC_InLastMessageComplete = lastmessage;
    1848:	df 4f       	sbci	r29, 0xFF	; 255
    184a:	88 81       	ld	r24, Y
    184c:	cf 58       	subi	r28, 0x8F	; 143
    184e:	d0 40       	sbci	r29, 0x00	; 0
    1850:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>
    1854:	c7 57       	subi	r28, 0x77	; 119

					MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = lastmessage;
    1856:	df 4f       	sbci	r29, 0xFF	; 255
    1858:	88 83       	st	Y, r24
    185a:	c9 58       	subi	r28, 0x89	; 137
    185c:	d0 40       	sbci	r29, 0x00	; 0
    185e:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
					if (!IsTMCBulkINReset)
    1862:	88 23       	and	r24, r24
    1864:	41 f1       	breq	.+80     	; 0x18b6 <main+0x6ca>
    1866:	60 92 e9 00 	sts	0x00E9, r6	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    186a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    186e:	8e 77       	andi	r24, 0x7E	; 126
    1870:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1874:	cb 57       	subi	r28, 0x7B	; 123
					/* Also in case of a timeout, the host does not expire a Bulk IN IRP, so we still need to commit an empty endpoint to retire the IRP */
					Endpoint_SelectEndpoint(TMC_IN_EPADDR);
					Endpoint_ClearIN();

					/* commit zero length package in case the last package was exactly the size of the endpoint (Lufa does not handle this) */
					if ( ((MessageHeader.TransferSize + sizeof(TMC_MessageHeader_t)) & (TMC_IO_EPSIZE-1)) == 0)
    1876:	df 4f       	sbci	r29, 0xFF	; 255
    1878:	88 81       	ld	r24, Y
    187a:	99 81       	ldd	r25, Y+1	; 0x01
    187c:	aa 81       	ldd	r26, Y+2	; 0x02
    187e:	bb 81       	ldd	r27, Y+3	; 0x03
    1880:	c5 58       	subi	r28, 0x85	; 133
    1882:	d0 40       	sbci	r29, 0x00	; 0
    1884:	0c 96       	adiw	r24, 0x0c	; 12
    1886:	a1 1d       	adc	r26, r1
    1888:	b1 1d       	adc	r27, r1
    188a:	8f 73       	andi	r24, 0x3F	; 63
    188c:	99 27       	eor	r25, r25
    188e:	aa 27       	eor	r26, r26
    1890:	bb 27       	eor	r27, r27
    1892:	89 2b       	or	r24, r25
    1894:	8a 2b       	or	r24, r26
    1896:	8b 2b       	or	r24, r27
    1898:	39 f4       	brne	.+14     	; 0x18a8 <main+0x6bc>
					{ 
						Endpoint_WaitUntilReady(); // wait until an endpoint buffer got free
    189a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <Endpoint_WaitUntilReady>
    189e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18a2:	8e 77       	andi	r24, 0x7E	; 126
    18a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
						Endpoint_ClearIN();
					}
					
					if (IsTMCBulkINReset)
    18a8:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>
    18ac:	88 23       	and	r24, r24
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <main+0x6c6>
    18b0:	91 cd       	rjmp	.-1246   	; 0x13d4 <main+0x1e8>
					{
						TMC_resetstates();
    18b2:	83 dc       	rcall	.-1786   	; 0x11ba <TMC_resetstates>
    18b4:	8f cd       	rjmp	.-1250   	; 0x13d4 <main+0x1e8>
    18b6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <CurrentTransferTag>
}

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
    18ba:	ce 57       	subi	r28, 0x7E	; 126
    18bc:	df 4f       	sbci	r29, 0xFF	; 255
    18be:	88 83       	st	Y, r24
    18c0:	c2 58       	subi	r28, 0x82	; 130
    18c2:	d0 40       	sbci	r29, 0x00	; 0
    18c4:	80 95       	com	r24
	MessageHeader->InverseTag = ~CurrentTransferTag;
    18c6:	cd 57       	subi	r28, 0x7D	; 125
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	88 83       	st	Y, r24
    18cc:	c3 58       	subi	r28, 0x83	; 131
    18ce:	d0 40       	sbci	r29, 0x00	; 0
    18d0:	60 92 e9 00 	sts	0x00E9, r6	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18d4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <Endpoint_WaitUntilReady>
                            uint16_t Length)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer);
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    18d8:	81 11       	cpse	r24, r1
    18da:	22 c0       	rjmp	.+68     	; 0x1920 <main+0x734>
    18dc:	4c e0       	ldi	r20, 0x0C	; 12
    18de:	e4 2e       	mov	r14, r20
    18e0:	f1 2c       	mov	r15, r1
    18e2:	8e 01       	movw	r16, r28
    18e4:	0f 57       	subi	r16, 0x7F	; 127
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18ec:	85 ff       	sbrs	r24, 5
	  return ErrorCode;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    18ee:	0c c0       	rjmp	.+24     	; 0x1908 <main+0x71c>
    18f0:	c8 01       	movw	r24, r16
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			Endpoint_Write_8(*DataStream++);
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	f8 01       	movw	r30, r16
    18f6:	20 81       	ld	r18, Z
    18f8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18fc:	f1 e0       	ldi	r31, 0x01	; 1
			Length--;
    18fe:	ef 1a       	sub	r14, r31
    1900:	f1 08       	sbc	r15, r1
    1902:	71 f0       	breq	.+28     	; 0x1920 <main+0x734>
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	while (Length)
    1904:	8c 01       	movw	r16, r24
	{
		if (!(Endpoint_IsReadWriteAllowed()))
		{
			Endpoint_ClearIN();

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1906:	f0 cf       	rjmp	.-32     	; 0x18e8 <main+0x6fc>
    1908:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    190c:	8e 77       	andi	r24, 0x7E	; 126
    190e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1912:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <Endpoint_WaitUntilReady>
    1916:	81 11       	cpse	r24, r1
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <main+0x734>
    191a:	c8 01       	movw	r24, r16
    191c:	8c 01       	movw	r16, r24
    191e:	e4 cf       	rjmp	.-56     	; 0x18e8 <main+0x6fc>
    1920:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <IsTMCBulkINReset>

					MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = lastmessage;
					if (!IsTMCBulkINReset)
						WriteTMCHeader(&MessageHeader);					

					if (!IsTMCBulkINReset)
    1924:	81 11       	cpse	r24, r1
    1926:	9f cf       	rjmp	.-194    	; 0x1866 <main+0x67a>
    1928:	cb 57       	subi	r28, 0x7B	; 123
					{
						Endpoint_Write_Stream_LE_quick(readbuffer, MessageHeader.TransferSize, TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t), TMC_IO_EPSIZE);
    192a:	df 4f       	sbci	r29, 0xFF	; 255
    192c:	08 81       	ld	r16, Y
    192e:	19 81       	ldd	r17, Y+1	; 0x01
    1930:	c5 58       	subi	r28, 0x85	; 133
    1932:	d0 40       	sbci	r29, 0x00	; 0
    1934:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <Endpoint_WaitUntilReady>
{
	uint8_t* DataStream      = ((uint8_t*)Buffer);
	uint8_t  ErrorCode;
	uint16_t chunklength = firstchunksize;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1938:	81 11       	cpse	r24, r1
    193a:	95 cf       	rjmp	.-214    	; 0x1866 <main+0x67a>
    193c:	24 e3       	ldi	r18, 0x34	; 52
    193e:	c2 2e       	mov	r12, r18
    1940:	d1 2c       	mov	r13, r1
    1942:	3f e4       	ldi	r19, 0x4F	; 79
    1944:	e3 2e       	mov	r14, r19
    1946:	31 e0       	ldi	r19, 0x01	; 1
    1948:	f3 2e       	mov	r15, r19
    194a:	01 15       	cp	r16, r1
	  return ErrorCode;

	while (Length)
    194c:	11 05       	cpc	r17, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <main+0x766>
    1950:	8a cf       	rjmp	.-236    	; 0x1866 <main+0x67a>
    1952:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1956:	85 ff       	sbrs	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <main+0x796>
    195a:	c8 01       	movw	r24, r16
    195c:	c0 16       	cp	r12, r16
    195e:	d1 06       	cpc	r13, r17
    1960:	08 f4       	brcc	.+2      	; 0x1964 <main+0x778>
    1962:	c6 01       	movw	r24, r12
    1964:	08 1b       	sub	r16, r24
		}
		else
		{
			if (chunklength > Length)
				chunklength = Length;
			Length -= chunklength;
    1966:	19 0b       	sbc	r17, r25
    1968:	f7 01       	movw	r30, r14
    196a:	e8 0e       	add	r14, r24
    196c:	f9 1e       	adc	r15, r25
    196e:	81 91       	ld	r24, Z+
			while (chunklength--)
				Endpoint_Write_8(*DataStream++);
    1970:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1974:	ee 16       	cp	r14, r30
		else
		{
			if (chunklength > Length)
				chunklength = Length;
			Length -= chunklength;
			while (chunklength--)
    1976:	ff 06       	cpc	r15, r31
    1978:	d1 f7       	brne	.-12     	; 0x196e <main+0x782>
    197a:	90 e4       	ldi	r25, 0x40	; 64
				Endpoint_Write_8(*DataStream++);
			chunklength = chunksize;
    197c:	c9 2e       	mov	r12, r25
    197e:	d1 2c       	mov	r13, r1
    1980:	e4 cf       	rjmp	.-56     	; 0x194a <main+0x75e>
    1982:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1986:	8e 77       	andi	r24, 0x7E	; 126
    1988:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			//USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    198c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <Endpoint_WaitUntilReady>
    1990:	88 23       	and	r24, r24
    1992:	d9 f2       	breq	.-74     	; 0x194a <main+0x75e>
    1994:	68 cf       	rjmp	.-304    	; 0x1866 <main+0x67a>
							internal_response_buffer_rpos = 0;
						}
					}
					else
					{ // no internal response present, read from device!
						MessageHeader.TransferSize = GetNextMessage(readbuffer, curlen16, TMC_InLastMessageComplete, &lastmessage, tmc_gpib_read_timedout);
    1996:	00 ec       	ldi	r16, 0xC0	; 192
    1998:	11 e0       	ldi	r17, 0x01	; 1
    199a:	9e 01       	movw	r18, r28
    199c:	21 57       	subi	r18, 0x71	; 113
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <TMC_InLastMessageComplete>
    19a4:	bc 01       	movw	r22, r24
    19a6:	8f e4       	ldi	r24, 0x4F	; 79
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	40 db       	rcall	.-2432   	; 0x102c <GetNextMessage>
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	cb 57       	subi	r28, 0x7B	; 123
    19b2:	df 4f       	sbci	r29, 0xFF	; 255
    19b4:	88 83       	st	Y, r24
    19b6:	99 83       	std	Y+1, r25	; 0x01
    19b8:	aa 83       	std	Y+2, r26	; 0x02
    19ba:	bb 83       	std	Y+3, r27	; 0x03
    19bc:	c5 58       	subi	r28, 0x85	; 133
    19be:	d0 40       	sbci	r29, 0x00	; 0
    19c0:	42 cf       	rjmp	.-380    	; 0x1846 <main+0x65a>
    19c2:	84 ef       	ldi	r24, 0xF4	; 244
					TMC_LastMessageComplete = lastmessage;
					break;
				case TMC_MESSAGEID_DEV_DEP_MSG_IN:
					Endpoint_ClearOUT();
					
					curlen16 = sizeof(readbuffer);// -1;
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	04 cf       	rjmp	.-504    	; 0x17d0 <main+0x5e4>
    19c8:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <tmc_serial_string>
	if (eeprom_read_byte((const uint8_t *)106) == 0x01) // check if serial string shortening is on
	{
		uint16_t len;
		
		len = (tmc_serial_string.Header.Size - sizeof(USB_Descriptor_Header_t)) >> 1;
		if (len > 20)
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 97       	sbiw	r24, 0x02	; 2
    19d0:	8a 97       	sbiw	r24, 0x2a	; 42
    19d2:	08 f4       	brcc	.+2      	; 0x19d6 <main+0x7ea>
    19d4:	77 cc       	rjmp	.-1810   	; 0x12c4 <main+0xd8>
    19d6:	8a e2       	ldi	r24, 0x2A	; 42
		{
			len = 20;
			tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
    19d8:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <tmc_serial_string>
    19dc:	73 cc       	rjmp	.-1818   	; 0x12c4 <main+0xd8>
    19de:	0b e6       	ldi	r16, 0x6B	; 107
				eeprom_update_if_changed(1+i, *pdat++);
			}
		}
		else
		{ /* received NO string over GPIB => Check, if the GPIB addr matches the one in eeprom, then report EEProm string! */
			if (prevaddr == gpib_addr)
    19e0:	15 e0       	ldi	r17, 0x05	; 5
    19e2:	81 e0       	ldi	r24, 0x01	; 1

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
				{
					*pdat++ = eeprom_read_byte((uint8_t*)(1+i));
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 01       	movw	r18, r24
    19e8:	2b 56       	subi	r18, 0x6B	; 107
    19ea:	35 40       	sbci	r19, 0x05	; 5
    19ec:	79 01       	movw	r14, r18
    19ee:	c7 01       	movw	r24, r14
    19f0:	80 0f       	add	r24, r16
    19f2:	91 1f       	adc	r25, r17
    19f4:	0e 94 90 1a 	call	0x3520	; 0x3520 <eeprom_read_byte>
    19f8:	f8 01       	movw	r30, r16
    19fa:	81 93       	st	Z+, r24
    19fc:	8f 01       	movw	r16, r30
    19fe:	f5 e0       	ldi	r31, 0x05	; 5
			{
				uint8_t *pdat, i;

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
    1a00:	01 3d       	cpi	r16, 0xD1	; 209
    1a02:	1f 07       	cpc	r17, r31
    1a04:	a1 f7       	brne	.-24     	; 0x19ee <main+0x802>
    1a06:	57 cc       	rjmp	.-1874   	; 0x12b6 <main+0xca>
    1a08:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <gpib_addr>
		if (identifyGpibDevice())
		{ /* received a string over GPIB => Store it in EEPROM, if it changed */
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 ce 04 	call	0x99c	; 0x99c <eeprom_update_if_changed>
    1a14:	0b e6       	ldi	r16, 0x6B	; 107
    1a16:	15 e0       	ldi	r17, 0x05	; 5
    1a18:	f8 01       	movw	r30, r16
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
			{
				eeprom_update_if_changed(1+i, *pdat++);
    1a1a:	61 91       	ld	r22, Z+
    1a1c:	8f 01       	movw	r16, r30
    1a1e:	cf 01       	movw	r24, r30
    1a20:	8b 56       	subi	r24, 0x6B	; 107
    1a22:	95 40       	sbci	r25, 0x05	; 5
    1a24:	0e 94 ce 04 	call	0x99c	; 0x99c <eeprom_update_if_changed>
    1a28:	f5 e0       	ldi	r31, 0x05	; 5
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
    1a2a:	01 3d       	cpi	r16, 0xD1	; 209
    1a2c:	1f 07       	cpc	r17, r31
    1a2e:	a1 f7       	brne	.-24     	; 0x1a18 <main+0x82c>
    1a30:	42 cc       	rjmp	.-1916   	; 0x12b6 <main+0xca>

00001a32 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	*DescriptorMemorySpace = MEMSPACE_FLASH;
    1a32:	f9 01       	movw	r30, r18
    1a34:	10 82       	st	Z, r1

	switch (DescriptorType)
    1a36:	69 2f       	mov	r22, r25
    1a38:	77 27       	eor	r23, r23
    1a3a:	62 30       	cpi	r22, 0x02	; 2
    1a3c:	71 05       	cpc	r23, r1
    1a3e:	49 f1       	breq	.+82     	; 0x1a92 <CALLBACK_USB_GetDescriptor+0x60>
    1a40:	63 30       	cpi	r22, 0x03	; 3
    1a42:	71 05       	cpc	r23, r1
    1a44:	99 f0       	breq	.+38     	; 0x1a6c <CALLBACK_USB_GetDescriptor+0x3a>
    1a46:	61 30       	cpi	r22, 0x01	; 1
    1a48:	71 05       	cpc	r23, r1
    1a4a:	41 f0       	breq	.+16     	; 0x1a5c <CALLBACK_USB_GetDescriptor+0x2a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
			                        uint8_t* const DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    1a54:	fa 01       	movw	r30, r20
    1a56:	31 83       	std	Z+1, r19	; 0x01
    1a58:	20 83       	st	Z, r18
	return Size;
}
    1a5a:	08 95       	ret

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1a5c:	82 e1       	ldi	r24, 0x12	; 18
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1a60:	21 e0       	ldi	r18, 0x01	; 1
    1a62:	31 e0       	ldi	r19, 0x01	; 1
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    1a64:	fa 01       	movw	r30, r20
    1a66:	31 83       	std	Z+1, r19	; 0x01
    1a68:	20 83       	st	Z, r18
	return Size;
}
    1a6a:	08 95       	ret
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    1a6c:	99 27       	eor	r25, r25
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	e9 f0       	breq	.+58     	; 0x1aae <CALLBACK_USB_GetDescriptor+0x7c>
    1a74:	b0 f0       	brcs	.+44     	; 0x1aa2 <CALLBACK_USB_GetDescriptor+0x70>
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	91 05       	cpc	r25, r1
    1a7a:	f9 f0       	breq	.+62     	; 0x1aba <CALLBACK_USB_GetDescriptor+0x88>
    1a7c:	03 97       	sbiw	r24, 0x03	; 3
    1a7e:	31 f7       	brne	.-52     	; 0x1a4c <CALLBACK_USB_GetDescriptor+0x1a>
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
					Size = tmc_serial_string.Header.Size;
    1a80:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <tmc_serial_string>
    1a84:	90 e0       	ldi	r25, 0x00	; 0
					*DescriptorMemorySpace = MEMSPACE_RAM;
    1a86:	62 e0       	ldi	r22, 0x02	; 2
    1a88:	f9 01       	movw	r30, r18
    1a8a:	60 83       	st	Z, r22
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
    1a8c:	2b e6       	ldi	r18, 0x6B	; 107
    1a8e:	35 e0       	ldi	r19, 0x05	; 5
					Size = tmc_serial_string.Header.Size;
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
    1a90:	e1 cf       	rjmp	.-62     	; 0x1a54 <CALLBACK_USB_GetDescriptor+0x22>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    1a92:	87 e2       	ldi	r24, 0x27	; 39
    1a94:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    1a96:	2a ed       	ldi	r18, 0xDA	; 218
    1a98:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    1a9a:	fa 01       	movw	r30, r20
    1a9c:	31 83       	std	Z+1, r19	; 0x01
    1a9e:	20 83       	st	Z, r18
	return Size;
}
    1aa0:	08 95       	ret
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1aa2:	e6 ed       	ldi	r30, 0xD6	; 214
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	84 91       	lpm	r24, Z
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
    1aaa:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
    1aac:	d3 cf       	rjmp	.-90     	; 0x1a54 <CALLBACK_USB_GetDescriptor+0x22>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1aae:	ee eb       	ldi	r30, 0xBE	; 190
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	84 91       	lpm	r24, Z
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
    1ab6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
    1ab8:	cd cf       	rjmp	.-102    	; 0x1a54 <CALLBACK_USB_GetDescriptor+0x22>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1aba:	ec ea       	ldi	r30, 0xAC	; 172
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	84 91       	lpm	r24, Z
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1ac2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    1ac4:	c7 cf       	rjmp	.-114    	; 0x1a54 <CALLBACK_USB_GetDescriptor+0x22>

00001ac6 <is_timedout>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ac6:	85 e3       	ldi	r24, 0x35	; 53
    1ac8:	8a 95       	dec	r24
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <is_timedout+0x2>
    1acc:	00 00       	nop
}

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
    1ace:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <timeout_val>
    1ad2:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <timeout_val+0x1>
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	39 f0       	breq	.+14     	; 0x1ae8 <is_timedout+0x22>
		return true;
		
	timeout_val--;
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <timeout_val+0x1>
    1ae0:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <timeout_val>
	return false;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	08 95       	ret

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
		return true;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
		
	timeout_val--;
	return false;
}
    1aea:	08 95       	ret

00001aec <__vector_23>:
	timer0_100mscounter = 0;
}


ISR (TIMER0_OVF_vect)
{
    1aec:	1f 92       	push	r1
    1aee:	0f 92       	push	r0
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	0f 92       	push	r0
    1af4:	11 24       	eor	r1, r1
    1af6:	8f 93       	push	r24
    1af8:	9f 93       	push	r25
	timer0_div++;
    1afa:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <timer0_div>
    1afe:	8f 5f       	subi	r24, 0xFF	; 255
    1b00:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <timer0_div>
	timer0_ticked = true;
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	90 93 57 05 	sts	0x0557, r25	; 0x800557 <timer0_ticked>
	if (timer0_div >= 6) /* are 100ms passed? */
    1b0a:	86 30       	cpi	r24, 0x06	; 6
    1b0c:	98 f0       	brcs	.+38     	; 0x1b34 <__vector_23+0x48>
	{
		timer0_100mscounter++;
    1b0e:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <timer0_100mscounter>
    1b12:	8f 5f       	subi	r24, 0xFF	; 255
    1b14:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <timer0_100mscounter>
		timer0_div = 0;
    1b18:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <timer0_div>
		
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
    1b1c:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <s_gpib_transaction_active>
    1b20:	81 11       	cpse	r24, r1
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <__vector_23+0x48>
		{
			if ( !(DDRF & (1<<6)) ) /* is ATN line tristated? */
    1b24:	86 99       	sbic	0x10, 6	; 16
    1b26:	0d c0       	rjmp	.+26     	; 0x1b42 <__vector_23+0x56>
			{
				if (!ATN_STATE ) /* is ATN LOW? This can only happen if no GPIB device is connected/powered */
    1b28:	7e 99       	sbic	0x0f, 6	; 15
    1b2a:	0b c0       	rjmp	.+22     	; 0x1b42 <__vector_23+0x56>
				{
					if (s_gpib_disconnect_counter >= 2)
    1b2c:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <s_gpib_disconnect_counter>
    1b30:	82 30       	cpi	r24, 0x02	; 2
    1b32:	80 f0       	brcs	.+32     	; 0x1b54 <__vector_23+0x68>
			{
				s_gpib_disconnect_counter = 0;
			}
		}
	}
}
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	0f 90       	pop	r0
    1b3e:	1f 90       	pop	r1
    1b40:	18 95       	reti
						s_gpib_disconnect_counter++;
					}
				}
				else
				{ /* device is connected */
					s_gpib_disconnect_counter = 0;
    1b42:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <s_gpib_disconnect_counter>
			{
				s_gpib_disconnect_counter = 0;
			}
		}
	}
}
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	0f 90       	pop	r0
    1b50:	1f 90       	pop	r1
    1b52:	18 95       	reti
					{ /* after 100-200ms with ATN low, assume, that there is no GPIB device connected */
						s_device_state = GPIB_DEVICE_CONNECTSTATE_DISCONNECTED;
					}
					else
					{
						s_gpib_disconnect_counter++;
    1b54:	8f 5f       	subi	r24, 0xFF	; 255
    1b56:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <s_gpib_disconnect_counter>
    1b5a:	ec cf       	rjmp	.-40     	; 0x1b34 <__vector_23+0x48>

00001b5c <gpib_init>:
 **********************************************************************************************************/

void gpib_init(void)
{
	// PB5 = REN
	DDRD  = 0x00;
    1b5c:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
    1b5e:	1b b8       	out	0x0b, r1	; 11
	PORTB &= ~((1<<4) | (1<<5) | (1<<6));
    1b60:	85 b1       	in	r24, 0x05	; 5
    1b62:	8f 78       	andi	r24, 0x8F	; 143
    1b64:	85 b9       	out	0x05, r24	; 5
	DDRB  = (DDRB & (~((1<<4) | (1<<6)))) | (1<<5);
    1b66:	84 b1       	in	r24, 0x04	; 4
    1b68:	8f 78       	andi	r24, 0x8F	; 143
    1b6a:	80 62       	ori	r24, 0x20	; 32
    1b6c:	84 b9       	out	0x04, r24	; 4
	PORTC &= ~((1<<6) | (1<<7));
    1b6e:	88 b1       	in	r24, 0x08	; 8
    1b70:	8f 73       	andi	r24, 0x3F	; 63
    1b72:	88 b9       	out	0x08, r24	; 8
	DDRC  &= ~((1<<6) | (1<<7));
    1b74:	87 b1       	in	r24, 0x07	; 7
    1b76:	8f 73       	andi	r24, 0x3F	; 63
    1b78:	87 b9       	out	0x07, r24	; 7
	PORTE &= ~(1<<2);
    1b7a:	72 98       	cbi	0x0e, 2	; 14
	DDRE  &= ~(1<<2);
    1b7c:	6a 98       	cbi	0x0d, 2	; 13
	PORTF &= ~((1<<6) | (1<<7));
    1b7e:	81 b3       	in	r24, 0x11	; 17
    1b80:	8f 73       	andi	r24, 0x3F	; 63
    1b82:	81 bb       	out	0x11, r24	; 17
	DDRF  &= ~((1<<6) | (1<<7));
    1b84:	80 b3       	in	r24, 0x10	; 16
    1b86:	8f 73       	andi	r24, 0x3F	; 63
    1b88:	80 bb       	out	0x10, r24	; 16


	s_gpib_transaction_active = false;
    1b8a:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
	s_gpib_disconnect_counter = 0;
    1b8e:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <s_gpib_disconnect_counter>



void gpib_interface_clear(void)
{
	NRFD_HIGH;
    1b92:	3e 98       	cbi	0x07, 6	; 7
	IFC_LOW; /* interface clear */
    1b94:	6a 9a       	sbi	0x0d, 2	; 13
    1b96:	8f ed       	ldi	r24, 0xDF	; 223
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <gpib_init+0x3e>
    1b9e:	00 c0       	rjmp	.+0      	; 0x1ba0 <gpib_init+0x44>
    1ba0:	00 00       	nop
	_delay_us(120);
	IFC_HIGH; /* interface clear */
    1ba2:	6a 98       	cbi	0x0d, 2	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ba4:	8f e3       	ldi	r24, 0x3F	; 63
    1ba6:	9c e9       	ldi	r25, 0x9C	; 156
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <gpib_init+0x4c>
    1bac:	00 c0       	rjmp	.+0      	; 0x1bae <gpib_init+0x52>
    1bae:	00 00       	nop
	_delay_ms(10);
	s_gpib_transaction_active = false;
    1bb0:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>

char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void timer_init(void)
{
	TCCR0B = 5; // Prescaler 1024 = 15625 Hz
    1bb4:	85 e0       	ldi	r24, 0x05	; 5
    1bb6:	85 bd       	out	0x25, r24	; 37
	// Enable overflow interrupt
	TIMSK0 |= (1<<TOIE0);
    1bb8:	ee e6       	ldi	r30, 0x6E	; 110
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	81 60       	ori	r24, 0x01	; 1
    1bc0:	80 83       	st	Z, r24
	timer0_div = 0;
    1bc2:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <timer0_div>
	timer0_100mscounter = 0;
    1bc6:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <timer0_100mscounter>
    1bca:	08 95       	ret

00001bcc <gpib_recover>:
	}
}

void gpib_recover(void)
{
	gpib_init();
    1bcc:	c7 cf       	rjmp	.-114    	; 0x1b5c <gpib_init>

00001bce <gpib_localLockout>:
	s_gpib_transaction_active = false;		
	return status;
}

bool gpib_localLockout(gpibtimeout_t ptimeoutfunc)
{
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1bd4:	86 9b       	sbis	0x10, 6	; 16
    1bd6:	2e c0       	rjmp	.+92     	; 0x1c34 <gpib_localLockout+0x66>
			_delay_us(220);
		ATN_LOW;
    1bd8:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1bda:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1bdc:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1bde:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1be0:	81 e1       	ldi	r24, 0x11	; 17
    1be2:	8a b9       	out	0x0a, r24	; 10
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <gpib_localLockout+0x1c>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1be6:	81 11       	cpse	r24, r1
    1be8:	1e c0       	rjmp	.+60     	; 0x1c26 <gpib_localLockout+0x58>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1bea:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1bee:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1bf6:	36 9b       	sbis	0x06, 6	; 6
    1bf8:	f6 cf       	rjmp	.-20     	; 0x1be6 <gpib_localLockout+0x18>

	if (!timedout)
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <gpib_localLockout+0x58>
	{
		DAV_LOW;
    1bfe:	26 9a       	sbi	0x04, 6	; 4
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <gpib_localLockout+0x38>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1c02:	81 11       	cpse	r24, r1
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <gpib_localLockout+0x56>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1c06:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1c0a:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1c0e:	fe 01       	movw	r30, r28
    1c10:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1c12:	37 9b       	sbis	0x06, 7	; 6
    1c14:	f6 cf       	rjmp	.-20     	; 0x1c02 <gpib_localLockout+0x34>
		DAV_HIGH;
    1c16:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1c18:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <gpib_localLockout+0x5a>

	timedout = gpib_cmd_LLO(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	return timedout;
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    1c24:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1c26:	1a b8       	out	0x0a, r1	; 10
	}
}

void gpib_recover(void)
{
	gpib_init();
    1c28:	99 df       	rcall	.-206    	; 0x1b5c <gpib_init>
    1c2a:	98 df       	rcall	.-208    	; 0x1b5c <gpib_init>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1

	timedout = gpib_cmd_LLO(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	return timedout;
}
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c34:	8f e6       	ldi	r24, 0x6F	; 111
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <gpib_localLockout+0x6a>
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <gpib_localLockout+0x70>
    1c3e:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    1c40:	86 9a       	sbi	0x10, 6	; 16
    1c42:	e7 e1       	ldi	r30, 0x17	; 23
    1c44:	f1 e0       	ldi	r31, 0x01	; 1
    1c46:	31 97       	sbiw	r30, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <gpib_localLockout+0x78>
    1c4a:	00 c0       	rjmp	.+0      	; 0x1c4c <gpib_localLockout+0x7e>
    1c4c:	00 00       	nop
    1c4e:	c5 cf       	rjmp	.-118    	; 0x1bda <gpib_localLockout+0xc>

00001c50 <gpib_cmd_LAG>:
{
	return gpib_tx_quick(dat, iscommand, ptimeoutfunc, true);
}

static bool gpib_cmd_LAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	18 2f       	mov	r17, r24
    1c58:	eb 01       	movw	r28, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
    1c5a:	8f 71       	andi	r24, 0x1F	; 31
    1c5c:	80 62       	ori	r24, 0x20	; 32

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1c5e:	86 9b       	sbis	0x10, 6	; 16
    1c60:	5c c0       	rjmp	.+184    	; 0x1d1a <gpib_cmd_LAG+0xca>
			_delay_us(220);
		ATN_LOW;
    1c62:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1c64:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1c66:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1c68:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1c6a:	8a b9       	out	0x0a, r24	; 10
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <gpib_cmd_LAG+0x22>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1c6e:	81 11       	cpse	r24, r1
    1c70:	21 c0       	rjmp	.+66     	; 0x1cb4 <gpib_cmd_LAG+0x64>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1c72:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1c76:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1c7e:	36 9b       	sbis	0x06, 6	; 6
    1c80:	f6 cf       	rjmp	.-20     	; 0x1c6e <gpib_cmd_LAG+0x1e>

	if (!timedout)
    1c82:	81 11       	cpse	r24, r1
    1c84:	17 c0       	rjmp	.+46     	; 0x1cb4 <gpib_cmd_LAG+0x64>
	{
		DAV_LOW;
    1c86:	26 9a       	sbi	0x04, 6	; 4
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <gpib_cmd_LAG+0x3e>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	12 c0       	rjmp	.+36     	; 0x1cb2 <gpib_cmd_LAG+0x62>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1c8e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1c92:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1c96:	fe 01       	movw	r30, r28
    1c98:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1c9a:	37 9b       	sbis	0x06, 7	; 6
    1c9c:	f6 cf       	rjmp	.-20     	; 0x1c8a <gpib_cmd_LAG+0x3a>
		DAV_HIGH;
    1c9e:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1ca0:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	08 c0       	rjmp	.+16     	; 0x1cb6 <gpib_cmd_LAG+0x66>
	if (addr & 0xe0)
    1ca6:	10 7e       	andi	r17, 0xE0	; 224
    1ca8:	51 f4       	brne	.+20     	; 0x1cbe <gpib_cmd_LAG+0x6e>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
	}
	return result;
}
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	08 95       	ret
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    1cb2:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1cb4:	1a b8       	out	0x0a, r1	; 10
	}
}

void gpib_recover(void)
{
	gpib_init();
    1cb6:	52 df       	rcall	.-348    	; 0x1b5c <gpib_init>
    1cb8:	81 e0       	ldi	r24, 0x01	; 1

static bool gpib_cmd_LAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
	if (addr & 0xe0)
    1cba:	10 7e       	andi	r17, 0xE0	; 224
    1cbc:	b1 f3       	breq	.-20     	; 0x1caa <gpib_cmd_LAG+0x5a>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1cbe:	86 9b       	sbis	0x10, 6	; 16
    1cc0:	3a c0       	rjmp	.+116    	; 0x1d36 <gpib_cmd_LAG+0xe6>
			_delay_us(220);
		ATN_LOW;
    1cc2:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1cc4:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1cc6:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1cc8:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1cca:	80 e6       	ldi	r24, 0x60	; 96
    1ccc:	8a b9       	out	0x0a, r24	; 10
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <gpib_cmd_LAG+0x84>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	1c c0       	rjmp	.+56     	; 0x1d0c <gpib_cmd_LAG+0xbc>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1cd4:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1cd8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1cdc:	fe 01       	movw	r30, r28
    1cde:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1ce0:	36 9b       	sbis	0x06, 6	; 6
    1ce2:	f6 cf       	rjmp	.-20     	; 0x1cd0 <gpib_cmd_LAG+0x80>

	if (!timedout)
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	12 c0       	rjmp	.+36     	; 0x1d0c <gpib_cmd_LAG+0xbc>
	{
		DAV_LOW;
    1ce8:	26 9a       	sbi	0x04, 6	; 4
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <gpib_cmd_LAG+0xa0>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1cec:	81 11       	cpse	r24, r1
    1cee:	0d c0       	rjmp	.+26     	; 0x1d0a <gpib_cmd_LAG+0xba>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1cf0:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1cf4:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1cfc:	37 9b       	sbis	0x06, 7	; 6
    1cfe:	f6 cf       	rjmp	.-20     	; 0x1cec <gpib_cmd_LAG+0x9c>
		DAV_HIGH;
    1d00:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1d02:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1d04:	88 23       	and	r24, r24
    1d06:	89 f2       	breq	.-94     	; 0x1caa <gpib_cmd_LAG+0x5a>
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <gpib_cmd_LAG+0xbe>
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    1d0a:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    1d0c:	1a b8       	out	0x0a, r1	; 10
    1d0e:	26 df       	rcall	.-436    	; 0x1b5c <gpib_init>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
	}
	return result;
}
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	08 95       	ret
    1d1a:	ef e6       	ldi	r30, 0x6F	; 111
    1d1c:	f3 e0       	ldi	r31, 0x03	; 3
    1d1e:	31 97       	sbiw	r30, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <gpib_cmd_LAG+0xce>
    1d22:	00 c0       	rjmp	.+0      	; 0x1d24 <gpib_cmd_LAG+0xd4>
    1d24:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    1d26:	86 9a       	sbi	0x10, 6	; 16
    1d28:	e7 e1       	ldi	r30, 0x17	; 23
    1d2a:	f1 e0       	ldi	r31, 0x01	; 1
    1d2c:	31 97       	sbiw	r30, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <gpib_cmd_LAG+0xdc>
    1d30:	00 c0       	rjmp	.+0      	; 0x1d32 <gpib_cmd_LAG+0xe2>
    1d32:	00 00       	nop
    1d34:	97 cf       	rjmp	.-210    	; 0x1c64 <gpib_cmd_LAG+0x14>
    1d36:	8f e6       	ldi	r24, 0x6F	; 111
    1d38:	93 e0       	ldi	r25, 0x03	; 3
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <gpib_cmd_LAG+0xea>
    1d3e:	00 c0       	rjmp	.+0      	; 0x1d40 <gpib_cmd_LAG+0xf0>
    1d40:	00 00       	nop
    1d42:	86 9a       	sbi	0x10, 6	; 16
    1d44:	e7 e1       	ldi	r30, 0x17	; 23
    1d46:	f1 e0       	ldi	r31, 0x01	; 1
    1d48:	31 97       	sbiw	r30, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <gpib_cmd_LAG+0xf8>
    1d4c:	00 c0       	rjmp	.+0      	; 0x1d4e <gpib_cmd_LAG+0xfe>
    1d4e:	00 00       	nop
    1d50:	b9 cf       	rjmp	.-142    	; 0x1cc4 <gpib_cmd_LAG+0x74>

00001d52 <gpib_cmd_TAG>:
	return gpib_tx(addr | 0x60, true, ptimeoutfunc);
}


static bool gpib_cmd_TAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	18 2f       	mov	r17, r24
    1d5a:	eb 01       	movw	r28, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
    1d5c:	8f 71       	andi	r24, 0x1F	; 31
    1d5e:	80 64       	ori	r24, 0x40	; 64

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1d60:	86 9b       	sbis	0x10, 6	; 16
    1d62:	5c c0       	rjmp	.+184    	; 0x1e1c <gpib_cmd_TAG+0xca>
			_delay_us(220);
		ATN_LOW;
    1d64:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1d66:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1d68:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1d6a:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1d6c:	8a b9       	out	0x0a, r24	; 10
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <gpib_cmd_TAG+0x22>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1d70:	81 11       	cpse	r24, r1
    1d72:	21 c0       	rjmp	.+66     	; 0x1db6 <gpib_cmd_TAG+0x64>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1d74:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1d78:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1d80:	36 9b       	sbis	0x06, 6	; 6
    1d82:	f6 cf       	rjmp	.-20     	; 0x1d70 <gpib_cmd_TAG+0x1e>

	if (!timedout)
    1d84:	81 11       	cpse	r24, r1
    1d86:	17 c0       	rjmp	.+46     	; 0x1db6 <gpib_cmd_TAG+0x64>
	{
		DAV_LOW;
    1d88:	26 9a       	sbi	0x04, 6	; 4
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <gpib_cmd_TAG+0x3e>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1d8c:	81 11       	cpse	r24, r1
    1d8e:	12 c0       	rjmp	.+36     	; 0x1db4 <gpib_cmd_TAG+0x62>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1d90:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1d94:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1d98:	fe 01       	movw	r30, r28
    1d9a:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1d9c:	37 9b       	sbis	0x06, 7	; 6
    1d9e:	f6 cf       	rjmp	.-20     	; 0x1d8c <gpib_cmd_TAG+0x3a>
		DAV_HIGH;
    1da0:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1da2:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1da4:	81 11       	cpse	r24, r1
    1da6:	08 c0       	rjmp	.+16     	; 0x1db8 <gpib_cmd_TAG+0x66>
	if (addr & 0xe0)
    1da8:	10 7e       	andi	r17, 0xE0	; 224
    1daa:	51 f4       	brne	.+20     	; 0x1dc0 <gpib_cmd_TAG+0x6e>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
	}
	return result;
}
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	08 95       	ret
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    1db4:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1db6:	1a b8       	out	0x0a, r1	; 10
	}
}

void gpib_recover(void)
{
	gpib_init();
    1db8:	d1 de       	rcall	.-606    	; 0x1b5c <gpib_init>
    1dba:	81 e0       	ldi	r24, 0x01	; 1

static bool gpib_cmd_TAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
	if (addr & 0xe0)
    1dbc:	10 7e       	andi	r17, 0xE0	; 224
    1dbe:	b1 f3       	breq	.-20     	; 0x1dac <gpib_cmd_TAG+0x5a>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1dc0:	86 9b       	sbis	0x10, 6	; 16
    1dc2:	3a c0       	rjmp	.+116    	; 0x1e38 <gpib_cmd_TAG+0xe6>
			_delay_us(220);
		ATN_LOW;
    1dc4:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1dc6:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1dc8:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1dca:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1dcc:	80 e6       	ldi	r24, 0x60	; 96
    1dce:	8a b9       	out	0x0a, r24	; 10
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <gpib_cmd_TAG+0x84>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1dd2:	81 11       	cpse	r24, r1
    1dd4:	1c c0       	rjmp	.+56     	; 0x1e0e <gpib_cmd_TAG+0xbc>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1dd6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1dda:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1dde:	fe 01       	movw	r30, r28
    1de0:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1de2:	36 9b       	sbis	0x06, 6	; 6
    1de4:	f6 cf       	rjmp	.-20     	; 0x1dd2 <gpib_cmd_TAG+0x80>

	if (!timedout)
    1de6:	81 11       	cpse	r24, r1
    1de8:	12 c0       	rjmp	.+36     	; 0x1e0e <gpib_cmd_TAG+0xbc>
	{
		DAV_LOW;
    1dea:	26 9a       	sbi	0x04, 6	; 4
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <gpib_cmd_TAG+0xa0>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1dee:	81 11       	cpse	r24, r1
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <gpib_cmd_TAG+0xba>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1df2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1df6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1dfe:	37 9b       	sbis	0x06, 7	; 6
    1e00:	f6 cf       	rjmp	.-20     	; 0x1dee <gpib_cmd_TAG+0x9c>
		DAV_HIGH;
    1e02:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1e04:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1e06:	88 23       	and	r24, r24
    1e08:	89 f2       	breq	.-94     	; 0x1dac <gpib_cmd_TAG+0x5a>
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <gpib_cmd_TAG+0xbe>
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    1e0c:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    1e0e:	1a b8       	out	0x0a, r1	; 10
    1e10:	a5 de       	rcall	.-694    	; 0x1b5c <gpib_init>
    1e12:	81 e0       	ldi	r24, 0x01	; 1
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
	}
	return result;
}
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	08 95       	ret
    1e1c:	ef e6       	ldi	r30, 0x6F	; 111
    1e1e:	f3 e0       	ldi	r31, 0x03	; 3
    1e20:	31 97       	sbiw	r30, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <gpib_cmd_TAG+0xce>
    1e24:	00 c0       	rjmp	.+0      	; 0x1e26 <gpib_cmd_TAG+0xd4>
    1e26:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    1e28:	86 9a       	sbi	0x10, 6	; 16
    1e2a:	e7 e1       	ldi	r30, 0x17	; 23
    1e2c:	f1 e0       	ldi	r31, 0x01	; 1
    1e2e:	31 97       	sbiw	r30, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <gpib_cmd_TAG+0xdc>
    1e32:	00 c0       	rjmp	.+0      	; 0x1e34 <gpib_cmd_TAG+0xe2>
    1e34:	00 00       	nop
    1e36:	97 cf       	rjmp	.-210    	; 0x1d66 <gpib_cmd_TAG+0x14>
    1e38:	8f e6       	ldi	r24, 0x6F	; 111
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <gpib_cmd_TAG+0xea>
    1e40:	00 c0       	rjmp	.+0      	; 0x1e42 <gpib_cmd_TAG+0xf0>
    1e42:	00 00       	nop
    1e44:	86 9a       	sbi	0x10, 6	; 16
    1e46:	e7 e1       	ldi	r30, 0x17	; 23
    1e48:	f1 e0       	ldi	r31, 0x01	; 1
    1e4a:	31 97       	sbiw	r30, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <gpib_cmd_TAG+0xf8>
    1e4e:	00 c0       	rjmp	.+0      	; 0x1e50 <gpib_cmd_TAG+0xfe>
    1e50:	00 00       	nop
    1e52:	b9 cf       	rjmp	.-142    	; 0x1dc6 <gpib_cmd_TAG+0x74>

00001e54 <gpib_trigger>:
	return timedout;
}


bool gpib_trigger(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1e5a:	fa de       	rcall	.-524    	; 0x1c50 <gpib_cmd_LAG>
	if (!timedout)
    1e5c:	88 23       	and	r24, r24
	}
}

void gpib_recover(void)
{
	gpib_init();
    1e5e:	29 f0       	breq	.+10     	; 0x1e6a <gpib_trigger+0x16>
    1e60:	7d de       	rcall	.-774    	; 0x1b5c <gpib_init>
    1e62:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1e6a:	86 9b       	sbis	0x10, 6	; 16
    1e6c:	5c c0       	rjmp	.+184    	; 0x1f26 <gpib_trigger+0xd2>
			_delay_us(220);
		ATN_LOW;
    1e6e:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1e70:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1e72:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1e74:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1e76:	88 e0       	ldi	r24, 0x08	; 8
    1e78:	8a b9       	out	0x0a, r24	; 10
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <gpib_trigger+0x2c>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1e7c:	81 11       	cpse	r24, r1
    1e7e:	42 c0       	rjmp	.+132    	; 0x1f04 <gpib_trigger+0xb0>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1e80:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1e84:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1e88:	fe 01       	movw	r30, r28
    1e8a:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1e8c:	36 9b       	sbis	0x06, 6	; 6
    1e8e:	f6 cf       	rjmp	.-20     	; 0x1e7c <gpib_trigger+0x28>

	if (!timedout)
    1e90:	81 11       	cpse	r24, r1
    1e92:	38 c0       	rjmp	.+112    	; 0x1f04 <gpib_trigger+0xb0>
	{
		DAV_LOW;
    1e94:	26 9a       	sbi	0x04, 6	; 4
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <gpib_trigger+0x48>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1e98:	81 11       	cpse	r24, r1
    1e9a:	33 c0       	rjmp	.+102    	; 0x1f02 <gpib_trigger+0xae>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1e9c:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1ea0:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1ea8:	37 9b       	sbis	0x06, 7	; 6
    1eaa:	f6 cf       	rjmp	.-20     	; 0x1e98 <gpib_trigger+0x44>
		DAV_HIGH;
    1eac:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1eae:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1eb0:	81 11       	cpse	r24, r1
    1eb2:	29 c0       	rjmp	.+82     	; 0x1f06 <gpib_trigger+0xb2>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1eb4:	86 9b       	sbis	0x10, 6	; 16
    1eb6:	29 c0       	rjmp	.+82     	; 0x1f0a <gpib_trigger+0xb6>
			_delay_us(220);
		ATN_LOW;
    1eb8:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1eba:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1ebc:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1ebe:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1ec0:	8f e3       	ldi	r24, 0x3F	; 63
    1ec2:	8a b9       	out	0x0a, r24	; 10
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <gpib_trigger+0x76>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	1d c0       	rjmp	.+58     	; 0x1f04 <gpib_trigger+0xb0>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1eca:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1ece:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1ed6:	36 9b       	sbis	0x06, 6	; 6
    1ed8:	f6 cf       	rjmp	.-20     	; 0x1ec6 <gpib_trigger+0x72>

	if (!timedout)
    1eda:	81 11       	cpse	r24, r1
    1edc:	13 c0       	rjmp	.+38     	; 0x1f04 <gpib_trigger+0xb0>
	{
		DAV_LOW;
    1ede:	26 9a       	sbi	0x04, 6	; 4
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <gpib_trigger+0x92>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	0e c0       	rjmp	.+28     	; 0x1f02 <gpib_trigger+0xae>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1ee6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1eea:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1eee:	fe 01       	movw	r30, r28
    1ef0:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1ef2:	37 9b       	sbis	0x06, 7	; 6
    1ef4:	f6 cf       	rjmp	.-20     	; 0x1ee2 <gpib_trigger+0x8e>
		DAV_HIGH;
    1ef6:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1ef8:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1efa:	88 23       	and	r24, r24
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <gpib_trigger+0xac>
    1efe:	b2 cf       	rjmp	.-156    	; 0x1e64 <gpib_trigger+0x10>
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <gpib_trigger+0xb2>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
	}
	
	DDRD = 0x00; /* release data bus */
    1f02:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    1f04:	1a b8       	out	0x0a, r1	; 10
    1f06:	2a de       	rcall	.-940    	; 0x1b5c <gpib_init>
    1f08:	ab cf       	rjmp	.-170    	; 0x1e60 <gpib_trigger+0xc>
    1f0a:	8f e6       	ldi	r24, 0x6F	; 111
    1f0c:	93 e0       	ldi	r25, 0x03	; 3
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <gpib_trigger+0xba>
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <gpib_trigger+0xc0>
    1f14:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    1f16:	86 9a       	sbi	0x10, 6	; 16
    1f18:	e7 e1       	ldi	r30, 0x17	; 23
    1f1a:	f1 e0       	ldi	r31, 0x01	; 1
    1f1c:	31 97       	sbiw	r30, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <gpib_trigger+0xc8>
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <gpib_trigger+0xce>
    1f22:	00 00       	nop
    1f24:	ca cf       	rjmp	.-108    	; 0x1eba <gpib_trigger+0x66>
    1f26:	8f e6       	ldi	r24, 0x6F	; 111
    1f28:	93 e0       	ldi	r25, 0x03	; 3
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <gpib_trigger+0xd6>
    1f2e:	00 c0       	rjmp	.+0      	; 0x1f30 <gpib_trigger+0xdc>
    1f30:	00 00       	nop
    1f32:	86 9a       	sbi	0x10, 6	; 16
    1f34:	e7 e1       	ldi	r30, 0x17	; 23
    1f36:	f1 e0       	ldi	r31, 0x01	; 1
    1f38:	31 97       	sbiw	r30, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <gpib_trigger+0xe4>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <gpib_trigger+0xea>
    1f3e:	00 00       	nop
    1f40:	97 cf       	rjmp	.-210    	; 0x1e70 <gpib_trigger+0x1c>

00001f42 <gpib_gotoLocal>:
		gpib_recover();
	return timedout;
}

bool gpib_gotoLocal(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1f48:	83 de       	rcall	.-762    	; 0x1c50 <gpib_cmd_LAG>
	if (!timedout)
    1f4a:	88 23       	and	r24, r24
    1f4c:	71 f0       	breq	.+28     	; 0x1f6a <gpib_gotoLocal+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f4e:	9f ef       	ldi	r25, 0xFF	; 255
    1f50:	e1 ee       	ldi	r30, 0xE1	; 225
    1f52:	f4 e0       	ldi	r31, 0x04	; 4
    1f54:	91 50       	subi	r25, 0x01	; 1
    1f56:	e0 40       	sbci	r30, 0x00	; 0
    1f58:	f0 40       	sbci	r31, 0x00	; 0
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <gpib_gotoLocal+0x12>
    1f5c:	00 c0       	rjmp	.+0      	; 0x1f5e <gpib_gotoLocal+0x1c>
	}
}

void gpib_recover(void)
{
	gpib_init();
    1f5e:	00 00       	nop
    1f60:	fd dd       	rcall	.-1030   	; 0x1b5c <gpib_init>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
	//_delay_us(14);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1f6a:	86 9b       	sbis	0x10, 6	; 16
    1f6c:	69 c0       	rjmp	.+210    	; 0x2040 <gpib_gotoLocal+0xfe>
			_delay_us(220);
		ATN_LOW;
    1f6e:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1f70:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1f72:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1f74:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	8a b9       	out	0x0a, r24	; 10
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <gpib_gotoLocal+0x3e>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	4b c0       	rjmp	.+150    	; 0x2016 <gpib_gotoLocal+0xd4>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1f80:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1f84:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1f88:	fe 01       	movw	r30, r28
    1f8a:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1f8c:	36 9b       	sbis	0x06, 6	; 6
    1f8e:	f6 cf       	rjmp	.-20     	; 0x1f7c <gpib_gotoLocal+0x3a>

	if (!timedout)
    1f90:	81 11       	cpse	r24, r1
    1f92:	41 c0       	rjmp	.+130    	; 0x2016 <gpib_gotoLocal+0xd4>
	{
		DAV_LOW;
    1f94:	26 9a       	sbi	0x04, 6	; 4
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <gpib_gotoLocal+0x5a>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1f98:	81 11       	cpse	r24, r1
    1f9a:	3c c0       	rjmp	.+120    	; 0x2014 <gpib_gotoLocal+0xd2>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1f9c:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1fa0:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1fa8:	37 9b       	sbis	0x06, 7	; 6
    1faa:	f6 cf       	rjmp	.-20     	; 0x1f98 <gpib_gotoLocal+0x56>
		DAV_HIGH;
    1fac:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    1fae:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	32 c0       	rjmp	.+100    	; 0x2018 <gpib_gotoLocal+0xd6>
    1fb4:	ff ef       	ldi	r31, 0xFF	; 255
    1fb6:	21 ee       	ldi	r18, 0xE1	; 225
    1fb8:	84 e0       	ldi	r24, 0x04	; 4
    1fba:	f1 50       	subi	r31, 0x01	; 1
    1fbc:	20 40       	sbci	r18, 0x00	; 0
    1fbe:	80 40       	sbci	r24, 0x00	; 0
    1fc0:	e1 f7       	brne	.-8      	; 0x1fba <gpib_gotoLocal+0x78>
    1fc2:	00 c0       	rjmp	.+0      	; 0x1fc4 <gpib_gotoLocal+0x82>
    1fc4:	00 00       	nop

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    1fc6:	86 9b       	sbis	0x10, 6	; 16
    1fc8:	2d c0       	rjmp	.+90     	; 0x2024 <gpib_gotoLocal+0xe2>
			_delay_us(220);
		ATN_LOW;
    1fca:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    1fcc:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    1fce:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1fd0:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    1fd2:	8f e3       	ldi	r24, 0x3F	; 63
    1fd4:	8a b9       	out	0x0a, r24	; 10
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <gpib_gotoLocal+0x9a>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1fd8:	81 11       	cpse	r24, r1
    1fda:	21 c0       	rjmp	.+66     	; 0x201e <gpib_gotoLocal+0xdc>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1fdc:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1fe0:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1fe8:	36 9b       	sbis	0x06, 6	; 6
    1fea:	f6 cf       	rjmp	.-20     	; 0x1fd8 <gpib_gotoLocal+0x96>

	if (!timedout)
    1fec:	81 11       	cpse	r24, r1
    1fee:	17 c0       	rjmp	.+46     	; 0x201e <gpib_gotoLocal+0xdc>
	{
		DAV_LOW;
    1ff0:	26 9a       	sbi	0x04, 6	; 4
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <gpib_gotoLocal+0xb6>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1ff4:	81 11       	cpse	r24, r1
    1ff6:	12 c0       	rjmp	.+36     	; 0x201c <gpib_gotoLocal+0xda>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    1ff8:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    1ffc:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2000:	fe 01       	movw	r30, r28
    2002:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2004:	37 9b       	sbis	0x06, 7	; 6
    2006:	f6 cf       	rjmp	.-20     	; 0x1ff4 <gpib_gotoLocal+0xb2>
		DAV_HIGH;
    2008:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    200a:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    200c:	88 23       	and	r24, r24
    200e:	09 f4       	brne	.+2      	; 0x2012 <gpib_gotoLocal+0xd0>
    2010:	a9 cf       	rjmp	.-174    	; 0x1f64 <gpib_gotoLocal+0x22>
    2012:	06 c0       	rjmp	.+12     	; 0x2020 <gpib_gotoLocal+0xde>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
	}
	
	DDRD = 0x00; /* release data bus */
    2014:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    2016:	1a b8       	out	0x0a, r1	; 10
    2018:	a1 dd       	rcall	.-1214   	; 0x1b5c <gpib_init>
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    201a:	99 cf       	rjmp	.-206    	; 0x1f4e <gpib_gotoLocal+0xc>
	}
	
	DDRD = 0x00; /* release data bus */
    201c:	26 98       	cbi	0x04, 6	; 4
    201e:	1a b8       	out	0x0a, r1	; 10
    2020:	9d dd       	rcall	.-1222   	; 0x1b5c <gpib_init>
    2022:	9e cf       	rjmp	.-196    	; 0x1f60 <gpib_gotoLocal+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2024:	8f e6       	ldi	r24, 0x6F	; 111
    2026:	93 e0       	ldi	r25, 0x03	; 3
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <gpib_gotoLocal+0xe6>
    202c:	00 c0       	rjmp	.+0      	; 0x202e <gpib_gotoLocal+0xec>
    202e:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    2030:	86 9a       	sbi	0x10, 6	; 16
    2032:	e7 e1       	ldi	r30, 0x17	; 23
    2034:	f1 e0       	ldi	r31, 0x01	; 1
    2036:	31 97       	sbiw	r30, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <gpib_gotoLocal+0xf4>
    203a:	00 c0       	rjmp	.+0      	; 0x203c <gpib_gotoLocal+0xfa>
    203c:	00 00       	nop
    203e:	c6 cf       	rjmp	.-116    	; 0x1fcc <gpib_gotoLocal+0x8a>
    2040:	8f e6       	ldi	r24, 0x6F	; 111
    2042:	93 e0       	ldi	r25, 0x03	; 3
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <gpib_gotoLocal+0x102>
    2048:	00 c0       	rjmp	.+0      	; 0x204a <gpib_gotoLocal+0x108>
    204a:	00 00       	nop
    204c:	86 9a       	sbi	0x10, 6	; 16
    204e:	e7 e1       	ldi	r30, 0x17	; 23
    2050:	f1 e0       	ldi	r31, 0x01	; 1
    2052:	31 97       	sbiw	r30, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <gpib_gotoLocal+0x110>
    2056:	00 c0       	rjmp	.+0      	; 0x2058 <gpib_gotoLocal+0x116>
    2058:	00 00       	nop
    205a:	8a cf       	rjmp	.-236    	; 0x1f70 <gpib_gotoLocal+0x2e>

0000205c <gpib_sdc>:
	return gpib_tx(0x04, true, ptimeoutfunc);
}


bool gpib_sdc(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	eb 01       	movw	r28, r22
	bool timedout;
	
	s_gpib_transaction_active = true;
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <s_gpib_transaction_active>
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    2068:	f3 dd       	rcall	.-1050   	; 0x1c50 <gpib_cmd_LAG>
	if (!timedout)
    206a:	88 23       	and	r24, r24
	}
}

void gpib_recover(void)
{
	gpib_init();
    206c:	81 f0       	breq	.+32     	; 0x208e <gpib_sdc+0x32>
    206e:	76 dd       	rcall	.-1300   	; 0x1b5c <gpib_init>
    2070:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_SDC(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	s_gpib_transaction_active = false;
    2072:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2076:	ff ef       	ldi	r31, 0xFF	; 255
    2078:	22 e5       	ldi	r18, 0x52	; 82
    207a:	37 e0       	ldi	r19, 0x07	; 7
    207c:	f1 50       	subi	r31, 0x01	; 1
    207e:	20 40       	sbci	r18, 0x00	; 0
    2080:	30 40       	sbci	r19, 0x00	; 0
    2082:	e1 f7       	brne	.-8      	; 0x207c <gpib_sdc+0x20>
    2084:	00 c0       	rjmp	.+0      	; 0x2086 <gpib_sdc+0x2a>
    2086:	00 00       	nop
		
	_delay_ms(150); // this is not done by the NI USB adapter, but seems to be required for products using NI USB adapter!
	return timedout;
}
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    208e:	86 9b       	sbis	0x10, 6	; 16
    2090:	5c c0       	rjmp	.+184    	; 0x214a <gpib_sdc+0xee>
			_delay_us(220);
		ATN_LOW;
    2092:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2094:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2096:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    2098:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	8a b9       	out	0x0a, r24	; 10
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <gpib_sdc+0x48>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    20a0:	81 11       	cpse	r24, r1
    20a2:	42 c0       	rjmp	.+132    	; 0x2128 <gpib_sdc+0xcc>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    20a4:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    20a8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    20ac:	fe 01       	movw	r30, r28
    20ae:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    20b0:	36 9b       	sbis	0x06, 6	; 6
    20b2:	f6 cf       	rjmp	.-20     	; 0x20a0 <gpib_sdc+0x44>

	if (!timedout)
    20b4:	81 11       	cpse	r24, r1
    20b6:	38 c0       	rjmp	.+112    	; 0x2128 <gpib_sdc+0xcc>
	{
		DAV_LOW;
    20b8:	26 9a       	sbi	0x04, 6	; 4
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <gpib_sdc+0x64>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    20bc:	81 11       	cpse	r24, r1
    20be:	33 c0       	rjmp	.+102    	; 0x2126 <gpib_sdc+0xca>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    20c0:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    20c4:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    20c8:	fe 01       	movw	r30, r28
    20ca:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    20cc:	37 9b       	sbis	0x06, 7	; 6
    20ce:	f6 cf       	rjmp	.-20     	; 0x20bc <gpib_sdc+0x60>
		DAV_HIGH;
    20d0:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    20d2:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    20d4:	81 11       	cpse	r24, r1
    20d6:	29 c0       	rjmp	.+82     	; 0x212a <gpib_sdc+0xce>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    20d8:	86 9b       	sbis	0x10, 6	; 16
    20da:	29 c0       	rjmp	.+82     	; 0x212e <gpib_sdc+0xd2>
			_delay_us(220);
		ATN_LOW;
    20dc:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    20de:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    20e0:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    20e2:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    20e4:	8f e3       	ldi	r24, 0x3F	; 63
    20e6:	8a b9       	out	0x0a, r24	; 10
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <gpib_sdc+0x92>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    20ea:	81 11       	cpse	r24, r1
    20ec:	1d c0       	rjmp	.+58     	; 0x2128 <gpib_sdc+0xcc>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    20ee:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    20f2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    20f6:	fe 01       	movw	r30, r28
    20f8:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    20fa:	36 9b       	sbis	0x06, 6	; 6
    20fc:	f6 cf       	rjmp	.-20     	; 0x20ea <gpib_sdc+0x8e>

	if (!timedout)
    20fe:	81 11       	cpse	r24, r1
    2100:	13 c0       	rjmp	.+38     	; 0x2128 <gpib_sdc+0xcc>
	{
		DAV_LOW;
    2102:	26 9a       	sbi	0x04, 6	; 4
    2104:	02 c0       	rjmp	.+4      	; 0x210a <gpib_sdc+0xae>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2106:	81 11       	cpse	r24, r1
    2108:	0e c0       	rjmp	.+28     	; 0x2126 <gpib_sdc+0xca>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    210a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    210e:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2112:	fe 01       	movw	r30, r28
    2114:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2116:	37 9b       	sbis	0x06, 7	; 6
    2118:	f6 cf       	rjmp	.-20     	; 0x2106 <gpib_sdc+0xaa>
		DAV_HIGH;
    211a:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    211c:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    211e:	88 23       	and	r24, r24
    2120:	09 f4       	brne	.+2      	; 0x2124 <gpib_sdc+0xc8>
    2122:	a7 cf       	rjmp	.-178    	; 0x2072 <gpib_sdc+0x16>
    2124:	02 c0       	rjmp	.+4      	; 0x212a <gpib_sdc+0xce>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
	}
	
	DDRD = 0x00; /* release data bus */
    2126:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    2128:	1a b8       	out	0x0a, r1	; 10
    212a:	18 dd       	rcall	.-1488   	; 0x1b5c <gpib_init>
    212c:	a0 cf       	rjmp	.-192    	; 0x206e <gpib_sdc+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    212e:	8f e6       	ldi	r24, 0x6F	; 111
    2130:	93 e0       	ldi	r25, 0x03	; 3
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <gpib_sdc+0xd6>
    2136:	00 c0       	rjmp	.+0      	; 0x2138 <gpib_sdc+0xdc>
    2138:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    213a:	86 9a       	sbi	0x10, 6	; 16
    213c:	e7 e1       	ldi	r30, 0x17	; 23
    213e:	f1 e0       	ldi	r31, 0x01	; 1
    2140:	31 97       	sbiw	r30, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <gpib_sdc+0xe4>
    2144:	00 c0       	rjmp	.+0      	; 0x2146 <gpib_sdc+0xea>
    2146:	00 00       	nop
    2148:	ca cf       	rjmp	.-108    	; 0x20de <gpib_sdc+0x82>
    214a:	8f e6       	ldi	r24, 0x6F	; 111
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <gpib_sdc+0xf2>
    2152:	00 c0       	rjmp	.+0      	; 0x2154 <gpib_sdc+0xf8>
    2154:	00 00       	nop
    2156:	86 9a       	sbi	0x10, 6	; 16
    2158:	e7 e1       	ldi	r30, 0x17	; 23
    215a:	f1 e0       	ldi	r31, 0x01	; 1
    215c:	31 97       	sbiw	r30, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <gpib_sdc+0x100>
    2160:	00 c0       	rjmp	.+0      	; 0x2162 <gpib_sdc+0x106>
    2162:	00 00       	nop
    2164:	97 cf       	rjmp	.-210    	; 0x2094 <gpib_sdc+0x38>

00002166 <gpib_readStatusByte>:
{
	return gpib_tx(0x08, true, ptimeoutfunc);
}

uint8_t gpib_readStatusByte(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	18 2f       	mov	r17, r24
    216e:	eb 01       	movw	r28, r22
	uint8_t status;
	
	timedout = false;
	status = 0;

	s_gpib_transaction_active = true;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <s_gpib_transaction_active>
	if (!timedout)
		timedout = gpib_cmd_LAG(0, ptimeoutfunc);
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	6b dd       	rcall	.-1322   	; 0x1c50 <gpib_cmd_LAG>
	if (!timedout)
    217a:	88 23       	and	r24, r24
    217c:	49 f0       	breq	.+18     	; 0x2190 <gpib_readStatusByte+0x2a>
	}
}

void gpib_recover(void)
{
	gpib_init();
    217e:	10 e0       	ldi	r17, 0x00	; 0
    2180:	ed dc       	rcall	.-1574   	; 0x1b5c <gpib_init>
		timedout = gpib_cmd_SPD(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
	if (timedout)
		gpib_recover();	
	s_gpib_transaction_active = false;		
    2182:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
	return status;
}
    2186:	81 2f       	mov	r24, r17
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	08 95       	ret

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    2190:	86 9b       	sbis	0x10, 6	; 16
    2192:	b3 c0       	rjmp	.+358    	; 0x22fa <gpib_readStatusByte+0x194>
			_delay_us(220);
		ATN_LOW;
    2194:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2196:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2198:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    219a:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    219c:	88 e1       	ldi	r24, 0x18	; 24
    219e:	8a b9       	out	0x0a, r24	; 10
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <gpib_readStatusByte+0x40>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    21a2:	81 11       	cpse	r24, r1
    21a4:	91 c0       	rjmp	.+290    	; 0x22c8 <gpib_readStatusByte+0x162>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    21a6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    21aa:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    21ae:	fe 01       	movw	r30, r28
    21b0:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    21b2:	36 9b       	sbis	0x06, 6	; 6
    21b4:	f6 cf       	rjmp	.-20     	; 0x21a2 <gpib_readStatusByte+0x3c>

	if (!timedout)
    21b6:	81 11       	cpse	r24, r1
    21b8:	87 c0       	rjmp	.+270    	; 0x22c8 <gpib_readStatusByte+0x162>
	{
		DAV_LOW;
    21ba:	26 9a       	sbi	0x04, 6	; 4
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <gpib_readStatusByte+0x5c>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    21be:	81 11       	cpse	r24, r1
    21c0:	82 c0       	rjmp	.+260    	; 0x22c6 <gpib_readStatusByte+0x160>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    21c2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    21c6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    21ca:	fe 01       	movw	r30, r28
    21cc:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    21ce:	37 9b       	sbis	0x06, 7	; 6
    21d0:	f6 cf       	rjmp	.-20     	; 0x21be <gpib_readStatusByte+0x58>
		DAV_HIGH;
    21d2:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    21d4:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    21d6:	81 11       	cpse	r24, r1
    21d8:	78 c0       	rjmp	.+240    	; 0x22ca <gpib_readStatusByte+0x164>
	if (!timedout)
		timedout = gpib_cmd_LAG(0, ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_SPE(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); 
    21da:	be 01       	movw	r22, r28
    21dc:	81 2f       	mov	r24, r17
    21de:	b9 dd       	rcall	.-1166   	; 0x1d52 <gpib_cmd_TAG>

	if (!timedout)
    21e0:	81 11       	cpse	r24, r1
    21e2:	cd cf       	rjmp	.-102    	; 0x217e <gpib_readStatusByte+0x18>

	timedout = false;
	
	// ensure that ATN is high
	bool atn_was_low = !ATN_OUT_STATE;
	if (atn_was_low)
    21e4:	86 99       	sbic	0x10, 6	; 16
    21e6:	97 c0       	rjmp	.+302    	; 0x2316 <gpib_readStatusByte+0x1b0>
		_delay_us(220);
	ATN_HIGH;
    21e8:	86 98       	cbi	0x10, 6	; 16
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    21ea:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    21ec:	3e 98       	cbi	0x07, 6	; 7
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <gpib_readStatusByte+0x8e>
	do
	{
		if (timer_ticked() || quickTimeoutPoll)
			timedout = ptimeoutfunc();
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    21f0:	81 11       	cpse	r24, r1
    21f2:	71 c0       	rjmp	.+226    	; 0x22d6 <gpib_readStatusByte+0x170>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    21f4:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    21f8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	
	
	do
	{
		if (timer_ticked() || quickTimeoutPoll)
			timedout = ptimeoutfunc();
    21fc:	fe 01       	movw	r30, r28
    21fe:	09 95       	icall
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    2200:	1e 99       	sbic	0x03, 6	; 3
    2202:	f6 cf       	rjmp	.-20     	; 0x21f0 <gpib_readStatusByte+0x8a>
	
	if (!timedout)
    2204:	81 11       	cpse	r24, r1
    2206:	67 c0       	rjmp	.+206    	; 0x22d6 <gpib_readStatusByte+0x170>
	{
		NRFD_LOW;
    2208:	3e 9a       	sbi	0x07, 6	; 7
		c = ~PIND;
    220a:	19 b1       	in	r17, 0x09	; 9
    220c:	10 95       	com	r17
		eoi = (EOI_STATE == 0) ;
    220e:	83 b1       	in	r24, 0x03	; 3
		NDAC_HIGH;
    2210:	3f 98       	cbi	0x07, 7	; 7
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <gpib_readStatusByte+0xb2>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    2214:	81 11       	cpse	r24, r1
    2216:	60 c0       	rjmp	.+192    	; 0x22d8 <gpib_readStatusByte+0x172>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2218:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    221c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		NDAC_HIGH;
		
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2220:	fe 01       	movw	r30, r28
    2222:	09 95       	icall
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    2224:	1e 9b       	sbis	0x03, 6	; 3
    2226:	f6 cf       	rjmp	.-20     	; 0x2214 <gpib_readStatusByte+0xae>
	if (s_terminator == '\0')
		*pEoi = eoi;
	else
		*pEoi = eoi || (c == s_terminator);

	if (timedout)
    2228:	81 11       	cpse	r24, r1
    222a:	56 c0       	rjmp	.+172    	; 0x22d8 <gpib_readStatusByte+0x172>
	{
		gpib_recover();
	}
	*ptimedout = timedout;
	
	NRFD_LOW;
    222c:	3e 9a       	sbi	0x07, 6	; 7

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    222e:	86 9b       	sbis	0x10, 6	; 16
    2230:	56 c0       	rjmp	.+172    	; 0x22de <gpib_readStatusByte+0x178>
			_delay_us(220);
		ATN_LOW;
    2232:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2234:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2236:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    2238:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    223a:	89 e1       	ldi	r24, 0x19	; 25
    223c:	8a b9       	out	0x0a, r24	; 10
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <gpib_readStatusByte+0xde>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2240:	81 11       	cpse	r24, r1
    2242:	46 c0       	rjmp	.+140    	; 0x22d0 <gpib_readStatusByte+0x16a>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2244:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2248:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    224c:	fe 01       	movw	r30, r28
    224e:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2250:	36 9b       	sbis	0x06, 6	; 6
    2252:	f6 cf       	rjmp	.-20     	; 0x2240 <gpib_readStatusByte+0xda>

	if (!timedout)
    2254:	81 11       	cpse	r24, r1
    2256:	3c c0       	rjmp	.+120    	; 0x22d0 <gpib_readStatusByte+0x16a>
	{
		DAV_LOW;
    2258:	26 9a       	sbi	0x04, 6	; 4
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <gpib_readStatusByte+0xfa>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    225c:	81 11       	cpse	r24, r1
    225e:	37 c0       	rjmp	.+110    	; 0x22ce <gpib_readStatusByte+0x168>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2260:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2264:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2268:	fe 01       	movw	r30, r28
    226a:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    226c:	37 9b       	sbis	0x06, 7	; 6
    226e:	f6 cf       	rjmp	.-20     	; 0x225c <gpib_readStatusByte+0xf6>
		DAV_HIGH;
    2270:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    2272:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    2274:	81 11       	cpse	r24, r1
    2276:	2d c0       	rjmp	.+90     	; 0x22d2 <gpib_readStatusByte+0x16c>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    2278:	86 9b       	sbis	0x10, 6	; 16
    227a:	5d c0       	rjmp	.+186    	; 0x2336 <gpib_readStatusByte+0x1d0>
			_delay_us(220);
		ATN_LOW;
    227c:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    227e:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2280:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    2282:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    2284:	8f e5       	ldi	r24, 0x5F	; 95
    2286:	8a b9       	out	0x0a, r24	; 10
    2288:	02 c0       	rjmp	.+4      	; 0x228e <gpib_readStatusByte+0x128>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    228a:	81 11       	cpse	r24, r1
    228c:	21 c0       	rjmp	.+66     	; 0x22d0 <gpib_readStatusByte+0x16a>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    228e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2292:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    2296:	fe 01       	movw	r30, r28
    2298:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    229a:	36 9b       	sbis	0x06, 6	; 6
    229c:	f6 cf       	rjmp	.-20     	; 0x228a <gpib_readStatusByte+0x124>

	if (!timedout)
    229e:	81 11       	cpse	r24, r1
    22a0:	17 c0       	rjmp	.+46     	; 0x22d0 <gpib_readStatusByte+0x16a>
	{
		DAV_LOW;
    22a2:	26 9a       	sbi	0x04, 6	; 4
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <gpib_readStatusByte+0x144>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    22a6:	81 11       	cpse	r24, r1
    22a8:	12 c0       	rjmp	.+36     	; 0x22ce <gpib_readStatusByte+0x168>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    22aa:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    22ae:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    22b2:	fe 01       	movw	r30, r28
    22b4:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    22b6:	37 9b       	sbis	0x06, 7	; 6
    22b8:	f6 cf       	rjmp	.-20     	; 0x22a6 <gpib_readStatusByte+0x140>
		DAV_HIGH;
    22ba:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    22bc:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    22be:	88 23       	and	r24, r24
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <gpib_readStatusByte+0x15e>
    22c2:	5f cf       	rjmp	.-322    	; 0x2182 <gpib_readStatusByte+0x1c>
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    22c4:	06 c0       	rjmp	.+12     	; 0x22d2 <gpib_readStatusByte+0x16c>
	}
	
	DDRD = 0x00; /* release data bus */
    22c6:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    22c8:	1a b8       	out	0x0a, r1	; 10
    22ca:	48 dc       	rcall	.-1904   	; 0x1b5c <gpib_init>
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    22cc:	58 cf       	rjmp	.-336    	; 0x217e <gpib_readStatusByte+0x18>
    22ce:	26 98       	cbi	0x04, 6	; 4
    22d0:	1a b8       	out	0x0a, r1	; 10
    22d2:	44 dc       	rcall	.-1912   	; 0x1b5c <gpib_init>

static inline uint8_t gpib_readdat_quick(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc, bool quickTimeoutPoll)
{
	uint8_t c;
	bool eoi, timedout;	
	c = 0;
    22d4:	55 cf       	rjmp	.-342    	; 0x2180 <gpib_readStatusByte+0x1a>
    22d6:	10 e0       	ldi	r17, 0x00	; 0
    22d8:	41 dc       	rcall	.-1918   	; 0x1b5c <gpib_init>
	{
		gpib_recover();
	}
	*ptimedout = timedout;
	
	NRFD_LOW;
    22da:	3e 9a       	sbi	0x07, 6	; 7
    22dc:	51 cf       	rjmp	.-350    	; 0x2180 <gpib_readStatusByte+0x1a>
    22de:	8f e6       	ldi	r24, 0x6F	; 111
    22e0:	93 e0       	ldi	r25, 0x03	; 3
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <gpib_readStatusByte+0x17c>
    22e6:	00 c0       	rjmp	.+0      	; 0x22e8 <gpib_readStatusByte+0x182>
    22e8:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    22ea:	86 9a       	sbi	0x10, 6	; 16
    22ec:	e7 e1       	ldi	r30, 0x17	; 23
    22ee:	f1 e0       	ldi	r31, 0x01	; 1
    22f0:	31 97       	sbiw	r30, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <gpib_readStatusByte+0x18a>
    22f4:	00 c0       	rjmp	.+0      	; 0x22f6 <gpib_readStatusByte+0x190>
    22f6:	00 00       	nop
    22f8:	9d cf       	rjmp	.-198    	; 0x2234 <gpib_readStatusByte+0xce>
    22fa:	8f e6       	ldi	r24, 0x6F	; 111
    22fc:	93 e0       	ldi	r25, 0x03	; 3
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <gpib_readStatusByte+0x198>
    2302:	00 c0       	rjmp	.+0      	; 0x2304 <gpib_readStatusByte+0x19e>
    2304:	00 00       	nop
    2306:	86 9a       	sbi	0x10, 6	; 16
    2308:	e7 e1       	ldi	r30, 0x17	; 23
    230a:	f1 e0       	ldi	r31, 0x01	; 1
    230c:	31 97       	sbiw	r30, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <gpib_readStatusByte+0x1a6>
    2310:	00 c0       	rjmp	.+0      	; 0x2312 <gpib_readStatusByte+0x1ac>
    2312:	00 00       	nop
    2314:	40 cf       	rjmp	.-384    	; 0x2196 <gpib_readStatusByte+0x30>
    2316:	8f e6       	ldi	r24, 0x6F	; 111
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <gpib_readStatusByte+0x1b4>
    231e:	00 c0       	rjmp	.+0      	; 0x2320 <gpib_readStatusByte+0x1ba>
    2320:	00 00       	nop
	
	// ensure that ATN is high
	bool atn_was_low = !ATN_OUT_STATE;
	if (atn_was_low)
		_delay_us(220);
	ATN_HIGH;
    2322:	86 98       	cbi	0x10, 6	; 16
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    2324:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    2326:	3e 98       	cbi	0x07, 6	; 7
    2328:	e7 e1       	ldi	r30, 0x17	; 23
    232a:	f1 e0       	ldi	r31, 0x01	; 1
    232c:	31 97       	sbiw	r30, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <gpib_readStatusByte+0x1c6>
    2330:	00 c0       	rjmp	.+0      	; 0x2332 <gpib_readStatusByte+0x1cc>
    2332:	00 00       	nop
    2334:	5f cf       	rjmp	.-322    	; 0x21f4 <gpib_readStatusByte+0x8e>
    2336:	8f e6       	ldi	r24, 0x6F	; 111
    2338:	93 e0       	ldi	r25, 0x03	; 3
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <gpib_readStatusByte+0x1d4>
    233e:	00 c0       	rjmp	.+0      	; 0x2340 <gpib_readStatusByte+0x1da>
    2340:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    2342:	86 9a       	sbi	0x10, 6	; 16
    2344:	e7 e1       	ldi	r30, 0x17	; 23
    2346:	f1 e0       	ldi	r31, 0x01	; 1
    2348:	31 97       	sbiw	r30, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <gpib_readStatusByte+0x1e2>
    234c:	00 c0       	rjmp	.+0      	; 0x234e <gpib_readStatusByte+0x1e8>
    234e:	00 00       	nop
    2350:	96 cf       	rjmp	.-212    	; 0x227e <gpib_readStatusByte+0x118>

00002352 <gpib_is_connected>:
	timer_init(); /* init timeout timer */
}

bool gpib_is_connected(void)
{
	if ( (DDRF & (1<<6)) != 0 )
    2352:	86 9b       	sbis	0x10, 6	; 16
    2354:	0d c0       	rjmp	.+26     	; 0x2370 <gpib_is_connected+0x1e>
	{
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
    2356:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <s_gpib_transaction_active>
    235a:	81 11       	cpse	r24, r1
	else
	{
		//return s_device_state == GPIB_DEVICE_CONNECTSTATE_CONNECTED;
	}
	return !!ATN_STATE; /* is ATN LOW? This can only happen if no GPIB device is connected/powered */		
}
    235c:	08 95       	ret
    235e:	85 e3       	ldi	r24, 0x35	; 53
    2360:	8a 95       	dec	r24
    2362:	f1 f7       	brne	.-4      	; 0x2360 <gpib_is_connected+0xe>
    2364:	00 00       	nop
	if ( (DDRF & (1<<6)) != 0 )
	{
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
		{
			_delay_us(10);
			ATN_HIGH; 
    2366:	86 98       	cbi	0x10, 6	; 16
    2368:	85 e3       	ldi	r24, 0x35	; 53
    236a:	8a 95       	dec	r24
    236c:	f1 f7       	brne	.-4      	; 0x236a <gpib_is_connected+0x18>
    236e:	00 00       	nop
	}
	else
	{
		//return s_device_state == GPIB_DEVICE_CONNECTSTATE_CONNECTED;
	}
	return !!ATN_STATE; /* is ATN LOW? This can only happen if no GPIB device is connected/powered */		
    2370:	8f b1       	in	r24, 0x0f	; 15
    2372:	86 fb       	bst	r24, 6
    2374:	88 27       	eor	r24, r24
    2376:	80 f9       	bld	r24, 0
}
    2378:	08 95       	ret

0000237a <gpib_ren>:

void gpib_ren(bool enable)
{
	if (enable)
    237a:	81 11       	cpse	r24, r1
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <gpib_ren+0x8>
	{
		REN_LOW; /* remote enable */
	}
	else
	{
		REN_HIGH; /* remote disable */
    237e:	25 98       	cbi	0x04, 5	; 4
    2380:	08 95       	ret

void gpib_ren(bool enable)
{
	if (enable)
	{
		REN_LOW; /* remote enable */
    2382:	25 9a       	sbi	0x04, 5	; 4
    2384:	08 95       	ret

00002386 <gpib_interface_clear>:



void gpib_interface_clear(void)
{
	NRFD_HIGH;
    2386:	3e 98       	cbi	0x07, 6	; 7
	IFC_LOW; /* interface clear */
    2388:	6a 9a       	sbi	0x0d, 2	; 13
    238a:	8f ed       	ldi	r24, 0xDF	; 223
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <gpib_interface_clear+0x8>
    2392:	00 c0       	rjmp	.+0      	; 0x2394 <gpib_interface_clear+0xe>
    2394:	00 00       	nop
	_delay_us(120);
	IFC_HIGH; /* interface clear */
    2396:	6a 98       	cbi	0x0d, 2	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2398:	8f e3       	ldi	r24, 0x3F	; 63
    239a:	9c e9       	ldi	r25, 0x9C	; 156
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <gpib_interface_clear+0x16>
    23a0:	00 c0       	rjmp	.+0      	; 0x23a2 <gpib_interface_clear+0x1c>
    23a2:	00 00       	nop
	_delay_ms(10);
	s_gpib_transaction_active = false;
    23a4:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
    23a8:	08 95       	ret

000023aa <gpib_readdat>:




uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
    23aa:	bf 92       	push	r11
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	7c 01       	movw	r14, r24
    23be:	6b 01       	movw	r12, r22
    23c0:	ea 01       	movw	r28, r20

	timedout = false;
	
	// ensure that ATN is high
	bool atn_was_low = !ATN_OUT_STATE;
	if (atn_was_low)
    23c2:	86 99       	sbic	0x10, 6	; 16
    23c4:	46 c0       	rjmp	.+140    	; 0x2452 <gpib_readdat+0xa8>
		_delay_us(220);
	ATN_HIGH;
    23c6:	86 98       	cbi	0x10, 6	; 16
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    23c8:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    23ca:	3e 98       	cbi	0x07, 6	; 7
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <gpib_readdat+0x28>
	do
	{
		if (timer_ticked() || quickTimeoutPoll)
			timedout = ptimeoutfunc();
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    23ce:	81 11       	cpse	r24, r1
    23d0:	27 c0       	rjmp	.+78     	; 0x2420 <gpib_readdat+0x76>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    23d2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    23d6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	
	
	do
	{
		if (timer_ticked() || quickTimeoutPoll)
			timedout = ptimeoutfunc();
    23da:	fe 01       	movw	r30, r28
    23dc:	09 95       	icall
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    23de:	1e 99       	sbic	0x03, 6	; 3
    23e0:	f6 cf       	rjmp	.-20     	; 0x23ce <gpib_readdat+0x24>
	
	if (!timedout)
    23e2:	81 11       	cpse	r24, r1
    23e4:	1d c0       	rjmp	.+58     	; 0x2420 <gpib_readdat+0x76>
	{
		NRFD_LOW;
    23e6:	3e 9a       	sbi	0x07, 6	; 7
		c = ~PIND;
    23e8:	09 b1       	in	r16, 0x09	; 9
    23ea:	00 95       	com	r16
		eoi = (EOI_STATE == 0) ;
    23ec:	83 b1       	in	r24, 0x03	; 3
    23ee:	80 71       	andi	r24, 0x10	; 16
    23f0:	b8 2e       	mov	r11, r24
		NDAC_HIGH;
    23f2:	3f 98       	cbi	0x07, 7	; 7
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <gpib_readdat+0x50>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    23f6:	81 11       	cpse	r24, r1
    23f8:	09 c0       	rjmp	.+18     	; 0x240c <gpib_readdat+0x62>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    23fa:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    23fe:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		NDAC_HIGH;
		
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2402:	fe 01       	movw	r30, r28
    2404:	09 95       	icall
    2406:	18 2f       	mov	r17, r24
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    2408:	1e 9b       	sbis	0x03, 6	; 3
    240a:	f5 cf       	rjmp	.-22     	; 0x23f6 <gpib_readdat+0x4c>
	}

	
	if (s_terminator == '\0')
    240c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <s_terminator>
    2410:	88 23       	and	r24, r24
    2412:	79 f1       	breq	.+94     	; 0x2472 <gpib_readdat+0xc8>
		*pEoi = eoi;
	else
		*pEoi = eoi || (c == s_terminator);
    2414:	91 e0       	ldi	r25, 0x01	; 1
    2416:	b1 10       	cpse	r11, r1
    2418:	34 c0       	rjmp	.+104    	; 0x2482 <gpib_readdat+0xd8>
    241a:	f7 01       	movw	r30, r14
    241c:	90 83       	st	Z, r25
    241e:	09 c0       	rjmp	.+18     	; 0x2432 <gpib_readdat+0x88>
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    2420:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <s_terminator>
    2424:	81 11       	cpse	r24, r1
    2426:	29 c0       	rjmp	.+82     	; 0x247a <gpib_readdat+0xd0>
    2428:	11 e0       	ldi	r17, 0x01	; 1
    242a:	00 e0       	ldi	r16, 0x00	; 0
    242c:	80 e0       	ldi	r24, 0x00	; 0
		*pEoi = eoi;
    242e:	f7 01       	movw	r30, r14
    2430:	80 83       	st	Z, r24
	else
		*pEoi = eoi || (c == s_terminator);

	if (timedout)
    2432:	11 11       	cpse	r17, r1
	}
}

void gpib_recover(void)
{
	gpib_init();
    2434:	93 db       	rcall	.-2266   	; 0x1b5c <gpib_init>
	{
		gpib_recover();
	}
	*ptimedout = timedout;
    2436:	f6 01       	movw	r30, r12
    2438:	10 83       	st	Z, r17
	
	NRFD_LOW;
    243a:	3e 9a       	sbi	0x07, 6	; 7


uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
	return gpib_readdat_quick(pEoi, ptimedout, ptimeoutfunc, true);
};
    243c:	80 2f       	mov	r24, r16
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	bf 90       	pop	r11
    2450:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2452:	8f e6       	ldi	r24, 0x6F	; 111
    2454:	93 e0       	ldi	r25, 0x03	; 3
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <gpib_readdat+0xac>
    245a:	00 c0       	rjmp	.+0      	; 0x245c <gpib_readdat+0xb2>
    245c:	00 00       	nop
	
	// ensure that ATN is high
	bool atn_was_low = !ATN_OUT_STATE;
	if (atn_was_low)
		_delay_us(220);
	ATN_HIGH;
    245e:	86 98       	cbi	0x10, 6	; 16
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    2460:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    2462:	3e 98       	cbi	0x07, 6	; 7
    2464:	e7 e1       	ldi	r30, 0x17	; 23
    2466:	f1 e0       	ldi	r31, 0x01	; 1
    2468:	31 97       	sbiw	r30, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <gpib_readdat+0xbe>
    246c:	00 c0       	rjmp	.+0      	; 0x246e <gpib_readdat+0xc4>
    246e:	00 00       	nop
    2470:	b0 cf       	rjmp	.-160    	; 0x23d2 <gpib_readdat+0x28>
	
	if (!timedout)
	{
		NRFD_LOW;
		c = ~PIND;
		eoi = (EOI_STATE == 0) ;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	bb 20       	and	r11, r11
    2476:	d9 f2       	breq	.-74     	; 0x242e <gpib_readdat+0x84>
    2478:	d9 cf       	rjmp	.-78     	; 0x242c <gpib_readdat+0x82>
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	11 e0       	ldi	r17, 0x01	; 1
    247e:	00 e0       	ldi	r16, 0x00	; 0
    2480:	cc cf       	rjmp	.-104    	; 0x241a <gpib_readdat+0x70>
    2482:	08 17       	cp	r16, r24
    2484:	51 f2       	breq	.-108    	; 0x241a <gpib_readdat+0x70>
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	c8 cf       	rjmp	.-112    	; 0x241a <gpib_readdat+0x70>

0000248a <gpib_untalk_unlisten>:

bool gpib_untalk_unlisten(gpibtimeout_t ptimeoutfunc)
{
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
    248e:	ec 01       	movw	r28, r24

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    2490:	86 9b       	sbis	0x10, 6	; 16
    2492:	53 c0       	rjmp	.+166    	; 0x253a <gpib_untalk_unlisten+0xb0>
			_delay_us(220);
		ATN_LOW;
    2494:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2496:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2498:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    249a:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    249c:	8f e3       	ldi	r24, 0x3F	; 63
    249e:	8a b9       	out	0x0a, r24	; 10
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <gpib_untalk_unlisten+0x1c>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    24a2:	81 11       	cpse	r24, r1
    24a4:	41 c0       	rjmp	.+130    	; 0x2528 <gpib_untalk_unlisten+0x9e>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    24a6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    24aa:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    24ae:	fe 01       	movw	r30, r28
    24b0:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    24b2:	36 9b       	sbis	0x06, 6	; 6
    24b4:	f6 cf       	rjmp	.-20     	; 0x24a2 <gpib_untalk_unlisten+0x18>

	if (!timedout)
    24b6:	81 11       	cpse	r24, r1
    24b8:	37 c0       	rjmp	.+110    	; 0x2528 <gpib_untalk_unlisten+0x9e>
	{
		DAV_LOW;
    24ba:	26 9a       	sbi	0x04, 6	; 4
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <gpib_untalk_unlisten+0x38>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    24be:	81 11       	cpse	r24, r1
    24c0:	32 c0       	rjmp	.+100    	; 0x2526 <gpib_untalk_unlisten+0x9c>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    24c2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    24c6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    24ca:	fe 01       	movw	r30, r28
    24cc:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    24ce:	37 9b       	sbis	0x06, 7	; 6
    24d0:	f6 cf       	rjmp	.-20     	; 0x24be <gpib_untalk_unlisten+0x34>
		DAV_HIGH;
    24d2:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    24d4:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    24d6:	81 11       	cpse	r24, r1
    24d8:	28 c0       	rjmp	.+80     	; 0x252a <gpib_untalk_unlisten+0xa0>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    24da:	86 9b       	sbis	0x10, 6	; 16
    24dc:	3c c0       	rjmp	.+120    	; 0x2556 <gpib_untalk_unlisten+0xcc>
			_delay_us(220);
		ATN_LOW;
    24de:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    24e0:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    24e2:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    24e4:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    24e6:	8f e5       	ldi	r24, 0x5F	; 95
    24e8:	8a b9       	out	0x0a, r24	; 10
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <gpib_untalk_unlisten+0x66>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    24ec:	81 11       	cpse	r24, r1
    24ee:	1c c0       	rjmp	.+56     	; 0x2528 <gpib_untalk_unlisten+0x9e>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    24f0:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    24f4:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    24f8:	fe 01       	movw	r30, r28
    24fa:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    24fc:	36 9b       	sbis	0x06, 6	; 6
    24fe:	f6 cf       	rjmp	.-20     	; 0x24ec <gpib_untalk_unlisten+0x62>

	if (!timedout)
    2500:	81 11       	cpse	r24, r1
    2502:	12 c0       	rjmp	.+36     	; 0x2528 <gpib_untalk_unlisten+0x9e>
	{
		DAV_LOW;
    2504:	26 9a       	sbi	0x04, 6	; 4
    2506:	02 c0       	rjmp	.+4      	; 0x250c <gpib_untalk_unlisten+0x82>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2508:	81 11       	cpse	r24, r1
    250a:	0d c0       	rjmp	.+26     	; 0x2526 <gpib_untalk_unlisten+0x9c>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    250c:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2510:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2514:	fe 01       	movw	r30, r28
    2516:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2518:	37 9b       	sbis	0x06, 7	; 6
    251a:	f6 cf       	rjmp	.-20     	; 0x2508 <gpib_untalk_unlisten+0x7e>
		DAV_HIGH;
    251c:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    251e:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    2520:	88 23       	and	r24, r24
    2522:	31 f0       	breq	.+12     	; 0x2530 <gpib_untalk_unlisten+0xa6>
    2524:	02 c0       	rjmp	.+4      	; 0x252a <gpib_untalk_unlisten+0xa0>
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    2526:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    2528:	1a b8       	out	0x0a, r1	; 10
	}
}

void gpib_recover(void)
{
	gpib_init();
    252a:	18 db       	rcall	.-2512   	; 0x1b5c <gpib_init>
    252c:	17 db       	rcall	.-2514   	; 0x1b5c <gpib_init>
    252e:	81 e0       	ldi	r24, 0x01	; 1
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (timedout)
		gpib_recover();
		
	s_gpib_transaction_active = false;
    2530:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
	return timedout;
}
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret
    253a:	8f e6       	ldi	r24, 0x6F	; 111
    253c:	93 e0       	ldi	r25, 0x03	; 3
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <gpib_untalk_unlisten+0xb4>
    2542:	00 c0       	rjmp	.+0      	; 0x2544 <gpib_untalk_unlisten+0xba>
    2544:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    2546:	86 9a       	sbi	0x10, 6	; 16
    2548:	e7 e1       	ldi	r30, 0x17	; 23
    254a:	f1 e0       	ldi	r31, 0x01	; 1
    254c:	31 97       	sbiw	r30, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <gpib_untalk_unlisten+0xc2>
    2550:	00 c0       	rjmp	.+0      	; 0x2552 <gpib_untalk_unlisten+0xc8>
    2552:	00 00       	nop
    2554:	a0 cf       	rjmp	.-192    	; 0x2496 <gpib_untalk_unlisten+0xc>
    2556:	8f e6       	ldi	r24, 0x6F	; 111
    2558:	93 e0       	ldi	r25, 0x03	; 3
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <gpib_untalk_unlisten+0xd0>
    255e:	00 c0       	rjmp	.+0      	; 0x2560 <gpib_untalk_unlisten+0xd6>
    2560:	00 00       	nop
    2562:	86 9a       	sbi	0x10, 6	; 16
    2564:	e7 e1       	ldi	r30, 0x17	; 23
    2566:	f1 e0       	ldi	r31, 0x01	; 1
    2568:	31 97       	sbiw	r30, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <gpib_untalk_unlisten+0xde>
    256c:	00 c0       	rjmp	.+0      	; 0x256e <gpib_untalk_unlisten+0xe4>
    256e:	00 00       	nop
    2570:	b7 cf       	rjmp	.-146    	; 0x24e0 <gpib_untalk_unlisten+0x56>

00002572 <gpib_make_talker>:

bool  gpib_make_talker(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	18 2f       	mov	r17, r24
    257a:	eb 01       	movw	r28, r22
	bool timedout;
	
	s_gpib_transaction_active = true;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <s_gpib_transaction_active>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    2582:	86 9b       	sbis	0x10, 6	; 16
    2584:	3c c0       	rjmp	.+120    	; 0x25fe <gpib_make_talker+0x8c>
			_delay_us(220);
		ATN_LOW;
    2586:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2588:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    258a:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    258c:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    258e:	8f e3       	ldi	r24, 0x3F	; 63
    2590:	8a b9       	out	0x0a, r24	; 10
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <gpib_make_talker+0x26>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2594:	81 11       	cpse	r24, r1
    2596:	2a c0       	rjmp	.+84     	; 0x25ec <gpib_make_talker+0x7a>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2598:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    259c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    25a0:	fe 01       	movw	r30, r28
    25a2:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    25a4:	36 9b       	sbis	0x06, 6	; 6
    25a6:	f6 cf       	rjmp	.-20     	; 0x2594 <gpib_make_talker+0x22>

	if (!timedout)
    25a8:	81 11       	cpse	r24, r1
    25aa:	20 c0       	rjmp	.+64     	; 0x25ec <gpib_make_talker+0x7a>
	{
		DAV_LOW;
    25ac:	26 9a       	sbi	0x04, 6	; 4
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <gpib_make_talker+0x42>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    25b0:	81 11       	cpse	r24, r1
    25b2:	1b c0       	rjmp	.+54     	; 0x25ea <gpib_make_talker+0x78>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    25b4:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    25b8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    25bc:	fe 01       	movw	r30, r28
    25be:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    25c0:	37 9b       	sbis	0x06, 7	; 6
    25c2:	f6 cf       	rjmp	.-20     	; 0x25b0 <gpib_make_talker+0x3e>
		DAV_HIGH;
    25c4:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    25c6:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    25c8:	81 11       	cpse	r24, r1
    25ca:	11 c0       	rjmp	.+34     	; 0x25ee <gpib_make_talker+0x7c>
	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_LAG(0, ptimeoutfunc); /* signal that controller is listener */
    25cc:	be 01       	movw	r22, r28
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	3f db       	rcall	.-2434   	; 0x1c50 <gpib_cmd_LAG>
	if (!timedout)
    25d2:	81 11       	cpse	r24, r1
    25d4:	0d c0       	rjmp	.+26     	; 0x25f0 <gpib_make_talker+0x7e>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
    25d6:	be 01       	movw	r22, r28
    25d8:	81 2f       	mov	r24, r17
    25da:	bb db       	rcall	.-2186   	; 0x1d52 <gpib_cmd_TAG>
	//_delay_us(10);
		
	NDAC_LOW;   /* make NDAC L */
    25dc:	3f 9a       	sbi	0x07, 7	; 7
	//NRFD_LOW;
	
	if (timedout)
    25de:	81 11       	cpse	r24, r1
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <gpib_make_talker+0x80>
		gpib_recover();
	return timedout;
}
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	08 95       	ret
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
	}
	
	DDRD = 0x00; /* release data bus */
    25ea:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    25ec:	1a b8       	out	0x0a, r1	; 10
		timedout = gpib_cmd_LAG(0, ptimeoutfunc); /* signal that controller is listener */
	if (!timedout)
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
	//_delay_us(10);
		
	NDAC_LOW;   /* make NDAC L */
    25ee:	b6 da       	rcall	.-2708   	; 0x1b5c <gpib_init>
	}
}

void gpib_recover(void)
{
	gpib_init();
    25f0:	3f 9a       	sbi	0x07, 7	; 7
    25f2:	b4 da       	rcall	.-2712   	; 0x1b5c <gpib_init>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
	//NRFD_LOW;
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	08 95       	ret
    25fe:	8f e6       	ldi	r24, 0x6F	; 111
    2600:	93 e0       	ldi	r25, 0x03	; 3
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <gpib_make_talker+0x90>
    2606:	00 c0       	rjmp	.+0      	; 0x2608 <gpib_make_talker+0x96>
    2608:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    260a:	86 9a       	sbi	0x10, 6	; 16
    260c:	e7 e1       	ldi	r30, 0x17	; 23
    260e:	f1 e0       	ldi	r31, 0x01	; 1
    2610:	31 97       	sbiw	r30, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <gpib_make_talker+0x9e>
    2614:	00 c0       	rjmp	.+0      	; 0x2616 <gpib_make_talker+0xa4>
    2616:	00 00       	nop
    2618:	b7 cf       	rjmp	.-146    	; 0x2588 <gpib_make_talker+0x16>

0000261a <gpib_make_listener>:


bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	18 2f       	mov	r17, r24
    2622:	eb 01       	movw	r28, r22
	bool timedout;
	s_gpib_transaction_active = true;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <s_gpib_transaction_active>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    262a:	86 9b       	sbis	0x10, 6	; 16
    262c:	5f c0       	rjmp	.+190    	; 0x26ec <gpib_make_listener+0xd2>
			_delay_us(220);
		ATN_LOW;
    262e:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2630:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2632:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    2634:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    2636:	8f e5       	ldi	r24, 0x5F	; 95
    2638:	8a b9       	out	0x0a, r24	; 10
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <gpib_make_listener+0x26>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    263c:	81 11       	cpse	r24, r1
    263e:	4e c0       	rjmp	.+156    	; 0x26dc <gpib_make_listener+0xc2>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2640:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2644:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    2648:	fe 01       	movw	r30, r28
    264a:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    264c:	36 9b       	sbis	0x06, 6	; 6
    264e:	f6 cf       	rjmp	.-20     	; 0x263c <gpib_make_listener+0x22>

	if (!timedout)
    2650:	81 11       	cpse	r24, r1
    2652:	44 c0       	rjmp	.+136    	; 0x26dc <gpib_make_listener+0xc2>
	{
		DAV_LOW;
    2654:	26 9a       	sbi	0x04, 6	; 4
    2656:	02 c0       	rjmp	.+4      	; 0x265c <gpib_make_listener+0x42>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2658:	81 11       	cpse	r24, r1
    265a:	3f c0       	rjmp	.+126    	; 0x26da <gpib_make_listener+0xc0>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    265c:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2660:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2664:	fe 01       	movw	r30, r28
    2666:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2668:	37 9b       	sbis	0x06, 7	; 6
    266a:	f6 cf       	rjmp	.-20     	; 0x2658 <gpib_make_listener+0x3e>
		DAV_HIGH;
    266c:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    266e:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    2670:	81 11       	cpse	r24, r1
    2672:	35 c0       	rjmp	.+106    	; 0x26de <gpib_make_listener+0xc4>
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_TAG(0, ptimeoutfunc); /* signal that controller is talker */
    2674:	be 01       	movw	r22, r28
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	6c db       	rcall	.-2344   	; 0x1d52 <gpib_cmd_TAG>
	if (!timedout)
    267a:	81 11       	cpse	r24, r1
    267c:	31 c0       	rjmp	.+98     	; 0x26e0 <gpib_make_listener+0xc6>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    267e:	86 9b       	sbis	0x10, 6	; 16
    2680:	43 c0       	rjmp	.+134    	; 0x2708 <gpib_make_listener+0xee>
			_delay_us(220);
		ATN_LOW;
    2682:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2684:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2686:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    2688:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    268a:	8f e3       	ldi	r24, 0x3F	; 63
    268c:	8a b9       	out	0x0a, r24	; 10
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <gpib_make_listener+0x7a>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2690:	81 11       	cpse	r24, r1
    2692:	24 c0       	rjmp	.+72     	; 0x26dc <gpib_make_listener+0xc2>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2694:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2698:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    269c:	fe 01       	movw	r30, r28
    269e:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    26a0:	36 9b       	sbis	0x06, 6	; 6
    26a2:	f6 cf       	rjmp	.-20     	; 0x2690 <gpib_make_listener+0x76>

	if (!timedout)
    26a4:	81 11       	cpse	r24, r1
    26a6:	1a c0       	rjmp	.+52     	; 0x26dc <gpib_make_listener+0xc2>
	{
		DAV_LOW;
    26a8:	26 9a       	sbi	0x04, 6	; 4
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <gpib_make_listener+0x96>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    26ac:	81 11       	cpse	r24, r1
    26ae:	15 c0       	rjmp	.+42     	; 0x26da <gpib_make_listener+0xc0>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    26b0:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    26b4:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    26b8:	fe 01       	movw	r30, r28
    26ba:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    26bc:	37 9b       	sbis	0x06, 7	; 6
    26be:	f6 cf       	rjmp	.-20     	; 0x26ac <gpib_make_listener+0x92>
		DAV_HIGH;
    26c0:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    26c2:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    26c4:	81 11       	cpse	r24, r1
    26c6:	0b c0       	rjmp	.+22     	; 0x26de <gpib_make_listener+0xc4>
		timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
    26c8:	be 01       	movw	r22, r28
    26ca:	81 2f       	mov	r24, r17
    26cc:	c1 da       	rcall	.-2686   	; 0x1c50 <gpib_cmd_LAG>
		
	if (timedout)
    26ce:	81 11       	cpse	r24, r1
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <gpib_make_listener+0xc6>
		gpib_recover();
	return timedout;
}
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	1f 91       	pop	r17
    26d8:	08 95       	ret
	}
}

void gpib_recover(void)
{
	gpib_init();
    26da:	26 98       	cbi	0x04, 6	; 4
    26dc:	1a b8       	out	0x0a, r1	; 10
    26de:	3e da       	rcall	.-2948   	; 0x1b5c <gpib_init>
    26e0:	3d da       	rcall	.-2950   	; 0x1b5c <gpib_init>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	08 95       	ret
    26ec:	8f e6       	ldi	r24, 0x6F	; 111
    26ee:	93 e0       	ldi	r25, 0x03	; 3
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <gpib_make_listener+0xd6>
    26f4:	00 c0       	rjmp	.+0      	; 0x26f6 <gpib_make_listener+0xdc>
    26f6:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    26f8:	86 9a       	sbi	0x10, 6	; 16
    26fa:	e7 e1       	ldi	r30, 0x17	; 23
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
    26fe:	31 97       	sbiw	r30, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <gpib_make_listener+0xe4>
    2702:	00 c0       	rjmp	.+0      	; 0x2704 <gpib_make_listener+0xea>
    2704:	00 00       	nop
    2706:	94 cf       	rjmp	.-216    	; 0x2630 <gpib_make_listener+0x16>
    2708:	8f e6       	ldi	r24, 0x6F	; 111
    270a:	93 e0       	ldi	r25, 0x03	; 3
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <gpib_make_listener+0xf2>
    2710:	00 c0       	rjmp	.+0      	; 0x2712 <gpib_make_listener+0xf8>
    2712:	00 00       	nop
    2714:	86 9a       	sbi	0x10, 6	; 16
    2716:	e7 e1       	ldi	r30, 0x17	; 23
    2718:	f1 e0       	ldi	r31, 0x01	; 1
    271a:	31 97       	sbiw	r30, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <gpib_make_listener+0x100>
    271e:	00 c0       	rjmp	.+0      	; 0x2720 <gpib_make_listener+0x106>
    2720:	00 00       	nop
    2722:	b0 cf       	rjmp	.-160    	; 0x2684 <gpib_make_listener+0x6a>

00002724 <gpib_writedat>:

bool gpib_writedat(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc)
{
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	ea 01       	movw	r28, r20
}

static inline bool gpib_writedat_quick(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc, bool quickTimeoutPoll)
{
	bool timedout;
	if (Eoi)
    272a:	61 11       	cpse	r22, r1
	{
		EOI_LOW; /* make EOI L */
    272c:	24 9a       	sbi	0x04, 4	; 4
			_delay_us(70);
	}
	else
	{
		bool atn_was_low = !ATN_OUT_STATE;
		if (atn_was_low)
    272e:	86 99       	sbic	0x10, 6	; 16
    2730:	2e c0       	rjmp	.+92     	; 0x278e <gpib_writedat+0x6a>
			_delay_us(220);
		ATN_HIGH;
    2732:	86 98       	cbi	0x10, 6	; 16
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2734:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    2736:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    2738:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    273a:	8a b9       	out	0x0a, r24	; 10
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <gpib_writedat+0x1e>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    273e:	81 11       	cpse	r24, r1
    2740:	1f c0       	rjmp	.+62     	; 0x2780 <gpib_writedat+0x5c>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2742:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2746:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    274a:	fe 01       	movw	r30, r28
    274c:	09 95       	icall
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    274e:	36 9b       	sbis	0x06, 6	; 6
    2750:	f6 cf       	rjmp	.-20     	; 0x273e <gpib_writedat+0x1a>

	if (!timedout)
    2752:	81 11       	cpse	r24, r1
    2754:	15 c0       	rjmp	.+42     	; 0x2780 <gpib_writedat+0x5c>
	{
		DAV_LOW;
    2756:	26 9a       	sbi	0x04, 6	; 4
    2758:	02 c0       	rjmp	.+4      	; 0x275e <gpib_writedat+0x3a>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    275a:	81 11       	cpse	r24, r1
    275c:	10 c0       	rjmp	.+32     	; 0x277e <gpib_writedat+0x5a>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    275e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2762:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2766:	fe 01       	movw	r30, r28
    2768:	09 95       	icall
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    276a:	37 9b       	sbis	0x06, 7	; 6
    276c:	f6 cf       	rjmp	.-20     	; 0x275a <gpib_writedat+0x36>
		DAV_HIGH;
    276e:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    2770:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    2772:	81 11       	cpse	r24, r1
    2774:	06 c0       	rjmp	.+12     	; 0x2782 <gpib_writedat+0x5e>
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_tx_quick(dat, false, ptimeoutfunc, quickTimeoutPoll);
	EOI_HIGH;    /* make EOI H */
    2776:	24 98       	cbi	0x04, 4	; 4
	return gpib_writedat_quick(dat, Eoi, ptimeoutfunc, true);
}
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	08 95       	ret
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    277e:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    2780:	1a b8       	out	0x0a, r1	; 10
	}
}

void gpib_recover(void)
{
	gpib_init();
    2782:	ec d9       	rcall	.-3112   	; 0x1b5c <gpib_init>
    2784:	81 e0       	ldi	r24, 0x01	; 1
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_tx_quick(dat, false, ptimeoutfunc, quickTimeoutPoll);
	EOI_HIGH;    /* make EOI H */
    2786:	24 98       	cbi	0x04, 4	; 4
}

bool gpib_writedat(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc)
{
	return gpib_writedat_quick(dat, Eoi, ptimeoutfunc, true);
}
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	08 95       	ret
    278e:	ef e6       	ldi	r30, 0x6F	; 111
    2790:	f3 e0       	ldi	r31, 0x03	; 3
    2792:	31 97       	sbiw	r30, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <gpib_writedat+0x6e>
    2796:	00 c0       	rjmp	.+0      	; 0x2798 <gpib_writedat+0x74>
    2798:	00 00       	nop
	else
	{
		bool atn_was_low = !ATN_OUT_STATE;
		if (atn_was_low)
			_delay_us(220);
		ATN_HIGH;
    279a:	86 98       	cbi	0x10, 6	; 16
    279c:	e7 e1       	ldi	r30, 0x17	; 23
    279e:	f1 e0       	ldi	r31, 0x01	; 1
    27a0:	31 97       	sbiw	r30, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <gpib_writedat+0x7c>
    27a4:	00 c0       	rjmp	.+0      	; 0x27a6 <gpib_writedat+0x82>
    27a6:	00 00       	nop
    27a8:	c5 cf       	rjmp	.-118    	; 0x2734 <gpib_writedat+0x10>

000027aa <gpib_get_readtermination>:

char gpib_get_readtermination(void)
{
	return s_terminator;
}
    27aa:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <s_terminator>
    27ae:	08 95       	ret

000027b0 <gpib_set_readtermination>:

void gpib_set_readtermination(char terminator)
{
	switch(terminator)
    27b0:	8a 30       	cpi	r24, 0x0A	; 10
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <gpib_set_readtermination+0x8>
    27b4:	8d 30       	cpi	r24, 0x0D	; 13
    27b6:	19 f4       	brne	.+6      	; 0x27be <gpib_set_readtermination+0xe>
	{
		case '\n':
			s_terminator = '\n';
			break;
		case '\r':
			s_terminator = '\r';
    27b8:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <s_terminator>
			break;
    27bc:	08 95       	ret
		default:
			s_terminator = '\0';
    27be:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <s_terminator>
    27c2:	08 95       	ret

000027c4 <gpib_search>:
	return false;
}
#define LED(s) {if(s) PORTF |= (1<<5); else PORTF &= ~(1<<5);}

uint8_t gpib_search(void)
{
    27c4:	0f 93       	push	r16
    27c6:	1f 93       	push	r17
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
	uint8_t addr, foundaddr;
	
	s_gpib_transaction_active = true;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <s_gpib_transaction_active>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    27d2:	84 ef       	ldi	r24, 0xF4	; 244
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <timeout_val+0x1>
    27da:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <timeout_val>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    27de:	86 9b       	sbis	0x10, 6	; 16
    27e0:	d2 c0       	rjmp	.+420    	; 0x2986 <gpib_search+0x1c2>
			_delay_us(220);
		ATN_LOW;
    27e2:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    27e4:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    27e6:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    27e8:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    27ea:	8f e3       	ldi	r24, 0x3F	; 63
    27ec:	8a b9       	out	0x0a, r24	; 10
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <gpib_search+0x30>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    27f0:	81 11       	cpse	r24, r1
    27f2:	1a c0       	rjmp	.+52     	; 0x2828 <gpib_search+0x64>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    27f4:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    27f8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    27fc:	64 d9       	rcall	.-3384   	; 0x1ac6 <is_timedout>
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    27fe:	36 9b       	sbis	0x06, 6	; 6
    2800:	f7 cf       	rjmp	.-18     	; 0x27f0 <gpib_search+0x2c>

	if (!timedout)
    2802:	81 11       	cpse	r24, r1
    2804:	11 c0       	rjmp	.+34     	; 0x2828 <gpib_search+0x64>
	{
		DAV_LOW;
    2806:	26 9a       	sbi	0x04, 6	; 4
    2808:	02 c0       	rjmp	.+4      	; 0x280e <gpib_search+0x4a>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    280a:	81 11       	cpse	r24, r1
    280c:	0c c0       	rjmp	.+24     	; 0x2826 <gpib_search+0x62>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    280e:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2812:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    2816:	57 d9       	rcall	.-3410   	; 0x1ac6 <is_timedout>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    2818:	37 9b       	sbis	0x06, 7	; 6
    281a:	f7 cf       	rjmp	.-18     	; 0x280a <gpib_search+0x46>
		DAV_HIGH;
    281c:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    281e:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    2820:	88 23       	and	r24, r24
    2822:	21 f0       	breq	.+8      	; 0x282c <gpib_search+0x68>
    2824:	02 c0       	rjmp	.+4      	; 0x282a <gpib_search+0x66>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
	}
	
	DDRD = 0x00; /* release data bus */
    2826:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    2828:	1a b8       	out	0x0a, r1	; 10
    282a:	98 d9       	rcall	.-3280   	; 0x1b5c <gpib_init>
	return false;
}
#define LED(s) {if(s) PORTF |= (1<<5); else PORTF &= ~(1<<5);}

uint8_t gpib_search(void)
{
    282c:	c0 e0       	ldi	r28, 0x00	; 0

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    282e:	04 ef       	ldi	r16, 0xF4	; 244
    2830:	11 e0       	ldi	r17, 0x01	; 1
	
	foundaddr = 255;
	addr = 0; // start searching from GPIB Address 1 onwards as 0 is reserved for controller
	do
	{
		addr++;
    2832:	cf 5f       	subi	r28, 0xFF	; 255
    2834:	dc 2f       	mov	r29, r28
    2836:	df 71       	andi	r29, 0x1F	; 31
		if ((addr & 0x1f) != 31)
    2838:	df 31       	cpi	r29, 0x1F	; 31
    283a:	09 f4       	brne	.+2      	; 0x283e <gpib_search+0x7a>
    283c:	86 c0       	rjmp	.+268    	; 0x294a <gpib_search+0x186>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    283e:	10 93 59 05 	sts	0x0559, r17	; 0x800559 <timeout_val+0x1>
    2842:	00 93 58 05 	sts	0x0558, r16	; 0x800558 <timeout_val>
	{
		addr++;
		if ((addr & 0x1f) != 31)
		{
			timeout_start(500);
			gpib_cmd_LAG(addr, is_timedout);
    2846:	63 e6       	ldi	r22, 0x63	; 99
    2848:	7d e0       	ldi	r23, 0x0D	; 13
    284a:	8c 2f       	mov	r24, r28
    284c:	01 da       	rcall	.-3070   	; 0x1c50 <gpib_cmd_LAG>
			
			ATN_HIGH; /* make ATN H */
    284e:	86 98       	cbi	0x10, 6	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2850:	8f e3       	ldi	r24, 0x3F	; 63
    2852:	9f e1       	ldi	r25, 0x1F	; 31
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <gpib_search+0x90>
    2858:	00 c0       	rjmp	.+0      	; 0x285a <gpib_search+0x96>
    285a:	00 00       	nop
			_delay_ms(2);
			if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    285c:	37 99       	sbic	0x06, 7	; 6
    285e:	75 c0       	rjmp	.+234    	; 0x294a <gpib_search+0x186>
    2860:	7e 9b       	sbis	0x0f, 6	; 15
    2862:	73 c0       	rjmp	.+230    	; 0x294a <gpib_search+0x186>
	
	foundaddr = 255;
	addr = 0; // start searching from GPIB Address 1 onwards as 0 is reserved for controller
	do
	{
		addr++;
    2864:	1c 2f       	mov	r17, r28

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    2866:	84 ef       	ldi	r24, 0xF4	; 244
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <timeout_val+0x1>
    286e:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <timeout_val>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    2872:	86 9b       	sbis	0x10, 6	; 16
    2874:	96 c0       	rjmp	.+300    	; 0x29a2 <gpib_search+0x1de>
			_delay_us(220);
		ATN_LOW;
    2876:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    2878:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    287a:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    287c:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    287e:	8f e3       	ldi	r24, 0x3F	; 63
    2880:	8a b9       	out	0x0a, r24	; 10
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <gpib_search+0xc4>
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2884:	81 11       	cpse	r24, r1
    2886:	67 c0       	rjmp	.+206    	; 0x2956 <gpib_search+0x192>
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2888:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    288c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    2890:	1a d9       	rcall	.-3532   	; 0x1ac6 <is_timedout>
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2892:	36 9b       	sbis	0x06, 6	; 6
    2894:	f7 cf       	rjmp	.-18     	; 0x2884 <gpib_search+0xc0>

	if (!timedout)
    2896:	81 11       	cpse	r24, r1
    2898:	5e c0       	rjmp	.+188    	; 0x2956 <gpib_search+0x192>
	{
		DAV_LOW;
    289a:	26 9a       	sbi	0x04, 6	; 4
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <gpib_search+0xde>
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    289e:	81 11       	cpse	r24, r1
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    28a0:	59 c0       	rjmp	.+178    	; 0x2954 <gpib_search+0x190>
    28a2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    28a6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    28aa:	0d d9       	rcall	.-3558   	; 0x1ac6 <is_timedout>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    28ac:	37 9b       	sbis	0x06, 7	; 6
    28ae:	f7 cf       	rjmp	.-18     	; 0x289e <gpib_search+0xda>
		DAV_HIGH;
    28b0:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    28b2:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    28b4:	81 11       	cpse	r24, r1
    28b6:	50 c0       	rjmp	.+160    	; 0x2958 <gpib_search+0x194>
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL

	
	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr >= 32)
    28b8:	c0 32       	cpi	r28, 0x20	; 32
    28ba:	08 f4       	brcc	.+2      	; 0x28be <gpib_search+0xfa>
    28bc:	51 c0       	rjmp	.+162    	; 0x2960 <gpib_search+0x19c>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    28be:	84 ef       	ldi	r24, 0xF4	; 244
    28c0:	91 e0       	ldi	r25, 0x01	; 1
    28c2:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <timeout_val+0x1>
    28c6:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <timeout_val>
	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr >= 32)
	{
		/* address once without SA. If it responds, force it to this primary addressing only! */
		timeout_start(500);
		gpib_cmd_LAG(addr & 0x1f, is_timedout);
    28ca:	63 e6       	ldi	r22, 0x63	; 99
    28cc:	7d e0       	ldi	r23, 0x0D	; 13
    28ce:	8d 2f       	mov	r24, r29
    28d0:	bf d9       	rcall	.-3202   	; 0x1c50 <gpib_cmd_LAG>
		ATN_HIGH; /* make ATN H */
    28d2:	86 98       	cbi	0x10, 6	; 16
    28d4:	8f e3       	ldi	r24, 0x3F	; 63
    28d6:	9f e1       	ldi	r25, 0x1F	; 31
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <gpib_search+0x114>
    28dc:	00 c0       	rjmp	.+0      	; 0x28de <gpib_search+0x11a>
    28de:	00 00       	nop
		_delay_ms(2);
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    28e0:	37 99       	sbic	0x06, 7	; 6
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <gpib_search+0x124>
    28e4:	7e 99       	sbic	0x0f, 6	; 15
    28e6:	6b c0       	rjmp	.+214    	; 0x29be <gpib_search+0x1fa>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    28e8:	84 ef       	ldi	r24, 0xF4	; 244
    28ea:	91 e0       	ldi	r25, 0x01	; 1
    28ec:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <timeout_val+0x1>
    28f0:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <timeout_val>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    28f4:	86 9b       	sbis	0x10, 6	; 16
    28f6:	6c c0       	rjmp	.+216    	; 0x29d0 <gpib_search+0x20c>
			_delay_us(220);
		ATN_LOW;
    28f8:	86 9a       	sbi	0x10, 6	; 16
		ATN_HIGH;
		if (atn_was_low)
			_delay_us(70);
	}
		
	DAV_HIGH;
    28fa:	26 98       	cbi	0x04, 6	; 4
	
	
	NRFD_HIGH;
    28fc:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    28fe:	3f 98       	cbi	0x07, 7	; 7
	

	DDRD = dat;
    2900:	8f e3       	ldi	r24, 0x3F	; 63
    2902:	8a b9       	out	0x0a, r24	; 10
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2904:	02 c0       	rjmp	.+4      	; 0x290a <gpib_search+0x146>
    2906:	81 11       	cpse	r24, r1
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2908:	34 c0       	rjmp	.+104    	; 0x2972 <gpib_search+0x1ae>
    290a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    290e:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		if (timer_ticked() || quickTimeoutPoll) /* the timeout function can consume significant time */
			timedout = ptimeoutfunc();
    2912:	d9 d8       	rcall	.-3662   	; 0x1ac6 <is_timedout>
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    2914:	36 9b       	sbis	0x06, 6	; 6
    2916:	f7 cf       	rjmp	.-18     	; 0x2906 <gpib_search+0x142>

	if (!timedout)
    2918:	81 11       	cpse	r24, r1
    291a:	2b c0       	rjmp	.+86     	; 0x2972 <gpib_search+0x1ae>
	{
		DAV_LOW;
    291c:	26 9a       	sbi	0x04, 6	; 4
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <gpib_search+0x160>
    2920:	81 11       	cpse	r24, r1
extern volatile bool timer0_ticked; /* flag going high every 100ms - defined in gpib.c */

/* check if 100ms timer ticked. returns true once every 100ms */
static inline bool timer_ticked(void)
{
	bool ticked = timer0_ticked;
    2922:	26 c0       	rjmp	.+76     	; 0x2970 <gpib_search+0x1ac>
    2924:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <timer0_ticked>
	timer0_ticked = false;
    2928:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <timer0_ticked>
	{
		DAV_LOW;
		do
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
    292c:	cc d8       	rcall	.-3688   	; 0x1ac6 <is_timedout>
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    292e:	37 9b       	sbis	0x06, 7	; 6
    2930:	f7 cf       	rjmp	.-18     	; 0x2920 <gpib_search+0x15c>
		DAV_HIGH;
    2932:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    2934:	1a b8       	out	0x0a, r1	; 10
	
	if (timedout)
    2936:	81 11       	cpse	r24, r1
    2938:	1d c0       	rjmp	.+58     	; 0x2974 <gpib_search+0x1b0>
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
	}
	
	s_gpib_transaction_active = false;
    293a:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
	
	return foundaddr;
}
    293e:	81 2f       	mov	r24, r17
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
				foundaddr = addr;
			}
		}
		
	}
	while ( (addr < 63) && (foundaddr == 255));
    2948:	08 95       	ret
    294a:	cf 33       	cpi	r28, 0x3F	; 63
    294c:	09 f0       	breq	.+2      	; 0x2950 <gpib_search+0x18c>
    294e:	71 cf       	rjmp	.-286    	; 0x2832 <gpib_search+0x6e>
    2950:	1f ef       	ldi	r17, 0xFF	; 255
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    2952:	89 cf       	rjmp	.-238    	; 0x2866 <gpib_search+0xa2>
	}
	
	DDRD = 0x00; /* release data bus */
    2954:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    2956:	1a b8       	out	0x0a, r1	; 10
    2958:	01 d9       	rcall	.-3582   	; 0x1b5c <gpib_init>
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL

	
	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr >= 32)
    295a:	c0 32       	cpi	r28, 0x20	; 32
    295c:	08 f0       	brcs	.+2      	; 0x2960 <gpib_search+0x19c>
    295e:	af cf       	rjmp	.-162    	; 0x28be <gpib_search+0xfa>
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
	}
	
	s_gpib_transaction_active = false;
    2960:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
	
	return foundaddr;
}
    2964:	81 2f       	mov	r24, r17
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
		{
			if (timer_ticked() || quickTimeoutPoll)
				timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
    296e:	08 95       	ret
	}
	
	DDRD = 0x00; /* release data bus */
    2970:	26 98       	cbi	0x04, 6	; 4
	}
}

void gpib_recover(void)
{
	gpib_init();
    2972:	1a b8       	out	0x0a, r1	; 10
    2974:	f3 d8       	rcall	.-3610   	; 0x1b5c <gpib_init>
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
	}
	
	s_gpib_transaction_active = false;
    2976:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <s_gpib_transaction_active>
	
	return foundaddr;
}
    297a:	81 2f       	mov	r24, r17
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2986:	8f e6       	ldi	r24, 0x6F	; 111
    2988:	93 e0       	ldi	r25, 0x03	; 3
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <gpib_search+0x1c6>
    298e:	00 c0       	rjmp	.+0      	; 0x2990 <gpib_search+0x1cc>
    2990:	00 00       	nop
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
			_delay_us(220);
		ATN_LOW;
    2992:	86 9a       	sbi	0x10, 6	; 16
    2994:	87 e1       	ldi	r24, 0x17	; 23
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <gpib_search+0x1d4>
    299c:	00 c0       	rjmp	.+0      	; 0x299e <gpib_search+0x1da>
    299e:	00 00       	nop
    29a0:	21 cf       	rjmp	.-446    	; 0x27e4 <gpib_search+0x20>
    29a2:	8f e6       	ldi	r24, 0x6F	; 111
    29a4:	93 e0       	ldi	r25, 0x03	; 3
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <gpib_search+0x1e2>
    29aa:	00 c0       	rjmp	.+0      	; 0x29ac <gpib_search+0x1e8>
    29ac:	00 00       	nop
    29ae:	86 9a       	sbi	0x10, 6	; 16
    29b0:	87 e1       	ldi	r24, 0x17	; 23
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <gpib_search+0x1f0>
    29b8:	00 c0       	rjmp	.+0      	; 0x29ba <gpib_search+0x1f6>
    29ba:	00 00       	nop
    29bc:	5d cf       	rjmp	.-326    	; 0x2878 <gpib_search+0xb4>
		/* address once without SA. If it responds, force it to this primary addressing only! */
		timeout_start(500);
		gpib_cmd_LAG(addr & 0x1f, is_timedout);
		ATN_HIGH; /* make ATN H */
		_delay_ms(2);
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    29be:	1d 2f       	mov	r17, r29

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    29c0:	84 ef       	ldi	r24, 0xF4	; 244
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <timeout_val+0x1>
    29c8:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <timeout_val>

	
	if (iscommand)
	{ /* set or reset ATN line. It based on a ticket and these delay times are important. The timing was measured on a commercial GPIB adapter. */
		bool atn_was_high = ATN_OUT_STATE;
		if (atn_was_high)
    29cc:	86 99       	sbic	0x10, 6	; 16
    29ce:	94 cf       	rjmp	.-216    	; 0x28f8 <gpib_search+0x134>
    29d0:	8f e6       	ldi	r24, 0x6F	; 111
    29d2:	93 e0       	ldi	r25, 0x03	; 3
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <gpib_search+0x210>
    29d8:	00 c0       	rjmp	.+0      	; 0x29da <gpib_search+0x216>
    29da:	00 00       	nop
			_delay_us(220);
		ATN_LOW;
    29dc:	86 9a       	sbi	0x10, 6	; 16
    29de:	87 e1       	ldi	r24, 0x17	; 23
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <gpib_search+0x21e>
    29e6:	00 c0       	rjmp	.+0      	; 0x29e8 <gpib_search+0x224>
    29e8:	00 00       	nop
    29ea:	87 cf       	rjmp	.-242    	; 0x28fa <gpib_search+0x136>

000029ec <cmd_addr>:
	eeprom_update_if_changed(105, '\r');
	gpib_set_readtermination('\r');
}

void cmd_addr(void)
{
    29ec:	08 95       	ret

000029ee <cmd_autoid_slow>:
	eeprom_update_if_changed(104, 0x01); // autoId OFF
}

void cmd_autoid_slow(void)
{
	eeprom_update_if_changed(104, 0x02); // autoId SLOW
    29ee:	62 e0       	ldi	r22, 0x02	; 2
    29f0:	88 e6       	ldi	r24, 0x68	; 104
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

000029f8 <cmd_autoid_slower>:
}

void cmd_autoid_slower(void)
{
	eeprom_update_if_changed(104, 0x03); // autoId SLOWEST
    29f8:	63 e0       	ldi	r22, 0x03	; 3
    29fa:	88 e6       	ldi	r24, 0x68	; 104
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

00002a02 <cmd_autoid_slowest>:
}

void cmd_autoid_slowest(void)
{
	eeprom_update_if_changed(104, 0x04); // autoId SLOWEST
    2a02:	64 e0       	ldi	r22, 0x04	; 4
    2a04:	88 e6       	ldi	r24, 0x68	; 104
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

00002a0c <cmd_0000>:
	set_internal_response((void*)"V1.8", 4);
}

void cmd_0000(void)
{
	eeprom_update_if_changed(104, 0x00); // autoId ON
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	88 e6       	ldi	r24, 0x68	; 104
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

00002a16 <cmd_autoid_on>:
    2a16:	fa cf       	rjmp	.-12     	; 0x2a0c <cmd_0000>

00002a18 <cmd_0001>:
}

void cmd_0001(void)
{
	eeprom_update_if_changed(104, 0x01); // autoId OFF
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	88 e6       	ldi	r24, 0x68	; 104
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

00002a22 <cmd_autoid_off>:
    2a22:	fa cf       	rjmp	.-12     	; 0x2a18 <cmd_0001>

00002a24 <cmd_string_short>:
	Jump_To_Bootloader();
}

void cmd_string_short(void)
{
	eeprom_update_if_changed(106, 1);
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	8a e6       	ldi	r24, 0x6A	; 106
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

00002a2e <cmd_string_normal>:
}

void cmd_string_normal(void)
{
    eeprom_update_if_changed(106, 0);
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	8a e6       	ldi	r24, 0x6A	; 106
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

00002a38 <cmd_ver_query>:
	eeprom_update_if_changed(105, gpib_get_readtermination());
}

void cmd_ver_query(void)
{
	set_internal_response((void*)"V1.8", 4);
    2a38:	64 e0       	ldi	r22, 0x04	; 4
    2a3a:	8d e1       	ldi	r24, 0x1D	; 29
    2a3c:	91 e0       	ldi	r25, 0x01	; 1
    2a3e:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>

00002a42 <cmd_term_cr>:
	}
}

void cmd_term_cr(void)
{
	gpib_set_readtermination('\r');
    2a42:	8d e0       	ldi	r24, 0x0D	; 13
    2a44:	b5 ce       	rjmp	.-662    	; 0x27b0 <gpib_set_readtermination>

00002a46 <cmd_term_lf>:
}

void cmd_term_lf(void)
{
	gpib_set_readtermination('\n');
    2a46:	8a e0       	ldi	r24, 0x0A	; 10
    2a48:	b3 ce       	rjmp	.-666    	; 0x27b0 <gpib_set_readtermination>

00002a4a <cmd_term_eoi>:
}

void cmd_term_eoi(void)
{
	gpib_set_readtermination('\0');
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	b1 ce       	rjmp	.-670    	; 0x27b0 <gpib_set_readtermination>

00002a4e <cmd_0100>:
	eeprom_update_if_changed(104, 0x01); // autoId OFF
}

void cmd_0100(void)
{
	eeprom_update_if_changed(105, '\0');
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	89 e6       	ldi	r24, 0x69	; 105
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 ce 04 	call	0x99c	; 0x99c <eeprom_update_if_changed>
	gpib_set_readtermination('\0');
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	aa ce       	rjmp	.-684    	; 0x27b0 <gpib_set_readtermination>

00002a5c <cmd_0101>:
}

void cmd_0101(void)
{
	eeprom_update_if_changed(105, '\n');
    2a5c:	6a e0       	ldi	r22, 0x0A	; 10
    2a5e:	89 e6       	ldi	r24, 0x69	; 105
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 ce 04 	call	0x99c	; 0x99c <eeprom_update_if_changed>
	gpib_set_readtermination('\n');
    2a66:	8a e0       	ldi	r24, 0x0A	; 10
    2a68:	a3 ce       	rjmp	.-698    	; 0x27b0 <gpib_set_readtermination>

00002a6a <cmd_0102>:
}

void cmd_0102(void)
{
	eeprom_update_if_changed(105, '\r');
    2a6a:	6d e0       	ldi	r22, 0x0D	; 13
    2a6c:	89 e6       	ldi	r24, 0x69	; 105
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 ce 04 	call	0x99c	; 0x99c <eeprom_update_if_changed>
	gpib_set_readtermination('\r');
    2a74:	8d e0       	ldi	r24, 0x0D	; 13
    2a76:	9c ce       	rjmp	.-712    	; 0x27b0 <gpib_set_readtermination>

00002a78 <cmd_term_store>:
	}
}

void cmd_term_store(void)
{
	eeprom_update_if_changed(105, gpib_get_readtermination());
    2a78:	98 de       	rcall	.-720    	; 0x27aa <gpib_get_readtermination>
    2a7a:	68 2f       	mov	r22, r24
    2a7c:	89 e6       	ldi	r24, 0x69	; 105
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0c 94 ce 04 	jmp	0x99c	; 0x99c <eeprom_update_if_changed>

00002a84 <cmd_reset>:
{
}

void cmd_reset(void)
{
	Jump_To_Bootloader();
    2a84:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <Jump_To_Bootloader>

00002a88 <cmd_autoid_query>:
	eeprom_update_if_changed(104, 0x04); // autoId SLOWEST
}

void cmd_autoid_query(void)
{
	switch(eeprom_read_byte((uint8_t*)104))
    2a88:	88 e6       	ldi	r24, 0x68	; 104
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	49 d5       	rcall	.+2706   	; 0x3520 <eeprom_read_byte>
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	61 f0       	breq	.+24     	; 0x2aaa <cmd_autoid_query+0x22>
    2a92:	82 30       	cpi	r24, 0x02	; 2
    2a94:	29 f4       	brne	.+10     	; 0x2aa0 <cmd_autoid_query+0x18>
	{
		case 0x02:
			set_internal_response((void*)"slow", 4);
    2a96:	64 e0       	ldi	r22, 0x04	; 4
    2a98:	82 e2       	ldi	r24, 0x22	; 34
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>
			break;
		case 0x01:
			set_internal_response((void*) "off", 3);
			break;
		default: // 0x00 or 0xff
			set_internal_response((void*)  "on", 2);
    2aa0:	62 e0       	ldi	r22, 0x02	; 2
    2aa2:	8b e2       	ldi	r24, 0x2B	; 43
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>
	{
		case 0x02:
			set_internal_response((void*)"slow", 4);
			break;
		case 0x01:
			set_internal_response((void*) "off", 3);
    2aaa:	63 e0       	ldi	r22, 0x03	; 3
    2aac:	87 e2       	ldi	r24, 0x27	; 39
    2aae:	91 e0       	ldi	r25, 0x01	; 1
    2ab0:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>

00002ab4 <cmd_string_query>:
    eeprom_update_if_changed(106, 0);
}

void cmd_string_query(void)
{
	switch(eeprom_read_byte((uint8_t*)106))
    2ab4:	8a e6       	ldi	r24, 0x6A	; 106
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	33 d5       	rcall	.+2662   	; 0x3520 <eeprom_read_byte>
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	29 f0       	breq	.+10     	; 0x2ac8 <cmd_string_query+0x14>
	{
		case 0x01:
			set_internal_response((void*) "short", 5);
			break;
		default: // 0x00 or 0xff
			set_internal_response((void*)"normal", 6);
    2abe:	66 e0       	ldi	r22, 0x06	; 6
    2ac0:	84 e3       	ldi	r24, 0x34	; 52
    2ac2:	91 e0       	ldi	r25, 0x01	; 1
    2ac4:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>
void cmd_string_query(void)
{
	switch(eeprom_read_byte((uint8_t*)106))
	{
		case 0x01:
			set_internal_response((void*) "short", 5);
    2ac8:	65 e0       	ldi	r22, 0x05	; 5
    2aca:	8e e2       	ldi	r24, 0x2E	; 46
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>

00002ad2 <cmd_term_query>:
	gpib_set_readtermination('\0');
}

void cmd_term_query(void)
{
	char t = gpib_get_readtermination();
    2ad2:	6b de       	rcall	.-810    	; 0x27aa <gpib_get_readtermination>
	switch (t)
    2ad4:	8a 30       	cpi	r24, 0x0A	; 10
    2ad6:	61 f0       	breq	.+24     	; 0x2af0 <cmd_term_query+0x1e>
    2ad8:	8d 30       	cpi	r24, 0x0D	; 13
    2ada:	29 f4       	brne	.+10     	; 0x2ae6 <cmd_term_query+0x14>
	{
		case '\r':	set_internal_response((void*) "cr", 2); break;
    2adc:	62 e0       	ldi	r22, 0x02	; 2
    2ade:	8b e3       	ldi	r24, 0x3B	; 59
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>
		case '\n':	set_internal_response((void*) "lf", 2); break;
		default:    set_internal_response((void*)"eoi", 3); break;
    2ae6:	63 e0       	ldi	r22, 0x03	; 3
    2ae8:	81 e4       	ldi	r24, 0x41	; 65
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>
{
	char t = gpib_get_readtermination();
	switch (t)
	{
		case '\r':	set_internal_response((void*) "cr", 2); break;
		case '\n':	set_internal_response((void*) "lf", 2); break;
    2af0:	62 e0       	ldi	r22, 0x02	; 2
    2af2:	8e e3       	ldi	r24, 0x3E	; 62
    2af4:	91 e0       	ldi	r25, 0x01	; 1
    2af6:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <set_internal_response>

00002afa <parser_reset>:

PGM_P pparser_ps = cmd_parser;

void parser_reset(void)
{
    pparser_ps = cmd_parser;
    2afa:	8f e3       	ldi	r24, 0x3F	; 63
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <pparser_ps+0x1>
    2b02:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <pparser_ps>
    2b06:	08 95       	ret

00002b08 <parser_add>:
}


bool parser_add(uint8_t ch)
{
    2b08:	1f 93       	push	r17
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	18 2f       	mov	r17, r24
    uint16_t entryidx;
	#endif
    uint8_t cnt = 0;

	// enforce lower case
	if ( (ch >=65) && (ch<=90) )
    2b10:	8f eb       	ldi	r24, 0xBF	; 191
    2b12:	81 0f       	add	r24, r17
    2b14:	8a 31       	cpi	r24, 0x1A	; 26
    2b16:	08 f4       	brcc	.+2      	; 0x2b1a <parser_add+0x12>
		ch += 32;
    2b18:	10 5e       	subi	r17, 0xE0	; 224

	entrycount = pgm_read_byte(pparser_ps++);
    2b1a:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <pparser_ps>
    2b1e:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <pparser_ps+0x1>
    2b22:	9f 01       	movw	r18, r30
    2b24:	2f 5f       	subi	r18, 0xFF	; 255
    2b26:	3f 4f       	sbci	r19, 0xFF	; 255
    2b28:	d4 91       	lpm	r29, Z
    while (cnt < entrycount)
    2b2a:	dd 23       	and	r29, r29
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <parser_add+0x28>
    2b2e:	45 c0       	rjmp	.+138    	; 0x2bba <parser_add+0xb2>
    2b30:	c0 e0       	ldi	r28, 0x00	; 0
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	07 c0       	rjmp	.+14     	; 0x2b44 <parser_add+0x3c>
                pparser_ps = &(cmd_parser[entryidx]);
				return false;
            }
        }

        cnt = cnt + 1;
    2b36:	cf 5f       	subi	r28, 0xFF	; 255
	// enforce lower case
	if ( (ch >=65) && (ch<=90) )
		ch += 32;

	entrycount = pgm_read_byte(pparser_ps++);
    while (cnt < entrycount)
    2b38:	dc 17       	cp	r29, r28
    2b3a:	49 f1       	breq	.+82     	; 0x2b8e <parser_add+0x86>
    2b3c:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <pparser_ps>
    2b40:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <pparser_ps+0x1>
    {
        uint8_t entrych = pgm_read_byte(pparser_ps++);
    2b44:	f9 01       	movw	r30, r18
    2b46:	94 91       	lpm	r25, Z

		#if PARSER_ENTRYBYTECOUNT == 1
		entryidx = pgm_read_byte(pparser_ps++);
    2b48:	a9 01       	movw	r20, r18
    2b4a:	4e 5f       	subi	r20, 0xFE	; 254
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <pparser_ps+0x1>
    2b52:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <pparser_ps>
    2b56:	31 96       	adiw	r30, 0x01	; 1
    2b58:	e4 91       	lpm	r30, Z
            entryidx <<= 8;
            entryidx = entryidx | pgm_read_byte(pparser_ps++);
        }
		#endif

        if ((entrych & 0x7F) == ch)
    2b5a:	29 2f       	mov	r18, r25
    2b5c:	2f 77       	andi	r18, 0x7F	; 127
    2b5e:	12 13       	cpse	r17, r18
    2b60:	ea cf       	rjmp	.-44     	; 0x2b36 <parser_add+0x2e>
        {
            if ((entrych >= 128))
            { // entry to cmd list
				parser_func_t func;
				func = pgm_read_ptr_far(&(cmd_list[entryidx]));
    2b62:	8e 2f       	mov	r24, r30
        }
		#endif

        if ((entrych & 0x7F) == ch)
        {
            if ((entrych >= 128))
    2b64:	97 ff       	sbrs	r25, 7
    2b66:	1d c0       	rjmp	.+58     	; 0x2ba2 <parser_add+0x9a>
            { // entry to cmd list
				parser_func_t func;
				func = pgm_read_ptr_far(&(cmd_list[entryidx]));
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	8d 5e       	subi	r24, 0xED	; 237
    2b70:	9e 4f       	sbci	r25, 0xFE	; 254
    2b72:	09 2e       	mov	r0, r25
    2b74:	00 0c       	add	r0, r0
    2b76:	aa 0b       	sbc	r26, r26
    2b78:	bb 0b       	sbc	r27, r27
    2b7a:	ab bf       	out	0x3b, r26	; 59
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	87 91       	elpm	r24, Z+
    2b80:	96 91       	elpm	r25, Z
				func(); // dispatch the command!
    2b82:	fc 01       	movw	r30, r24
    2b84:	09 95       	icall
				cmd_dispatched = true;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
                pparser_ps = &(cmd_parser[entryidx]);
				return false;
            }
        }

        cnt = cnt + 1;
    2b88:	cf 5f       	subi	r28, 0xFF	; 255
	// enforce lower case
	if ( (ch >=65) && (ch<=90) )
		ch += 32;

	entrycount = pgm_read_byte(pparser_ps++);
    while (cnt < entrycount)
    2b8a:	dc 13       	cpse	r29, r28
    2b8c:	d7 cf       	rjmp	.-82     	; 0x2b3c <parser_add+0x34>

PGM_P pparser_ps = cmd_parser;

void parser_reset(void)
{
    pparser_ps = cmd_parser;
    2b8e:	2f e3       	ldi	r18, 0x3F	; 63
    2b90:	31 e0       	ldi	r19, 0x01	; 1
    2b92:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <pparser_ps+0x1>
    2b96:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <pparser_ps>
    }

	// character not in list => restart parser at root
    parser_reset();
	return cmd_dispatched;
}
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	08 95       	ret
				func(); // dispatch the command!
				cmd_dispatched = true;
            }
            else
            { // parsing not finished
                pparser_ps = &(cmd_parser[entryidx]);
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	81 5c       	subi	r24, 0xC1	; 193
    2ba6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba8:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <pparser_ps+0x1>
    2bac:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <pparser_ps>
				return false;
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    }

	// character not in list => restart parser at root
    parser_reset();
	return cmd_dispatched;
}
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	08 95       	ret
}


bool parser_add(uint8_t ch)
{
	bool cmd_dispatched = false;
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	e8 cf       	rjmp	.-48     	; 0x2b8e <parser_add+0x86>

00002bbe <Endpoint_Write_Stream_LE>:

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2bbe:	cf 92       	push	r12
    2bc0:	df 92       	push	r13
    2bc2:	ef 92       	push	r14
    2bc4:	ff 92       	push	r15
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	8c 01       	movw	r16, r24
    2bd0:	eb 01       	movw	r28, r22
    2bd2:	6a 01       	movw	r12, r20
    2bd4:	c4 d1       	rcall	.+904    	; 0x2f5e <Endpoint_WaitUntilReady>
    2bd6:	81 11       	cpse	r24, r1
    2bd8:	1e c0       	rjmp	.+60     	; 0x2c16 <Endpoint_Write_Stream_LE+0x58>
    2bda:	c1 14       	cp	r12, r1
    2bdc:	d1 04       	cpc	r13, r1
    2bde:	39 f0       	breq	.+14     	; 0x2bee <Endpoint_Write_Stream_LE+0x30>
    2be0:	f6 01       	movw	r30, r12
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	c8 1b       	sub	r28, r24
    2be8:	d9 0b       	sbc	r29, r25
    2bea:	08 0f       	add	r16, r24
    2bec:	19 1f       	adc	r17, r25
    2bee:	20 97       	sbiw	r28, 0x00	; 0
    2bf0:	89 f0       	breq	.+34     	; 0x2c14 <Endpoint_Write_Stream_LE+0x56>
    2bf2:	e1 2c       	mov	r14, r1
    2bf4:	f1 2c       	mov	r15, r1
    2bf6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2bfa:	95 ff       	sbrs	r25, 5
    2bfc:	15 c0       	rjmp	.+42     	; 0x2c28 <Endpoint_Write_Stream_LE+0x6a>
    2bfe:	f8 01       	movw	r30, r16
    2c00:	81 91       	ld	r24, Z+
    2c02:	8f 01       	movw	r16, r30
    2c04:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c08:	21 97       	sbiw	r28, 0x01	; 1
    2c0a:	ff ef       	ldi	r31, 0xFF	; 255
    2c0c:	ef 1a       	sub	r14, r31
    2c0e:	ff 0a       	sbc	r15, r31
    2c10:	20 97       	sbiw	r28, 0x00	; 0
    2c12:	89 f7       	brne	.-30     	; 0x2bf6 <Endpoint_Write_Stream_LE+0x38>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	df 90       	pop	r13
    2c24:	cf 90       	pop	r12
    2c26:	08 95       	ret
    2c28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c2c:	8e 77       	andi	r24, 0x7E	; 126
    2c2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c32:	4a d4       	rcall	.+2196   	; 0x34c8 <USB_USBTask>
    2c34:	c1 14       	cp	r12, r1
    2c36:	d1 04       	cpc	r13, r1
    2c38:	21 f4       	brne	.+8      	; 0x2c42 <Endpoint_Write_Stream_LE+0x84>
    2c3a:	91 d1       	rcall	.+802    	; 0x2f5e <Endpoint_WaitUntilReady>
    2c3c:	88 23       	and	r24, r24
    2c3e:	d9 f2       	breq	.-74     	; 0x2bf6 <Endpoint_Write_Stream_LE+0x38>
    2c40:	ea cf       	rjmp	.-44     	; 0x2c16 <Endpoint_Write_Stream_LE+0x58>
    2c42:	f6 01       	movw	r30, r12
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	e8 0e       	add	r14, r24
    2c4a:	f9 1e       	adc	r15, r25
    2c4c:	f1 82       	std	Z+1, r15	; 0x01
    2c4e:	e0 82       	st	Z, r14
    2c50:	85 e0       	ldi	r24, 0x05	; 5
    2c52:	e1 cf       	rjmp	.-62     	; 0x2c16 <Endpoint_Write_Stream_LE+0x58>

00002c54 <Endpoint_Write_Control_Stream_LE>:
    2c54:	20 91 dc 05 	lds	r18, 0x05DC	; 0x8005dc <USB_ControlRequest+0x6>
    2c58:	30 91 dd 05 	lds	r19, 0x05DD	; 0x8005dd <USB_ControlRequest+0x7>
    2c5c:	26 17       	cp	r18, r22
    2c5e:	37 07       	cpc	r19, r23
    2c60:	50 f0       	brcs	.+20     	; 0x2c76 <Endpoint_Write_Control_Stream_LE+0x22>
    2c62:	61 15       	cp	r22, r1
    2c64:	71 05       	cpc	r23, r1
    2c66:	99 f5       	brne	.+102    	; 0x2cce <Endpoint_Write_Control_Stream_LE+0x7a>
    2c68:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c6c:	2e 77       	andi	r18, 0x7E	; 126
    2c6e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	fc 01       	movw	r30, r24
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	0e c0       	rjmp	.+28     	; 0x2c98 <Endpoint_Write_Control_Stream_LE+0x44>
    2c7c:	85 30       	cpi	r24, 0x05	; 5
    2c7e:	49 f1       	breq	.+82     	; 0x2cd2 <Endpoint_Write_Control_Stream_LE+0x7e>
    2c80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c84:	83 fd       	sbrc	r24, 3
    2c86:	27 c0       	rjmp	.+78     	; 0x2cd6 <Endpoint_Write_Control_Stream_LE+0x82>
    2c88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c8c:	82 fd       	sbrc	r24, 2
    2c8e:	19 c0       	rjmp	.+50     	; 0x2cc2 <Endpoint_Write_Control_Stream_LE+0x6e>
    2c90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c94:	80 fd       	sbrc	r24, 0
    2c96:	21 c0       	rjmp	.+66     	; 0x2cda <Endpoint_Write_Control_Stream_LE+0x86>
    2c98:	21 15       	cp	r18, r1
    2c9a:	31 05       	cpc	r19, r1
    2c9c:	11 f4       	brne	.+4      	; 0x2ca2 <Endpoint_Write_Control_Stream_LE+0x4e>
    2c9e:	44 23       	and	r20, r20
    2ca0:	81 f0       	breq	.+32     	; 0x2cc2 <Endpoint_Write_Control_Stream_LE+0x6e>
    2ca2:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
    2ca6:	81 11       	cpse	r24, r1
    2ca8:	e9 cf       	rjmp	.-46     	; 0x2c7c <Endpoint_Write_Control_Stream_LE+0x28>
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	08 95       	ret
    2cae:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
    2cb2:	88 23       	and	r24, r24
    2cb4:	d1 f3       	breq	.-12     	; 0x2caa <Endpoint_Write_Control_Stream_LE+0x56>
    2cb6:	85 30       	cpi	r24, 0x05	; 5
    2cb8:	61 f0       	breq	.+24     	; 0x2cd2 <Endpoint_Write_Control_Stream_LE+0x7e>
    2cba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2cbe:	83 fd       	sbrc	r24, 3
    2cc0:	0a c0       	rjmp	.+20     	; 0x2cd6 <Endpoint_Write_Control_Stream_LE+0x82>
    2cc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2cc6:	82 ff       	sbrs	r24, 2
    2cc8:	f2 cf       	rjmp	.-28     	; 0x2cae <Endpoint_Write_Control_Stream_LE+0x5a>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	08 95       	ret
    2cce:	9b 01       	movw	r18, r22
    2cd0:	d2 cf       	rjmp	.-92     	; 0x2c76 <Endpoint_Write_Control_Stream_LE+0x22>
    2cd2:	83 e0       	ldi	r24, 0x03	; 3
    2cd4:	08 95       	ret
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	08 95       	ret
    2cda:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2cde:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	94 2b       	or	r25, r20
    2ce6:	21 15       	cp	r18, r1
    2ce8:	31 05       	cpc	r19, r1
    2cea:	19 f0       	breq	.+6      	; 0x2cf2 <Endpoint_Write_Control_Stream_LE+0x9e>
    2cec:	88 30       	cpi	r24, 0x08	; 8
    2cee:	91 05       	cpc	r25, r1
    2cf0:	68 f0       	brcs	.+26     	; 0x2d0c <Endpoint_Write_Control_Stream_LE+0xb8>
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	08 97       	sbiw	r24, 0x08	; 8
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <Endpoint_Write_Control_Stream_LE+0xa6>
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2cfe:	8e 77       	andi	r24, 0x7E	; 126
    2d00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d04:	c9 cf       	rjmp	.-110    	; 0x2c98 <Endpoint_Write_Control_Stream_LE+0x44>
    2d06:	88 30       	cpi	r24, 0x08	; 8
    2d08:	91 05       	cpc	r25, r1
    2d0a:	99 f3       	breq	.-26     	; 0x2cf2 <Endpoint_Write_Control_Stream_LE+0x9e>
    2d0c:	41 91       	ld	r20, Z+
    2d0e:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d12:	21 50       	subi	r18, 0x01	; 1
    2d14:	31 09       	sbc	r19, r1
    2d16:	01 96       	adiw	r24, 0x01	; 1
    2d18:	21 15       	cp	r18, r1
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	a1 f7       	brne	.-24     	; 0x2d06 <Endpoint_Write_Control_Stream_LE+0xb2>
    2d1e:	e9 cf       	rjmp	.-46     	; 0x2cf2 <Endpoint_Write_Control_Stream_LE+0x9e>

00002d20 <Endpoint_Write_Control_PStream_LE>:
    2d20:	20 91 dc 05 	lds	r18, 0x05DC	; 0x8005dc <USB_ControlRequest+0x6>
    2d24:	30 91 dd 05 	lds	r19, 0x05DD	; 0x8005dd <USB_ControlRequest+0x7>
    2d28:	26 17       	cp	r18, r22
    2d2a:	37 07       	cpc	r19, r23
    2d2c:	50 f0       	brcs	.+20     	; 0x2d42 <Endpoint_Write_Control_PStream_LE+0x22>
    2d2e:	61 15       	cp	r22, r1
    2d30:	71 05       	cpc	r23, r1
    2d32:	99 f5       	brne	.+102    	; 0x2d9a <Endpoint_Write_Control_PStream_LE+0x7a>
    2d34:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d38:	2e 77       	andi	r18, 0x7E	; 126
    2d3a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	fc 01       	movw	r30, r24
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	0e c0       	rjmp	.+28     	; 0x2d64 <Endpoint_Write_Control_PStream_LE+0x44>
    2d48:	85 30       	cpi	r24, 0x05	; 5
    2d4a:	49 f1       	breq	.+82     	; 0x2d9e <Endpoint_Write_Control_PStream_LE+0x7e>
    2d4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d50:	83 fd       	sbrc	r24, 3
    2d52:	27 c0       	rjmp	.+78     	; 0x2da2 <Endpoint_Write_Control_PStream_LE+0x82>
    2d54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d58:	82 fd       	sbrc	r24, 2
    2d5a:	19 c0       	rjmp	.+50     	; 0x2d8e <Endpoint_Write_Control_PStream_LE+0x6e>
    2d5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d60:	80 fd       	sbrc	r24, 0
    2d62:	21 c0       	rjmp	.+66     	; 0x2da6 <Endpoint_Write_Control_PStream_LE+0x86>
    2d64:	21 15       	cp	r18, r1
    2d66:	31 05       	cpc	r19, r1
    2d68:	11 f4       	brne	.+4      	; 0x2d6e <Endpoint_Write_Control_PStream_LE+0x4e>
    2d6a:	44 23       	and	r20, r20
    2d6c:	81 f0       	breq	.+32     	; 0x2d8e <Endpoint_Write_Control_PStream_LE+0x6e>
    2d6e:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
    2d72:	81 11       	cpse	r24, r1
    2d74:	e9 cf       	rjmp	.-46     	; 0x2d48 <Endpoint_Write_Control_PStream_LE+0x28>
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	08 95       	ret
    2d7a:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
    2d7e:	88 23       	and	r24, r24
    2d80:	d1 f3       	breq	.-12     	; 0x2d76 <Endpoint_Write_Control_PStream_LE+0x56>
    2d82:	85 30       	cpi	r24, 0x05	; 5
    2d84:	61 f0       	breq	.+24     	; 0x2d9e <Endpoint_Write_Control_PStream_LE+0x7e>
    2d86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d8a:	83 fd       	sbrc	r24, 3
    2d8c:	0a c0       	rjmp	.+20     	; 0x2da2 <Endpoint_Write_Control_PStream_LE+0x82>
    2d8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d92:	82 ff       	sbrs	r24, 2
    2d94:	f2 cf       	rjmp	.-28     	; 0x2d7a <Endpoint_Write_Control_PStream_LE+0x5a>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	08 95       	ret
    2d9a:	9b 01       	movw	r18, r22
    2d9c:	d2 cf       	rjmp	.-92     	; 0x2d42 <Endpoint_Write_Control_PStream_LE+0x22>
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	08 95       	ret
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	08 95       	ret
    2da6:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2daa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	94 2b       	or	r25, r20
    2db2:	21 15       	cp	r18, r1
    2db4:	31 05       	cpc	r19, r1
    2db6:	19 f0       	breq	.+6      	; 0x2dbe <Endpoint_Write_Control_PStream_LE+0x9e>
    2db8:	88 30       	cpi	r24, 0x08	; 8
    2dba:	91 05       	cpc	r25, r1
    2dbc:	68 f0       	brcs	.+26     	; 0x2dd8 <Endpoint_Write_Control_PStream_LE+0xb8>
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	08 97       	sbiw	r24, 0x08	; 8
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <Endpoint_Write_Control_PStream_LE+0xa6>
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dca:	8e 77       	andi	r24, 0x7E	; 126
    2dcc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dd0:	c9 cf       	rjmp	.-110    	; 0x2d64 <Endpoint_Write_Control_PStream_LE+0x44>
    2dd2:	88 30       	cpi	r24, 0x08	; 8
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	99 f3       	breq	.-26     	; 0x2dbe <Endpoint_Write_Control_PStream_LE+0x9e>
    2dd8:	44 91       	lpm	r20, Z
    2dda:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2dde:	31 96       	adiw	r30, 0x01	; 1
    2de0:	21 50       	subi	r18, 0x01	; 1
    2de2:	31 09       	sbc	r19, r1
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	21 15       	cp	r18, r1
    2de8:	31 05       	cpc	r19, r1
    2dea:	99 f7       	brne	.-26     	; 0x2dd2 <Endpoint_Write_Control_PStream_LE+0xb2>
    2dec:	e8 cf       	rjmp	.-48     	; 0x2dbe <Endpoint_Write_Control_PStream_LE+0x9e>

00002dee <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2dee:	ef 92       	push	r14
    2df0:	ff 92       	push	r15
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2dfa:	c0 91 dc 05 	lds	r28, 0x05DC	; 0x8005dc <USB_ControlRequest+0x6>
    2dfe:	d0 91 dd 05 	lds	r29, 0x05DD	; 0x8005dd <USB_ControlRequest+0x7>
    2e02:	c6 17       	cp	r28, r22
    2e04:	d7 07       	cpc	r29, r23
    2e06:	50 f0       	brcs	.+20     	; 0x2e1c <Endpoint_Write_Control_EStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2e08:	61 15       	cp	r22, r1
    2e0a:	71 05       	cpc	r23, r1
    2e0c:	c1 f5       	brne	.+112    	; 0x2e7e <Endpoint_Write_Control_EStream_LE+0x90>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e0e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e12:	2e 77       	andi	r18, 0x7E	; 126
    2e14:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e18:	c0 e0       	ldi	r28, 0x00	; 0
    2e1a:	d0 e0       	ldi	r29, 0x00	; 0
    2e1c:	8c 01       	movw	r16, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e c0       	rjmp	.+28     	; 0x2e3e <Endpoint_Write_Control_EStream_LE+0x50>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2e22:	85 30       	cpi	r24, 0x05	; 5
    2e24:	71 f1       	breq	.+92     	; 0x2e82 <Endpoint_Write_Control_EStream_LE+0x94>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2e2a:	83 fd       	sbrc	r24, 3
    2e2c:	32 c0       	rjmp	.+100    	; 0x2e92 <Endpoint_Write_Control_EStream_LE+0xa4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2e2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2e32:	82 fd       	sbrc	r24, 2
    2e34:	1e c0       	rjmp	.+60     	; 0x2e72 <Endpoint_Write_Control_EStream_LE+0x84>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2e36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    2e3a:	80 fd       	sbrc	r24, 0
    2e3c:	32 c0       	rjmp	.+100    	; 0x2ea2 <Endpoint_Write_Control_EStream_LE+0xb4>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2e3e:	20 97       	sbiw	r28, 0x00	; 0
    2e40:	11 f4       	brne	.+4      	; 0x2e46 <Endpoint_Write_Control_EStream_LE+0x58>
    2e42:	99 23       	and	r25, r25
    2e44:	b1 f0       	breq	.+44     	; 0x2e72 <Endpoint_Write_Control_EStream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2e46:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2e4a:	81 11       	cpse	r24, r1
    2e4c:	ea cf       	rjmp	.-44     	; 0x2e22 <Endpoint_Write_Control_EStream_LE+0x34>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	ff 90       	pop	r15
    2e5a:	ef 90       	pop	r14
    2e5c:	08 95       	ret
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2e5e:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2e62:	88 23       	and	r24, r24
    2e64:	a1 f3       	breq	.-24     	; 0x2e4e <Endpoint_Write_Control_EStream_LE+0x60>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2e66:	85 30       	cpi	r24, 0x05	; 5
    2e68:	61 f0       	breq	.+24     	; 0x2e82 <Endpoint_Write_Control_EStream_LE+0x94>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2e6e:	83 fd       	sbrc	r24, 3
    2e70:	10 c0       	rjmp	.+32     	; 0x2e92 <Endpoint_Write_Control_EStream_LE+0xa4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2e72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2e76:	82 ff       	sbrs	r24, 2
    2e78:	f2 cf       	rjmp	.-28     	; 0x2e5e <Endpoint_Write_Control_EStream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	e9 cf       	rjmp	.-46     	; 0x2e50 <Endpoint_Write_Control_EStream_LE+0x62>
    2e7e:	eb 01       	movw	r28, r22
    2e80:	cd cf       	rjmp	.-102    	; 0x2e1c <Endpoint_Write_Control_EStream_LE+0x2e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2e82:	83 e0       	ldi	r24, 0x03	; 3
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	ff 90       	pop	r15
    2e9e:	ef 90       	pop	r14
    2ea0:	08 95       	ret
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2ea2:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2ea6:	e0 90 f2 00 	lds	r14, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2eaa:	f1 2c       	mov	r15, r1
    2eac:	f8 2a       	or	r15, r24

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2eae:	20 97       	sbiw	r28, 0x00	; 0
    2eb0:	21 f0       	breq	.+8      	; 0x2eba <Endpoint_Write_Control_EStream_LE+0xcc>
    2eb2:	88 e0       	ldi	r24, 0x08	; 8
    2eb4:	e8 16       	cp	r14, r24
    2eb6:	f1 04       	cpc	r15, r1
    2eb8:	80 f0       	brcs	.+32     	; 0x2eda <Endpoint_Write_Control_EStream_LE+0xec>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	88 e0       	ldi	r24, 0x08	; 8
    2ebe:	e8 16       	cp	r14, r24
    2ec0:	f1 04       	cpc	r15, r1
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <Endpoint_Write_Control_EStream_LE+0xd8>
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2eca:	8e 77       	andi	r24, 0x7E	; 126
    2ecc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ed0:	b6 cf       	rjmp	.-148    	; 0x2e3e <Endpoint_Write_Control_EStream_LE+0x50>

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2ed2:	88 e0       	ldi	r24, 0x08	; 8
    2ed4:	e8 16       	cp	r14, r24
    2ed6:	f1 04       	cpc	r15, r1
    2ed8:	81 f3       	breq	.-32     	; 0x2eba <Endpoint_Write_Control_EStream_LE+0xcc>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2eda:	c8 01       	movw	r24, r16
    2edc:	21 d3       	rcall	.+1602   	; 0x3520 <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2ede:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2ee2:	0f 5f       	subi	r16, 0xFF	; 255
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    2ee6:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    2ee8:	8f ef       	ldi	r24, 0xFF	; 255
    2eea:	e8 1a       	sub	r14, r24
    2eec:	f8 0a       	sbc	r15, r24

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2eee:	20 97       	sbiw	r28, 0x00	; 0
    2ef0:	81 f7       	brne	.-32     	; 0x2ed2 <Endpoint_Write_Control_EStream_LE+0xe4>
    2ef2:	e3 cf       	rjmp	.-58     	; 0x2eba <Endpoint_Write_Control_EStream_LE+0xcc>

00002ef4 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    2ef4:	8f 70       	andi	r24, 0x0F	; 15
    2ef6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2efa:	eb ee       	ldi	r30, 0xEB	; 235
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	81 60       	ori	r24, 0x01	; 1
    2f02:	80 83       	st	Z, r24
    2f04:	ed ee       	ldi	r30, 0xED	; 237
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	10 82       	st	Z, r1
    2f0a:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2f0e:	40 83       	st	Z, r20
    2f10:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    2f14:	88 1f       	adc	r24, r24
    2f16:	88 27       	eor	r24, r24
    2f18:	88 1f       	adc	r24, r24
    2f1a:	08 95       	ret

00002f1c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2f1c:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <USB_ControlRequest>
    2f20:	87 ff       	sbrs	r24, 7
    2f22:	05 c0       	rjmp	.+10     	; 0x2f2e <Endpoint_ClearStatusStage+0x12>
    2f24:	12 c0       	rjmp	.+36     	; 0x2f4a <Endpoint_ClearStatusStage+0x2e>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2f26:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
    2f2a:	88 23       	and	r24, r24
    2f2c:	49 f0       	breq	.+18     	; 0x2f40 <Endpoint_ClearStatusStage+0x24>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2f32:	80 ff       	sbrs	r24, 0
    2f34:	f8 cf       	rjmp	.-16     	; 0x2f26 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2f36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f3a:	8e 77       	andi	r24, 0x7E	; 126
    2f3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f40:	08 95       	ret
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2f42:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
    2f46:	88 23       	and	r24, r24
    2f48:	d9 f3       	breq	.-10     	; 0x2f40 <Endpoint_ClearStatusStage+0x24>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2f4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2f4e:	82 ff       	sbrs	r24, 2
    2f50:	f8 cf       	rjmp	.-16     	; 0x2f42 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2f52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f56:	8b 77       	andi	r24, 0x7B	; 123
    2f58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f5c:	08 95       	ret

00002f5e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2f5e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2f62:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    2f66:	25 e6       	ldi	r18, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2f68:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2f6c:	89 2f       	mov	r24, r25
    2f6e:	81 70       	andi	r24, 0x01	; 1
    2f70:	90 ff       	sbrs	r25, 0
    2f72:	1e c0       	rjmp	.+60     	; 0x2fb0 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2f78:	80 fd       	sbrc	r24, 0
    2f7a:	27 c0       	rjmp	.+78     	; 0x2fca <Endpoint_WaitUntilReady+0x6c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2f7c:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2f80:	88 23       	and	r24, r24
    2f82:	d9 f0       	breq	.+54     	; 0x2fba <Endpoint_WaitUntilReady+0x5c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2f84:	85 30       	cpi	r24, 0x05	; 5
    2f86:	d9 f0       	breq	.+54     	; 0x2fbe <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2f88:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2f8c:	85 fd       	sbrc	r24, 5
    2f8e:	19 c0       	rjmp	.+50     	; 0x2fc2 <Endpoint_WaitUntilReady+0x64>
    2f90:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2f94:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2f98:	48 17       	cp	r20, r24
    2f9a:	59 07       	cpc	r21, r25
    2f9c:	29 f3       	breq	.-54     	; 0x2f68 <Endpoint_WaitUntilReady+0xa>
    2f9e:	21 50       	subi	r18, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2fa0:	91 f0       	breq	.+36     	; 0x2fc6 <Endpoint_WaitUntilReady+0x68>
    2fa2:	ac 01       	movw	r20, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2fa4:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2fa8:	89 2f       	mov	r24, r25
    2faa:	81 70       	andi	r24, 0x01	; 1
    2fac:	90 fd       	sbrc	r25, 0
    2fae:	e2 cf       	rjmp	.-60     	; 0x2f74 <Endpoint_WaitUntilReady+0x16>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2fb0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2fb4:	92 ff       	sbrs	r25, 2
    2fb6:	e2 cf       	rjmp	.-60     	; 0x2f7c <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2fb8:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2fba:	82 e0       	ldi	r24, 0x02	; 2
    2fbc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    2fc6:	84 e0       	ldi	r24, 0x04	; 4
    2fc8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	08 95       	ret

00002fce <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    2fce:	67 d0       	rcall	.+206    	; 0x309e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2fd0:	6e d0       	rcall	.+220    	; 0x30ae <USB_INT_ClearAllInterrupts>
    2fd2:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	81 60       	ori	r24, 0x01	; 1
    2fda:	80 83       	st	Z, r24
    2fdc:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	8f 77       	andi	r24, 0x7F	; 127
    2fe4:	80 83       	st	Z, r24
    2fe6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2fe8:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	8c 91       	ld	r24, X
    2fee:	8e 7f       	andi	r24, 0xFE	; 254
    2ff0:	8c 93       	st	X, r24
    2ff2:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2ff4:	8f 7e       	andi	r24, 0xEF	; 239
    2ff6:	80 83       	st	Z, r24
    2ff8:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    2ffc:	08 95       	ret

00002ffe <USB_ResetInterface>:
    2ffe:	0f 93       	push	r16
}

void USB_ResetInterface(void)
{
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3006:	4b d0       	rcall	.+150    	; 0x309e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3008:	52 d0       	rcall	.+164    	; 0x30ae <USB_INT_ClearAllInterrupts>
    300a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    300c:	d0 e0       	ldi	r29, 0x00	; 0
    300e:	88 81       	ld	r24, Y
    3010:	8f 77       	andi	r24, 0x7F	; 127
    3012:	88 83       	st	Y, r24
    3014:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    3016:	80 68       	ori	r24, 0x80	; 128
    3018:	88 83       	st	Y, r24
    301a:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    301c:	8f 7d       	andi	r24, 0xDF	; 223
    301e:	88 83       	st	Y, r24
    3020:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3022:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3026:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    302a:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    302e:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3032:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3034:	10 e0       	ldi	r17, 0x00	; 0
    3036:	f8 01       	movw	r30, r16
    3038:	80 81       	ld	r24, Z
    303a:	8b 7f       	andi	r24, 0xFB	; 251
    303c:	80 83       	st	Z, r24
    303e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3040:	81 60       	ori	r24, 0x01	; 1
    3042:	88 83       	st	Y, r24
    3044:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	54 df       	rcall	.-344    	; 0x2ef4 <Endpoint_ConfigureEndpoint_Prv>
    304c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	8e 7f       	andi	r24, 0xFE	; 254
    3054:	80 83       	st	Z, r24
    3056:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	81 60       	ori	r24, 0x01	; 1
    305e:	80 83       	st	Z, r24
    3060:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3062:	88 60       	ori	r24, 0x08	; 8
    3064:	80 83       	st	Z, r24
    3066:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3068:	80 81       	ld	r24, Z
    306a:	8e 7f       	andi	r24, 0xFE	; 254
    306c:	80 83       	st	Z, r24
    306e:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3070:	80 61       	ori	r24, 0x10	; 16
    3072:	88 83       	st	Y, r24
    3074:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3076:	cf 91       	pop	r28
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	08 95       	ret

0000307e <USB_Init>:
    307e:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	8f 7e       	andi	r24, 0xEF	; 239
    3086:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    3088:	e7 ed       	ldi	r30, 0xD7	; 215
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	81 60       	ori	r24, 0x01	; 1
    3090:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    3092:	84 e0       	ldi	r24, 0x04	; 4
    3094:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <USB_IsInitialized>

	USB_ResetInterface();
    309c:	b0 cf       	rjmp	.-160    	; 0x2ffe <USB_ResetInterface>

0000309e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    309e:	e8 ed       	ldi	r30, 0xD8	; 216
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	8e 7f       	andi	r24, 0xFE	; 254
    30a6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    30a8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    30ac:	08 95       	ret

000030ae <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    30ae:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    30b2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    30b6:	08 95       	ret

000030b8 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    30b8:	1f 92       	push	r1
    30ba:	0f 92       	push	r0
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	0f 92       	push	r0
    30c0:	11 24       	eor	r1, r1
    30c2:	2f 93       	push	r18
    30c4:	3f 93       	push	r19
    30c6:	4f 93       	push	r20
    30c8:	5f 93       	push	r21
    30ca:	6f 93       	push	r22
    30cc:	7f 93       	push	r23
    30ce:	8f 93       	push	r24
    30d0:	9f 93       	push	r25
    30d2:	af 93       	push	r26
    30d4:	bf 93       	push	r27
    30d6:	ef 93       	push	r30
    30d8:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    30da:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    30de:	80 ff       	sbrs	r24, 0
    30e0:	04 c0       	rjmp	.+8      	; 0x30ea <__vector_10+0x32>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    30e2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    30e6:	80 fd       	sbrc	r24, 0
    30e8:	50 c0       	rjmp	.+160    	; 0x318a <__vector_10+0xd2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    30ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    30ee:	80 ff       	sbrs	r24, 0
    30f0:	04 c0       	rjmp	.+8      	; 0x30fa <__vector_10+0x42>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    30f2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    30f6:	80 fd       	sbrc	r24, 0
    30f8:	7d c0       	rjmp	.+250    	; 0x31f4 <__vector_10+0x13c>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    30fa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    30fe:	84 ff       	sbrs	r24, 4
    3100:	2b c0       	rjmp	.+86     	; 0x3158 <__vector_10+0xa0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3102:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3106:	84 ff       	sbrs	r24, 4
    3108:	27 c0       	rjmp	.+78     	; 0x3158 <__vector_10+0xa0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    310a:	80 e1       	ldi	r24, 0x10	; 16
    310c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    310e:	82 e1       	ldi	r24, 0x12	; 18
    3110:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3112:	09 b4       	in	r0, 0x29	; 41
    3114:	00 fe       	sbrs	r0, 0
    3116:	fd cf       	rjmp	.-6      	; 0x3112 <__vector_10+0x5a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3118:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    311c:	8f 7d       	andi	r24, 0xDF	; 223
    311e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3122:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3126:	8f 7e       	andi	r24, 0xEF	; 239
    3128:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    312c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3130:	8f 7e       	andi	r24, 0xEF	; 239
    3132:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3136:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    313a:	81 60       	ori	r24, 0x01	; 1
    313c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3140:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <USB_Device_ConfigurationNumber>
    3144:	81 11       	cpse	r24, r1
    3146:	6b c0       	rjmp	.+214    	; 0x321e <__vector_10+0x166>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3148:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    314c:	87 fd       	sbrc	r24, 7
    314e:	71 c0       	rjmp	.+226    	; 0x3232 <__vector_10+0x17a>
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3156:	b7 d1       	rcall	.+878    	; 0x34c6 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3158:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    315c:	83 ff       	sbrs	r24, 3
    315e:	04 c0       	rjmp	.+8      	; 0x3168 <__vector_10+0xb0>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3160:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3164:	83 fd       	sbrc	r24, 3
    3166:	27 c0       	rjmp	.+78     	; 0x31b6 <__vector_10+0xfe>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3168:	ff 91       	pop	r31
    316a:	ef 91       	pop	r30
    316c:	bf 91       	pop	r27
    316e:	af 91       	pop	r26
    3170:	9f 91       	pop	r25
    3172:	8f 91       	pop	r24
    3174:	7f 91       	pop	r23
    3176:	6f 91       	pop	r22
    3178:	5f 91       	pop	r21
    317a:	4f 91       	pop	r20
    317c:	3f 91       	pop	r19
    317e:	2f 91       	pop	r18
    3180:	0f 90       	pop	r0
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	0f 90       	pop	r0
    3186:	1f 90       	pop	r1
    3188:	18 95       	reti
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    318a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    318e:	8e 7f       	andi	r24, 0xFE	; 254
    3190:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3194:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3198:	80 ff       	sbrs	r24, 0
    319a:	45 c0       	rjmp	.+138    	; 0x3226 <__vector_10+0x16e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    319c:	80 e1       	ldi	r24, 0x10	; 16
    319e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    31a0:	82 e1       	ldi	r24, 0x12	; 18
    31a2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    31a4:	09 b4       	in	r0, 0x29	; 41
    31a6:	00 fe       	sbrs	r0, 0
    31a8:	fd cf       	rjmp	.-6      	; 0x31a4 <__vector_10+0xec>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    31b0:	0e 94 0a 05 	call	0xa14	; 0xa14 <EVENT_USB_Device_Connect>
    31b4:	9a cf       	rjmp	.-204    	; 0x30ea <__vector_10+0x32>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    31b6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31ba:	87 7f       	andi	r24, 0xF7	; 247
    31bc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    31c6:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    31ca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31ce:	8e 7f       	andi	r24, 0xFE	; 254
    31d0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    31d4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    31d8:	8e 7f       	andi	r24, 0xFE	; 254
    31da:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    31de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    31e2:	80 61       	ori	r24, 0x10	; 16
    31e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    31e8:	42 e0       	ldi	r20, 0x02	; 2
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    31ee:	82 de       	rcall	.-764    	; 0x2ef4 <Endpoint_ConfigureEndpoint_Prv>
    31f0:	6a d1       	rcall	.+724    	; 0x34c6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    31f2:	ba cf       	rjmp	.-140    	; 0x3168 <__vector_10+0xb0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    31f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    31f8:	8e 7f       	andi	r24, 0xFE	; 254
    31fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    31fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3202:	80 61       	ori	r24, 0x10	; 16
    3204:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3208:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    320c:	80 62       	ori	r24, 0x20	; 32
    320e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3212:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3214:	85 e0       	ldi	r24, 0x05	; 5
    3216:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    321a:	55 d1       	rcall	.+682    	; 0x34c6 <USB_Event_Stub>
    321c:	6e cf       	rjmp	.-292    	; 0x30fa <__vector_10+0x42>

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
    321e:	84 e0       	ldi	r24, 0x04	; 4
    3220:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <USB_DeviceState>
    3224:	98 cf       	rjmp	.-208    	; 0x3156 <__vector_10+0x9e>
    3226:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3228:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    322c:	0e 94 0b 05 	call	0xa16	; 0xa16 <EVENT_USB_Device_Disconnect>
    3230:	5c cf       	rjmp	.-328    	; 0x30ea <__vector_10+0x32>
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3232:	83 e0       	ldi	r24, 0x03	; 3
    3234:	8e cf       	rjmp	.-228    	; 0x3152 <__vector_10+0x9a>

00003236 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3236:	1f 93       	push	r17
    3238:	cf 93       	push	r28
    323a:	df 93       	push	r29
    323c:	00 d0       	rcall	.+0      	; 0x323e <USB_Device_ProcessControlRequest+0x8>
    323e:	1f 92       	push	r1
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	e6 ed       	ldi	r30, 0xD6	; 214
    3246:	f5 e0       	ldi	r31, 0x05	; 5
    3248:	2e ed       	ldi	r18, 0xDE	; 222
    324a:	35 e0       	ldi	r19, 0x05	; 5
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    324c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3250:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3252:	2e 17       	cp	r18, r30
    3254:	3f 07       	cpc	r19, r31
    3256:	d1 f7       	brne	.-12     	; 0x324c <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3258:	0e 94 5b 05 	call	0xab6	; 0xab6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    325c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    3260:	83 ff       	sbrs	r24, 3
    3262:	10 c0       	rjmp	.+32     	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3264:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    3268:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <USB_ControlRequest+0x1>
    326c:	85 30       	cpi	r24, 0x05	; 5
    326e:	89 f1       	breq	.+98     	; 0x32d2 <USB_Device_ProcessControlRequest+0x9c>
    3270:	08 f4       	brcc	.+2      	; 0x3274 <USB_Device_ProcessControlRequest+0x3e>
    3272:	7c c0       	rjmp	.+248    	; 0x336c <USB_Device_ProcessControlRequest+0x136>
    3274:	88 30       	cpi	r24, 0x08	; 8
    3276:	d9 f0       	breq	.+54     	; 0x32ae <USB_Device_ProcessControlRequest+0x78>
    3278:	89 30       	cpi	r24, 0x09	; 9
    327a:	09 f4       	brne	.+2      	; 0x327e <USB_Device_ProcessControlRequest+0x48>
    327c:	b8 c0       	rjmp	.+368    	; 0x33ee <USB_Device_ProcessControlRequest+0x1b8>
    327e:	86 30       	cpi	r24, 0x06	; 6
    3280:	09 f4       	brne	.+2      	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
    3282:	47 c0       	rjmp	.+142    	; 0x3312 <USB_Device_ProcessControlRequest+0xdc>
    3284:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3288:	83 ff       	sbrs	r24, 3
    328a:	0a c0       	rjmp	.+20     	; 0x32a0 <USB_Device_ProcessControlRequest+0x6a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    328c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3290:	87 7f       	andi	r24, 0xF7	; 247
    3292:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3296:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    329a:	80 62       	ori	r24, 0x20	; 32
    329c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	1f 91       	pop	r17
    32ac:	08 95       	ret
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    32ae:	90 38       	cpi	r25, 0x80	; 128
    32b0:	49 f7       	brne	.-46     	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    32b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32b6:	87 7f       	andi	r24, 0xF7	; 247
    32b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    32bc:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    32c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    32c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32c8:	8e 77       	andi	r24, 0x7E	; 126
    32ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    32ce:	26 de       	rcall	.-948    	; 0x2f1c <Endpoint_ClearStatusStage>
    32d0:	d9 cf       	rjmp	.-78     	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    32d2:	91 11       	cpse	r25, r1
    32d4:	d7 cf       	rjmp	.-82     	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    32d6:	10 91 d8 05 	lds	r17, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
    32da:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    32dc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    32e0:	80 78       	andi	r24, 0x80	; 128
    32e2:	81 2b       	or	r24, r17
    32e4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    32e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32ec:	87 7f       	andi	r24, 0xF7	; 247
    32ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    32f2:	14 de       	rcall	.-984    	; 0x2f1c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    32f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    32f8:	80 ff       	sbrs	r24, 0
    32fa:	fc cf       	rjmp	.-8      	; 0x32f4 <USB_Device_ProcessControlRequest+0xbe>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    32fc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3300:	80 68       	ori	r24, 0x80	; 128
    3302:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3306:	11 11       	cpse	r17, r1
    3308:	cc c0       	rjmp	.+408    	; 0x34a2 <USB_Device_ProcessControlRequest+0x26c>
    330a:	82 e0       	ldi	r24, 0x02	; 2
    330c:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <USB_DeviceState>
    3310:	b9 cf       	rjmp	.-142    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3312:	90 58       	subi	r25, 0x80	; 128
    3314:	92 30       	cpi	r25, 0x02	; 2
    3316:	08 f0       	brcs	.+2      	; 0x331a <USB_Device_ProcessControlRequest+0xe4>
    3318:	b5 cf       	rjmp	.-150    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    331a:	60 91 da 05 	lds	r22, 0x05DA	; 0x8005da <USB_ControlRequest+0x4>
    331e:	70 91 db 05 	lds	r23, 0x05DB	; 0x8005db <USB_ControlRequest+0x5>
    3322:	9e 01       	movw	r18, r28
    3324:	2d 5f       	subi	r18, 0xFD	; 253
    3326:	3f 4f       	sbci	r19, 0xFF	; 255
    3328:	ae 01       	movw	r20, r28
    332a:	4f 5f       	subi	r20, 0xFF	; 255
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
    3332:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <USB_ControlRequest+0x3>
    3336:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <CALLBACK_USB_GetDescriptor>
    333a:	bc 01       	movw	r22, r24
    333c:	89 2b       	or	r24, r25
    333e:	09 f4       	brne	.+2      	; 0x3342 <USB_Device_ProcessControlRequest+0x10c>
    3340:	a1 cf       	rjmp	.-190    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3346:	87 7f       	andi	r24, 0xF7	; 247
    3348:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	88 23       	and	r24, r24
    3350:	09 f4       	brne	.+2      	; 0x3354 <USB_Device_ProcessControlRequest+0x11e>
    3352:	ab c0       	rjmp	.+342    	; 0x34aa <USB_Device_ProcessControlRequest+0x274>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    3354:	81 30       	cpi	r24, 0x01	; 1
    3356:	09 f4       	brne	.+2      	; 0x335a <USB_Device_ProcessControlRequest+0x124>
    3358:	b2 c0       	rjmp	.+356    	; 0x34be <USB_Device_ProcessControlRequest+0x288>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	9a 81       	ldd	r25, Y+2	; 0x02
    335e:	7a dc       	rcall	.-1804   	; 0x2c54 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3360:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3364:	8b 77       	andi	r24, 0x7B	; 123
    3366:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    336a:	8c cf       	rjmp	.-232    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    336c:	81 30       	cpi	r24, 0x01	; 1
    336e:	29 f0       	breq	.+10     	; 0x337a <USB_Device_ProcessControlRequest+0x144>
    3370:	08 f4       	brcc	.+2      	; 0x3374 <USB_Device_ProcessControlRequest+0x13e>
    3372:	5f c0       	rjmp	.+190    	; 0x3432 <USB_Device_ProcessControlRequest+0x1fc>
    3374:	83 30       	cpi	r24, 0x03	; 3
    3376:	09 f0       	breq	.+2      	; 0x337a <USB_Device_ProcessControlRequest+0x144>
    3378:	85 cf       	rjmp	.-246    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    337a:	99 23       	and	r25, r25
    337c:	09 f4       	brne	.+2      	; 0x3380 <USB_Device_ProcessControlRequest+0x14a>
    337e:	7d c0       	rjmp	.+250    	; 0x347a <USB_Device_ProcessControlRequest+0x244>
    3380:	92 30       	cpi	r25, 0x02	; 2
    3382:	09 f0       	breq	.+2      	; 0x3386 <USB_Device_ProcessControlRequest+0x150>
    3384:	7f cf       	rjmp	.-258    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3386:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
    338a:	91 11       	cpse	r25, r1
    338c:	27 c0       	rjmp	.+78     	; 0x33dc <USB_Device_ProcessControlRequest+0x1a6>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    338e:	90 91 da 05 	lds	r25, 0x05DA	; 0x8005da <USB_ControlRequest+0x4>
    3392:	9f 70       	andi	r25, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3394:	2f ef       	ldi	r18, 0xFF	; 255
    3396:	29 0f       	add	r18, r25
    3398:	26 30       	cpi	r18, 0x06	; 6
    339a:	08 f0       	brcs	.+2      	; 0x339e <USB_Device_ProcessControlRequest+0x168>
    339c:	73 cf       	rjmp	.-282    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    339e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    33a2:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    33a6:	20 ff       	sbrs	r18, 0
    33a8:	19 c0       	rjmp	.+50     	; 0x33dc <USB_Device_ProcessControlRequest+0x1a6>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    33aa:	83 30       	cpi	r24, 0x03	; 3
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <USB_Device_ProcessControlRequest+0x17a>
    33ae:	81 c0       	rjmp	.+258    	; 0x34b2 <USB_Device_ProcessControlRequest+0x27c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    33b0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    33b4:	80 61       	ori	r24, 0x10	; 16
    33b6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    33ba:	21 e0       	ldi	r18, 0x01	; 1
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	a9 01       	movw	r20, r18
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <USB_Device_ProcessControlRequest+0x190>
    33c2:	44 0f       	add	r20, r20
    33c4:	55 1f       	adc	r21, r21
    33c6:	9a 95       	dec	r25
    33c8:	e2 f7       	brpl	.-8      	; 0x33c2 <USB_Device_ProcessControlRequest+0x18c>
    33ca:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    33ce:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    33d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    33d6:	88 60       	ori	r24, 0x08	; 8
    33d8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    33dc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    33e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33e4:	87 7f       	andi	r24, 0xF7	; 247
    33e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    33ea:	98 dd       	rcall	.-1232   	; 0x2f1c <Endpoint_ClearStatusStage>
    33ec:	4b cf       	rjmp	.-362    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    33ee:	91 11       	cpse	r25, r1
    33f0:	49 cf       	rjmp	.-366    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    33f2:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
    33f6:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <USB_ControlRequest+0x3>
    33fa:	99 27       	eor	r25, r25
    33fc:	02 97       	sbiw	r24, 0x02	; 2
    33fe:	0c f0       	brlt	.+2      	; 0x3402 <USB_Device_ProcessControlRequest+0x1cc>
    3400:	41 cf       	rjmp	.-382    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
    3402:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3406:	87 7f       	andi	r24, 0xF7	; 247
    3408:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    340c:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
    3410:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    3414:	83 dd       	rcall	.-1274   	; 0x2f1c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3416:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <USB_Device_ConfigurationNumber>
    341a:	81 11       	cpse	r24, r1
    341c:	44 c0       	rjmp	.+136    	; 0x34a6 <USB_Device_ProcessControlRequest+0x270>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    341e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3422:	87 fd       	sbrc	r24, 7
    3424:	40 c0       	rjmp	.+128    	; 0x34a6 <USB_Device_ProcessControlRequest+0x270>
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    342c:	0e 94 0c 05 	call	0xa18	; 0xa18 <EVENT_USB_Device_ConfigurationChanged>
    3430:	29 cf       	rjmp	.-430    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3432:	90 38       	cpi	r25, 0x80	; 128
    3434:	71 f1       	breq	.+92     	; 0x3492 <USB_Device_ProcessControlRequest+0x25c>
    3436:	92 38       	cpi	r25, 0x82	; 130
    3438:	09 f0       	breq	.+2      	; 0x343c <USB_Device_ProcessControlRequest+0x206>
    343a:	24 cf       	rjmp	.-440    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    343c:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <USB_ControlRequest+0x4>
    3440:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3442:	87 30       	cpi	r24, 0x07	; 7
    3444:	08 f0       	brcs	.+2      	; 0x3448 <USB_Device_ProcessControlRequest+0x212>
    3446:	1e cf       	rjmp	.-452    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3448:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    344c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    3450:	85 fb       	bst	r24, 5
    3452:	88 27       	eor	r24, r24
    3454:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3456:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    345a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    345e:	97 7f       	andi	r25, 0xF7	; 247
    3460:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3464:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    3468:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    346c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3470:	8e 77       	andi	r24, 0x7E	; 126
    3472:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3476:	52 dd       	rcall	.-1372   	; 0x2f1c <Endpoint_ClearStatusStage>
    3478:	05 cf       	rjmp	.-502    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    347a:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <USB_ControlRequest+0x2>
    347e:	91 30       	cpi	r25, 0x01	; 1
    3480:	09 f0       	breq	.+2      	; 0x3484 <USB_Device_ProcessControlRequest+0x24e>
    3482:	00 cf       	rjmp	.-512    	; 0x3284 <USB_Device_ProcessControlRequest+0x4e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	83 30       	cpi	r24, 0x03	; 3
    3488:	09 f0       	breq	.+2      	; 0x348c <USB_Device_ProcessControlRequest+0x256>
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <USB_Device_RemoteWakeupEnabled>
    3490:	a5 cf       	rjmp	.-182    	; 0x33dc <USB_Device_ProcessControlRequest+0x1a6>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3492:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3496:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <USB_Device_RemoteWakeupEnabled>
    349a:	99 23       	and	r25, r25
    349c:	f1 f2       	breq	.-68     	; 0x345a <USB_Device_ProcessControlRequest+0x224>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    349e:	82 60       	ori	r24, 0x02	; 2
    34a0:	dc cf       	rjmp	.-72     	; 0x345a <USB_Device_ProcessControlRequest+0x224>

	while (!(Endpoint_IsINReady()));

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    34a2:	83 e0       	ldi	r24, 0x03	; 3
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    34a4:	33 cf       	rjmp	.-410    	; 0x330c <USB_Device_ProcessControlRequest+0xd6>
    34a6:	84 e0       	ldi	r24, 0x04	; 4
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    34a8:	bf cf       	rjmp	.-130    	; 0x3428 <USB_Device_ProcessControlRequest+0x1f2>
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	9a 81       	ldd	r25, Y+2	; 0x02
    34ae:	38 dc       	rcall	.-1936   	; 0x2d20 <Endpoint_Write_Control_PStream_LE>
    34b0:	57 cf       	rjmp	.-338    	; 0x3360 <USB_Device_ProcessControlRequest+0x12a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    34b2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    34b6:	80 62       	ori	r24, 0x20	; 32
    34b8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    34bc:	8f cf       	rjmp	.-226    	; 0x33dc <USB_Device_ProcessControlRequest+0x1a6>
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	9a 81       	ldd	r25, Y+2	; 0x02
    34c2:	95 dc       	rcall	.-1750   	; 0x2dee <Endpoint_Write_Control_EStream_LE>
    34c4:	4d cf       	rjmp	.-358    	; 0x3360 <USB_Device_ProcessControlRequest+0x12a>

000034c6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    34c6:	08 95       	ret

000034c8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    34c8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    34ca:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <USB_DeviceState>
    34ce:	88 23       	and	r24, r24
    34d0:	91 f0       	breq	.+36     	; 0x34f6 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    34d2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    34d6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    34d8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    34dc:	80 fd       	sbrc	r24, 0
    34de:	0d c0       	rjmp	.+26     	; 0x34fa <USB_USBTask+0x32>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    34e2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    34e4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    34e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    34ec:	83 fd       	sbrc	r24, 3
    34ee:	0d c0       	rjmp	.+26     	; 0x350a <USB_USBTask+0x42>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    34f0:	cf 70       	andi	r28, 0x0F	; 15
    34f2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    34f6:	cf 91       	pop	r28
    34f8:	08 95       	ret
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    34fa:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    34fc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    34fe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3502:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3506:	83 ff       	sbrs	r24, 3
    3508:	f3 cf       	rjmp	.-26     	; 0x34f0 <USB_USBTask+0x28>
	  USB_Device_ProcessControlRequest();
    350a:	95 de       	rcall	.-726    	; 0x3236 <USB_Device_ProcessControlRequest>
    350c:	f1 cf       	rjmp	.-30     	; 0x34f0 <USB_USBTask+0x28>

0000350e <memcpy>:
    350e:	fb 01       	movw	r30, r22
    3510:	dc 01       	movw	r26, r24
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <memcpy+0xa>
    3514:	01 90       	ld	r0, Z+
    3516:	0d 92       	st	X+, r0
    3518:	41 50       	subi	r20, 0x01	; 1
    351a:	50 40       	sbci	r21, 0x00	; 0
    351c:	d8 f7       	brcc	.-10     	; 0x3514 <memcpy+0x6>
    351e:	08 95       	ret

00003520 <eeprom_read_byte>:
    3520:	f9 99       	sbic	0x1f, 1	; 31
    3522:	fe cf       	rjmp	.-4      	; 0x3520 <eeprom_read_byte>
    3524:	92 bd       	out	0x22, r25	; 34
    3526:	81 bd       	out	0x21, r24	; 33
    3528:	f8 9a       	sbi	0x1f, 0	; 31
    352a:	99 27       	eor	r25, r25
    352c:	80 b5       	in	r24, 0x20	; 32
    352e:	08 95       	ret

00003530 <eeprom_write_byte>:
    3530:	26 2f       	mov	r18, r22

00003532 <eeprom_write_r18>:
    3532:	f9 99       	sbic	0x1f, 1	; 31
    3534:	fe cf       	rjmp	.-4      	; 0x3532 <eeprom_write_r18>
    3536:	1f ba       	out	0x1f, r1	; 31
    3538:	92 bd       	out	0x22, r25	; 34
    353a:	81 bd       	out	0x21, r24	; 33
    353c:	20 bd       	out	0x20, r18	; 32
    353e:	0f b6       	in	r0, 0x3f	; 63
    3540:	f8 94       	cli
    3542:	fa 9a       	sbi	0x1f, 2	; 31
    3544:	f9 9a       	sbi	0x1f, 1	; 31
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	01 96       	adiw	r24, 0x01	; 1
    354a:	08 95       	ret

0000354c <_exit>:
    354c:	f8 94       	cli

0000354e <__stop_program>:
    354e:	ff cf       	rjmp	.-2      	; 0x354e <__stop_program>
